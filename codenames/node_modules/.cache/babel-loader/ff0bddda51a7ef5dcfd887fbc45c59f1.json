{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/micha/Codenames/codenames/codenames/src/Components/GamePage/Game.js\";\nimport React, { Component } from 'react';\nimport './Game.css';\nimport axios from 'axios';\nimport SpymastersGame from './Spymasters/SpymastersGame.js';\nimport OperativesGame from './Operatives/OperativesGame.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Game extends Component {\n  constructor() {\n    super();\n\n    this.componentDidMount = async () => {\n      let gameWords = this.props.location.state.gameWords;\n\n      for (let i = 0; i < gameWords.length; i++) {\n        if (gameWords[i].category === 'D') {\n          this.setState({\n            doubleAgent: gameWords[i],\n            doubleAgentIndex: i\n          });\n        }\n      }\n\n      this.setTotalCards();\n      await axios.get('http://127.0.0.1:8000/codenames/players').then(res => {\n        this.setState({\n          playersdata: res.data\n        });\n        let playerExist = false;\n\n        for (let i = 0; i < res.data.length; i++) {\n          if (res.data[i].game_id === this.props.location.state.gameid && res.data[i].room === this.props.location.state.room_key && res.data[i].user_id === this.props.location.state.playerid) {\n            playerExist = true;\n          }\n        }\n\n        if (playerExist === false) {\n          axios.post('http://127.0.0.1:8000/codenames/players', {\n            operative_screen_name: this.props.location.state.nickname,\n            team: this.props.location.state.team,\n            role: this.props.location.state.task,\n            room: this.props.location.state.room_key,\n            game_id: this.props.location.state.gameid,\n            user_id: this.props.location.state.playerid\n          }).then(response => {\n            if (this.props.location.state.team === 'B' && this.props.location.state.task === 'O') {\n              console.log(\"new blue operative\");\n              this.setState({\n                blueOperatives: [...this.state.blueOperatives, response.data]\n              });\n            } else if (this.props.location.state.team === 'R' && this.props.location.state.task === 'O') {\n              console.log(\"new red operative\");\n              this.setState({\n                redOperatives: [...this.state.redOperatives, response.data]\n              });\n            }\n\n            this.setState({\n              playersdata: [...this.state.playersdata, response.data]\n            });\n          });\n        }\n      });\n      this.setState({\n        room_key: this.props.location.state.room_key,\n        roomid: this.props.location.state.roomid,\n        nickname: this.props.location.state.nickname,\n        team: this.props.location.state.team,\n        task: this.props.location.state.task,\n        gameid: this.props.location.state.gameid,\n        gameData: this.props.location.state.gameData,\n        gameWords: this.props.location.state.gameWords,\n        playerid: this.props.location.state.playerid,\n        redteamid: this.props.location.state.redteamid,\n        blueteamid: this.props.location.state.blueteamid\n      });\n      this.updateGameWords(this.props.location.state.gameid);\n      this.connectTurns();\n      await axios.get(`http://127.0.0.1:8000/codenames/redTeam/${this.state.redteamid}`).then(response => {\n        this.setState({\n          red_score: response.data.red_team_score\n        });\n      });\n      await axios.get(`http://127.0.0.1:8000/codenames/blueTeam/${this.state.blueteamid}`).then(response => {\n        this.setState({\n          blue_score: response.data.blue_team_score\n        });\n      });\n      const localRedTeamId = localStorage.getItem(this.state.redteamid);\n      const localBlueTeamId = localStorage.getItem(this.state.blueteamid);\n\n      if (localRedTeamId && localBlueTeamId) {\n        // console.log(localRedTeamId, localBlueTeamId);\n        this.setState({\n          red_score: Number(localRedTeamId),\n          blue_score: Number(localBlueTeamId)\n        });\n      }\n\n      this.connectTeamPoints();\n      this.connectPlayers(); // ATTEMP WS FOR WIN LOSE PROMPT\n\n      this.connectWinLose();\n      this.connectDoubleAgent();\n\n      if (this.state.currentPlayer === null) {\n        console.log(\"trying to set initial player\");\n        this.setIntial();\n      } else {\n        console.log(\"was already set\");\n        console.log(this.state.currentPlayer);\n        console.log(this.state.currentTeam);\n        console.log(\"was already set\");\n      }\n      /* Just in case of refresh */\n\n\n      let totalBlueCards = this.state.totalBlueCards;\n      let totalRedCards = this.state.totalRedCards;\n      let redPoints = this.state.red_score;\n      let bluePoints = this.state.blue_score;\n\n      if (redPoints === totalRedCards) {\n        this.setState({\n          winningTeam: \"R\",\n          losingTeam: \"B\"\n        });\n        let winningTeam = \"R\";\n        this.showPopUp(winningTeam);\n      } else if (bluePoints === totalBlueCards) {\n        this.setState({\n          winningTeam: \"B\",\n          losingTeam: \"R\"\n        });\n        let winningTeam = \"B\";\n        this.showPopUp(winningTeam);\n      }\n    };\n\n    this.componentDidUpdate = (prevProps, prevState) => {\n      if (this.state.wsp && this.state.wsp.readyState === 1 && this.state.loadedPlayers === false) {\n        console.log('the ready state is working', this.state.playersdata[this.state.playersdata.length - 1]);\n        this.socketSendPlayers(this.state.playersdata[this.state.playersdata.length - 1]);\n        this.setState({\n          loadedPlayers: true\n        });\n      }\n    };\n\n    this.setIntial = () => {\n      var player;\n      var team;\n\n      if (this.state.wantedFirst === 'B' && this.state.blueOperatives.length > 0) {\n        player = this.state.blueOperatives[this.state.bIndex].player_id;\n        team = 'B';\n        var bIdx = this.state.bIndex + 1;\n        this.setState({\n          bIndex: bIdx\n        });\n      } else if (this.state.wantedFirst === 'R') {\n        console.log(\"red team wanted first\");\n        console.log(this.state.redOperatives);\n\n        if (this.state.redOperatives.length === 0) {\n          player = {\n            operative_screen_name: this.props.location.state.nickname,\n            team: this.props.location.state.team,\n            role: this.props.location.state.task,\n            room: this.props.location.state.room_key,\n            game_id: this.props.location.state.gameid,\n            user_id: this.props.location.state.playerid\n          };\n        } else {\n          player = this.state.redOperatives[this.state.rIndex].player_id;\n        }\n\n        team = 'R';\n        var rIdx = this.state.rIndex + 1;\n        this.setState({\n          rIndex: rIdx\n        });\n      } // this.state.ws_turn.onopen = () => {\n      //     console.log(\"line 187 -- ws open\")\n      //     this.updateRoundPlayer(team, player, this.state.rIndex, this.state.bIndex)\n      //     this.setState({\n      //         currentPlayer: player,\n      //         currentTeam: team\n      //     })\n      // }\n\n    };\n\n    this.connectTurns = () => {\n      var ws_turn = new WebSocket('ws://localhost:8000/turns/turns/' + this.state.gameid + '/');\n      let that = this; //cache the this\n\n      var connectInterval; //websocket onopen event listener\n\n      ws_turn.onopen = () => {\n        // console.log('connect team points component');\n        this.setState({\n          ws_turn: ws_turn\n        });\n        that.timeout = 250;\n        clearTimeout(connectInterval);\n      };\n\n      ws_turn.onclose = e => {\n        console.log(`Socket is closed. Reconnect will be attempted in ${Math.min(10000 / 1000, (that.timeout + that.timeout) / 1000)} second.`, e.reason);\n        that.timeout = that.timeout + that.timeout; //increment retry interval\n\n        connectInterval = setTimeout(this.checkTurns, Math.min(1000, that.timeout));\n      }; // websocket onerror event listener\n\n\n      ws_turn.onerror = err => {\n        console.error(\"Socket encountered error: \", err.message, \"Closing socket\");\n        ws_turn.close();\n      };\n\n      ws_turn.onmessage = evt => {\n        // listen to data sent from the websocket server\n        const data = JSON.parse(evt.data);\n        console.log(data);\n        console.log(\"tryeng to print event out\");\n        console.log(evt); // console.log(\"received clue!\")\n\n        let nextPlayingTeam = data.nextTeam;\n        let nextUser = data.nextPlayer;\n        this.setState({\n          currentTeam: nextPlayingTeam,\n          currentPlayer: nextUser\n        });\n        console.log(\"start printing out ws on message stuff\");\n        console.log(nextPlayingTeam);\n        console.log(nextUser);\n        console.log(this.state.currentTeam);\n        console.log(this.state.currentPlayer);\n        console.log(\"finished printing out ws on message stuff\");\n      };\n\n      this.setState(prevState => {\n        return {\n          ws_turn: ws_turn\n        };\n      });\n    };\n\n    this.setDoubleAgent = () => {\n      let doubleAgent = { ...this.state.doubleAgent\n      };\n      doubleAgent.category = this.state.team;\n      let agentClicked = this.state.agentClicked;\n      agentClicked = true;\n      this.setState({\n        doubleAgent,\n        agentClicked\n      }); // localStorage.setItem(this.state.gameid, agentClicked)\n\n      axios.put(`http://127.0.0.1:8000/codenames/games/word/${this.state.doubleAgent.word_id}`, doubleAgent).then(res => {\n        console.log(res);\n        this.updateGameWords(this.state.gameid);\n      });\n      var data = {\n        \"number\": this.state.doubleAgentIndex,\n        \"team\": this.state.team\n      };\n      this.state.doubleAgentWS.send(JSON.stringify(data)); // send to channel\n\n      console.log(data);\n\n      if (doubleAgent.category === 'R') {\n        this.setState(prevState => {\n          return {\n            totalRedCards: prevState.totalRedCards + 1\n          };\n        });\n      } else if (doubleAgent.category === 'B') {\n        this.setState(prevState => {\n          return {\n            totalBlueCards: prevState.totalBlueCards + 1\n          };\n        });\n      }\n    };\n\n    this.updateGameWords = gameid => {\n      axios.get(`http://127.0.0.1:8000/codenames/games/${gameid}`).then(res => {\n        this.setState({\n          gameWords: res.data.gameWords\n        });\n      });\n    };\n\n    this.increaseTeamPoints = (team, word) => {\n      let totalBlueCards = this.state.totalBlueCards;\n      let totalRedCards = this.state.totalRedCards;\n      let win = this.state.winningTeam;\n      let lose = this.state.losingTeam;\n      let redPoints = this.state.red_score;\n      let bluePoints = this.state.blue_score;\n\n      if (team === 'R') {\n        let wordObj = this.state.gameWords.find(w => w.word_id === word);\n\n        if (wordObj.guessed === false) {\n          this.setState(prevState => {\n            return {\n              red_score: prevState.red_score + 1\n            };\n          });\n          redPoints += 1;\n          localStorage.setItem(this.state.redteamid, JSON.stringify(redPoints));\n          axios.patch(`http://127.0.0.1:8000/codenames/games/word/${word}`, {\n            guessed: true\n          }).then(response => {\n            console.log(response.data);\n          });\n          axios.patch(`http://127.0.0.1:8000/codenames/redTeam/${this.state.redteamid}`, {\n            red_team_score: redPoints\n          }).then(response => {\n            console.log(response.data);\n          });\n        }\n\n        this.socketSendTeamPoints(redPoints, bluePoints); // this.socketSendPlayers(this.state.playersdata[this.state.playersdata.length-1]);\n      } else if (team === 'B') {\n        let wordObj = this.state.gameWords.find(w => w.word_id === word);\n\n        if (wordObj.guessed === false) {\n          this.setState(prevState => {\n            return {\n              blue_score: prevState.blue_score + 1\n            };\n          });\n          bluePoints += 1;\n          localStorage.setItem(this.state.blueteamid, JSON.stringify(bluePoints));\n          axios.patch(`http://127.0.0.1:8000/codenames/games/word/${word}`, {\n            guessed: true\n          }).then(response => {\n            console.log(response.data);\n          });\n          axios.patch(`http://127.0.0.1:8000/codenames/blueTeam/${this.state.blueteamid}`, {\n            blue_team_score: bluePoints\n          }).then(response => {\n            console.log(response.data);\n          });\n        }\n\n        this.socketSendTeamPoints(redPoints, bluePoints);\n\n        if (team !== this.state.currentTeam) {\n          this.endRoundEarly();\n        }\n      } // if assassin card is guessed\n      else if (team === 'A') {\n        let wordObj = this.state.gameWords.find(w => w.word_id === word); // let currentTeam = this.state.currentTeam;\n        // console.log(currentTeam);\n\n        if (wordObj.guessed === false) {\n          // bluePoints += 1\n          this.setState({\n            assassinGuessed: true\n          });\n\n          if (this.state.team === 'R') {\n            this.setState({\n              winningTeam: \"B\",\n              losingTeam: \"R\"\n            });\n            let winningTeam = \"B\";\n            let win = 'B';\n            let lose = 'R';\n            this.socketSendWinLose(win, lose);\n            this.showPopUp(winningTeam);\n          } else if (this.state.team === 'B') {\n            this.setState({\n              winningTeam: \"R\",\n              losingTeam: \"B\"\n            });\n            let winningTeam = \"R\";\n            let win = 'R';\n            let lose = 'B';\n            this.socketSendWinLose(win, lose);\n            this.showPopUp(winningTeam);\n          } // localStorage.setItem(this.state.blueteamid, JSON.stringify(bluePoints));\n\n\n          axios.patch(`http://127.0.0.1:8000/codenames/games/word/${word}`, {\n            guessed: true\n          }).then(response => {\n            console.log(response.data);\n          });\n        }\n      }\n\n      if (redPoints === totalRedCards) {\n        this.setState({\n          winningTeam: \"R\",\n          losingTeam: \"B\"\n        });\n        let winningTeam = \"R\";\n        win = 'R';\n        lose = 'B'; // ATTEMPT\n\n        this.socketSendWinLose(win, lose);\n        console.log('RED WIN');\n        this.showPopUp(winningTeam);\n      } else if (bluePoints === totalBlueCards) {\n        this.setState({\n          winningTeam: \"B\",\n          losingTeam: \"R\"\n        });\n        win = 'B';\n        lose = 'R';\n        let winningTeam = \"B\"; // ATTEMPT\n\n        this.socketSendWinLose(win, lose);\n        console.log('BLUE WIN');\n        this.showPopUp(winningTeam);\n      }\n    };\n\n    this.socketSendWinLose = (winningTeam, losingTeam) => {\n      var data = {\n        \"winningTeam\": winningTeam,\n        \"losingTeam\": losingTeam\n      };\n      this.state.wswl.send(JSON.stringify(data));\n      console.log('SENT WIN LOSE TO OTHERS!!!!!!!!!');\n    };\n\n    this.setTotalCards = () => {\n      let gameWords = this.props.location.state.gameWords;\n\n      for (let i = 0; i < gameWords.length; i++) {\n        if (gameWords[i].category === 'R') {\n          // this.setState({\n          //     doubleAgent: gameWords[i],\n          //     doubleAgentIndex: i\n          // })\n          this.setState(prevState => {\n            return {\n              totalRedCards: prevState.totalRedCards + 1\n            };\n          });\n        } else if (gameWords[i].category === 'B') {\n          // this.setState({\n          //     doubleAgent: gameWords[i],\n          //     doubleAgentIndex: i\n          // })\n          this.setState(prevState => {\n            return {\n              totalBlueCards: prevState.totalBlueCards + 1\n            };\n          });\n        }\n      } //this.showPopUp()\n\n    };\n\n    this.showPopUp = winningTeam => {\n      //let winningScreenIsOpen = this.state.winningScreenIsOpen\n      let team = this.props.location.state.team;\n      console.log(winningTeam); //console.log(winningScreenIsOpen)\n      //if there is a winning team\n\n      if (winningTeam !== \"\") {\n        this.setState({\n          winningScreenIsOpen: true\n        }); //this works\n\n        if (winningTeam === \"R\") {\n          if (team === 'R') {\n            //console.log(\"winning team is R has been called!\")\n            //let statusMessage = 'CONGRATS! YOUR TEAM WON!'\n            this.setState({\n              statusMessage: 'CONGRATS! YOUR TEAM WON!'\n            });\n          } else {\n            //console.log(\"winning team is Blue has been called!\")\n            //let statusMessage = 'SORRY! YOUR TEAM LOST!'\n            this.setState({\n              statusMessage: 'SORRY! YOUR TEAM LOST!'\n            });\n          }\n        } else if (winningTeam === \"B\") {\n          //console.log(\"winning team is B has been called!\")\n          if (team === 'B') {\n            console.log(\"winning team is Blue has been called!\");\n            this.setState({\n              statusMessage: 'CONGRATS! YOUR TEAM WON!'\n            });\n          } else {\n            this.setState({\n              statusMessage: 'SORRY! YOUR TEAM LOST!'\n            });\n          }\n        }\n      }\n    };\n\n    this.socketSendTeamPoints = (red_team_points, blue_team_points) => {\n      var data = {\n        \"red_team_points\": red_team_points,\n        \"blue_team_points\": blue_team_points\n      };\n      this.state.wstp.send(JSON.stringify(data)); // console.log(data)\n    };\n\n    this.connectTeamPoints = () => {\n      var wstp = new WebSocket('ws://localhost:8000/teampoints/teampoints/' + this.state.gameid + '/');\n      let that = this; //cache the this\n\n      var connectInterval; //websocket onopen event listener\n\n      wstp.onopen = () => {\n        // console.log('connect team points component');\n        this.setState({\n          wstp: wstp\n        });\n        that.timeout = 250;\n        clearTimeout(connectInterval);\n      };\n\n      wstp.onclose = e => {\n        console.log(`Socket is closed. Reconnect will be attempted in ${Math.min(10000 / 1000, (that.timeout + that.timeout) / 1000)} second.`, e.reason);\n        that.timeout = that.timeout + that.timeout; //increment retry interval\n\n        connectInterval = setTimeout(this.checkTeamPoints, Math.min(1000, that.timeout));\n      }; // websocket onerror event listener\n\n\n      wstp.onerror = err => {\n        console.error(\"Socket encountered error: \", err.message, \"Closing socket\");\n        wstp.close();\n      };\n\n      wstp.onmessage = evt => {\n        // listen to data sent from the websocket server\n        const data = JSON.parse(evt.data);\n        console.log(data); // console.log(\"received clue!\")\n\n        let red_team_points = data.red_team_points;\n        let blue_team_points = data.blue_team_points;\n        this.setState(prevState => {\n          return {\n            red_score: red_team_points,\n            blue_score: blue_team_points\n          };\n        });\n      };\n\n      this.setState(prevState => {\n        return {\n          wstp: wstp\n        };\n      });\n    };\n\n    this.checkTeamPoints = () => {\n      const {\n        wstp\n      } = this.state.wstp;\n      if (!wstp || wstp.readyState === WebSocket.CLOSED) this.connectTeamPoints(); //check if websocket instance is closed, if so call `connect` function.\n    };\n\n    this.checkTurns = () => {\n      const {\n        ws_turn\n      } = this.state.ws_turn;\n      if (!ws_turn || ws_turn.readyState === WebSocket.CLOSED) this.connectTurns(); //check if websocket instance is closed, if so call `connect` function.\n    };\n\n    this.sendTurns = (team, player) => {\n      console.log(\"sendturns\");\n      console.log(player);\n      console.log(team);\n      console.log(player);\n      console.log(\"sendturns\");\n\n      if (player !== null) {\n        this.state.ws_turn.send(JSON.stringify({\n          'nextTeam': team,\n          'nextPlayer': player\n        }));\n      }\n    };\n\n    this.updateRoundPlayer = (team, player, redIndex, blueIndex) => {\n      this.setState({\n        currentPlayer: player,\n        currentTeam: team,\n        rIndex: redIndex,\n        bIndex: blueIndex\n      });\n      this.sendTurns(team, player); // this.clueSocketSend()\n    };\n\n    this.endRoundEarly = () => {\n      var team;\n      var player;\n      var blueIndex = this.state.bIndex;\n      var redIndex = this.state.rIndex;\n\n      if (this.state.currentTeam === 'R') {\n        team = 'B';\n        console.log(\"tryig to fetch a blue player\");\n        console.log(this.state.blueOperatives.length);\n        player = this.state.blueOperatives[blueIndex];\n        blueIndex += 1;\n\n        if (blueIndex === this.state.blueOperatives.length) {\n          blueIndex = 0;\n        }\n\n        this.updateRoundPlayer(team, player, redIndex, blueIndex);\n      } else if (this.state.currentTeam === 'B') {\n        team = 'R';\n        console.log(\"tryig to fetch a red player\");\n        console.log(this.state.redOperatives.length);\n        player = this.state.redOperatives[redIndex];\n        redIndex += 1;\n\n        if (redIndex === this.state.redOperatives.length) {\n          redIndex = 0;\n        }\n\n        this.updateRoundPlayer(team, player, redIndex, blueIndex);\n      }\n    };\n\n    this.socketSendPlayers = player => {\n      var data = {\n        \"new_players\": player\n      };\n      this.state.wsp.send(JSON.stringify(data)); // console.log('this is the incoming players data', data);\n    };\n\n    this.connectPlayers = () => {\n      var wsp = new WebSocket('ws://localhost:8000/players/players/' + this.state.gameid + '/');\n      let that = this;\n      var connectInterval;\n\n      wsp.onopen = () => {\n        this.setState({\n          wsp: wsp\n        });\n        that.timeout = 250;\n        clearTimeout(connectInterval);\n      };\n\n      wsp.onclose = e => {\n        console.log(`Socket is closed. Reconnect will be attempted in ${Math.min(10000 / 1000, (that.timeout + that.timeout) / 1000)} second.`, e.reason);\n        that.timeout = that.timeout + that.timeout; //increment retry interval\n\n        connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\n      };\n\n      wsp.onerror = err => {\n        console.error(\"Socket encountered error: \", err.message, \"Closing socket\");\n        wsp.close();\n      };\n\n      wsp.onmessage = evt => {\n        const data = JSON.parse(evt.data);\n        let new_players = data.new_players;\n\n        if (!this.state.playersdata.includes(new_players)) {\n          let playersData = this.state.playersdata;\n          playersData.push(new_players);\n          this.setState({\n            playersdata: playersData\n          });\n        } // console.log('THIS IS THE NEWEST PLAYERS ,PLEASE SHOW ', new_players)\n\n      };\n\n      this.setState(prevState => {\n        return {\n          wsp: wsp\n        };\n      });\n    };\n\n    this.checkPlayers = () => {\n      const {\n        wsp\n      } = this.state.wsp;\n      if (!wsp || wsp.readyState === WebSocket.CLOSED) this.connectPlayers();\n    };\n\n    this.connectClue = () => {\n      var wsClue = new WebSocket('ws://localhost:8000/cluebox/cluebox/' + this.props.gameid + '/');\n      let that = this; // cache the this\n\n      var connectInterval; // websocket onopen event listener\n\n      wsClue.onopen = () => {\n        console.log(\"connected websocket main component\");\n        this.setState({\n          wsClue: wsClue\n        });\n        that.timeout = 250; // reset timer to 250 on open of websocket connection \n\n        clearTimeout(connectInterval); // clear Interval on on open of websocket connection\n      }; // websocket onclose event listener\n\n\n      wsClue.onclose = e => {\n        console.log(`Socket is closed. Reconnect will be attempted in ${Math.min(10000 / 1000, (that.timeout + that.timeout) / 1000)} second.`, e.reason);\n        that.timeout = that.timeout + that.timeout; //increment retry interval\n\n        connectInterval = setTimeout(this.checkClueSocket, Math.min(10000, that.timeout)); //call check function after timeout\n      }; // websocket onerror event listener\n\n\n      wsClue.onerror = err => {\n        console.error(\"Socket encountered error: \", err.message, \"Closing socket\");\n        wsClue.close();\n      };\n\n      wsClue.onmessage = evt => {\n        // listen to data sent from the websocket server\n        const data = JSON.parse(evt.data);\n        console.log(data);\n        console.log(\"received clue!\");\n        let count = data.count;\n        let clue = data.clue;\n        this.setState(prevState => {\n          return {\n            spymasterClueCount: count,\n            spymasterClueWord: clue\n          };\n        });\n      };\n\n      this.setState(prevState => {\n        return {\n          wsClue: wsClue\n        };\n      });\n    };\n\n    this.checkClueSocket = () => {\n      const {\n        wsClue\n      } = this.state.wsClue;\n      if (!wsClue || wsClue.readyState === WebSocket.CLOSED) this.connectClue(); //check if websocket instance is closed, if so call `connect` function.\n    };\n\n    this.clueSocketSend = () => {\n      var data = {\n        \"count\": 0,\n        \"clue\": \"Waiting...\"\n      };\n      this.state.wsClue.send(JSON.stringify(data)); // send to channel\n\n      console.log(data);\n    };\n\n    this.connectWinLose = () => {\n      var wswl = new WebSocket('ws://localhost:8000/winlose/winlose/' + this.state.gameid + '/');\n      let that = this;\n      var connectInterval;\n\n      wswl.onopen = () => {\n        this.setState({\n          wswl: wswl\n        });\n        that.timeout = 250;\n        clearTimeout(connectInterval);\n      };\n\n      wswl.onclose = e => {\n        console.log(`Socket is closed. Reconnect will be attempted in ${Math.min(10000 / 1000, (that.timeout + that.timeout) / 1000)} second.`, e.reason); // increment retry interval\n\n        that.timeout = that.timeout + that.timeout;\n        connectInterval = setTimeout(this.checkWinLose, Math.min(1000, that.timeout));\n      };\n\n      wswl.onerror = err => {\n        console.error(\"Socket encountered error: \", err.message, \"Closing socket\");\n        wswl.close();\n      };\n\n      wswl.onmessage = evt => {\n        const data = JSON.parse(evt.data);\n        console.log(data);\n        let winningTeam = data.winningTeam;\n        let losingTeam = data.losingTeam;\n        this.setState(prevState => {\n          return {\n            winningTeam: winningTeam,\n            losingTeam: losingTeam,\n            winningScreenIsOpen: true // statusMessage: statusMessage,\n\n          };\n        });\n      };\n\n      this.setState(prevState => {\n        return {\n          wswl: wswl\n        };\n      });\n    };\n\n    this.checkWinLose = () => {\n      const {\n        wswl\n      } = this.state.wswl;\n      if (!wswl || wswl.readyState === WebSocket.CLOSED) this.connectWinLose();\n    };\n\n    this.connectDoubleAgent = () => {\n      var ws = new WebSocket('ws://localhost:8000/doubleagent/doubleagent/' + this.state.gameid + '/');\n      let that = this; // cache the this\n\n      var connectInterval; // websocket onopen event listener\n\n      ws.onopen = () => {\n        console.log(\"connected websocket main component\");\n        this.setState({\n          doubleAgentWS: ws\n        });\n        that.timeout = 250; // reset timer to 250 on open of websocket connection \n\n        clearTimeout(connectInterval); // clear Interval on on open of websocket connection\n      }; // websocket onclose event listener\n\n\n      ws.onclose = e => {\n        console.log(`Socket is closed. Reconnect will be attempted in ${Math.min(10000 / 1000, (that.timeout + that.timeout) / 1000)} second.`, e.reason);\n        that.timeout = that.timeout + that.timeout; //increment retry interval\n\n        connectInterval = setTimeout(this.checkDA, Math.min(10000, that.timeout)); //call check function after timeout\n      }; // websocket onerror event listener\n\n\n      ws.onerror = err => {\n        console.error(\"Socket encountered error: \", err.message, \"Closing socket\");\n        ws.close();\n      };\n\n      ws.onmessage = evt => {\n        // listen to data sent from the websocket server\n        const data = JSON.parse(evt.data);\n        console.log(data);\n        console.log(\"received clue!\");\n        let team = data.team;\n\n        if (this.state.agentClicked === false && this.state.gameWords[this.state.doubleAgentIndex].category === 'D') {\n          let doubleAgent = { ...this.state.doubleAgent\n          };\n          doubleAgent.category = team;\n          let gameWords = this.state.gameWords;\n          gameWords[this.state.doubleAgentIndex] = doubleAgent;\n          this.setState(prevState => {\n            return {\n              // Add\n              agentClicked: true,\n              // Make it so the I WANT FIRST goes away\n              doubleAgent: doubleAgent,\n              gameWords: gameWords\n            };\n          }); // Update number of cards I guess\n\n          if (doubleAgent.category === 'R') {\n            this.setState(prevState => {\n              return {\n                totalRedCards: prevState.totalRedCards + 1\n              };\n            });\n          } else if (doubleAgent.category === 'B') {\n            this.setState(prevState => {\n              return {\n                totalBlueCards: prevState.totalBlueCards + 1\n              };\n            });\n          }\n        }\n      };\n\n      this.setState(prevState => {\n        return {\n          doubleAgentWS: ws\n        };\n      });\n    };\n\n    this.checkDA = () => {\n      const {\n        ws\n      } = this.state.doubleAgentWS;\n      if (!ws || ws.readyState === WebSocket.CLOSED) this.connectDoubleAgent(); //check if websocket instance is closed, if so call `connect` function.\n    };\n\n    this.state = {\n      room_key: '',\n      roomid: '',\n      nickname: '',\n      team: '',\n      playerid: '',\n      task: '',\n      red_score: 0,\n      blue_score: 0,\n      gameid: '',\n      gameData: '',\n      gameWords: '',\n      doubleAgent: '',\n      doubleAgentIndex: '',\n      playersdata: '',\n      agentClicked: false,\n      redteamid: '',\n      blueteamid: '',\n      loadedPlayers: false,\n      //Websocket Team Points\n      wstp: null,\n      //Websocket Players\n      wsp: null,\n      //Websocket Win Lose Prompt\n      wswl: null,\n      totalBlueCards: 0,\n      totalRedCards: 0,\n      winningTeam: '',\n      losingTeam: '',\n      winningScreenIsOpen: false,\n      statusMessage: '',\n      // currentTeam: '',\n      assassinGuessed: false,\n      //WebSocket Double Agent\n      doubleAgentWS: '',\n      // WebSocket turns\n      ws_turn: null,\n      currentTeam: 'R',\n      currentPlayer: null,\n      wsClue: null,\n      blueOperatives: [],\n      bIndex: 0,\n      redOperatives: [],\n      rIndex: 0,\n      wantedFirst: 'R'\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.state.task === 'S' ? /*#__PURE__*/_jsxDEV(SpymastersGame, {\n        doubleAgent: this.state.doubleAgent,\n        doubleAgentIndex: this.state.doubleAgentIndex,\n        agentClicked: this.state.agentClicked,\n        setDoubleAgent: this.setDoubleAgent,\n        room_key: this.state.room_key,\n        gameWords: this.state.gameWords,\n        increaseTeamPoints: this.increaseTeamPoints,\n        redPoints: this.state.red_score,\n        bluePoints: this.state.blue_score,\n        playersdata: this.state.playersdata,\n        gameid: this.state.gameid,\n        winningScreenIsOpen: this.state.winningScreenIsOpen,\n        statusMessage: this.state.statusMessage,\n        team: this.state.team,\n        winningTeam: this.state.winningTeam,\n        showPopUp: this.showPopUp,\n        myTeam: this.state.team,\n        currentTeam: this.state.currentTeam,\n        currentPlayer: this.state.currentPlayer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1041,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(OperativesGame, {\n        doubleAgent: this.state.doubleAgent,\n        doubleAgentIndex: this.state.doubleAgentIndex,\n        agentClicked: this.state.agentClicked,\n        room_key: this.state.room_key,\n        gameWords: this.state.gameWords,\n        gameid: this.state.gameid,\n        increaseTeamPoints: this.increaseTeamPoints,\n        redPoints: this.state.red_score,\n        bluePoints: this.state.blue_score,\n        playersdata: this.state.playersdata,\n        winningScreenIsOpen: this.state.winningScreenIsOpen,\n        statusMessage: this.state.statusMessage,\n        team: this.state.team,\n        winningTeam: this.state.winningTeam,\n        showPopUp: this.showPopUp,\n        currentTeam: this.state.currentTeam,\n        currentPlayer: this.state.currentPlayer,\n        updateRoundPlayer: this.updateRoundPlayer,\n        playerid: this.state.playerid,\n        playerTeam: this.state.team,\n        bIndex: this.state.bIndex,\n        rIndex: this.state.rIndex\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1064,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1035,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/mnt/c/Users/micha/Codenames/codenames/codenames/src/Components/GamePage/Game.js"],"names":["React","Component","axios","SpymastersGame","OperativesGame","Game","constructor","componentDidMount","gameWords","props","location","state","i","length","category","setState","doubleAgent","doubleAgentIndex","setTotalCards","get","then","res","playersdata","data","playerExist","game_id","gameid","room","room_key","user_id","playerid","post","operative_screen_name","nickname","team","role","task","response","console","log","blueOperatives","redOperatives","roomid","gameData","redteamid","blueteamid","updateGameWords","connectTurns","red_score","red_team_score","blue_score","blue_team_score","localRedTeamId","localStorage","getItem","localBlueTeamId","Number","connectTeamPoints","connectPlayers","connectWinLose","connectDoubleAgent","currentPlayer","setIntial","currentTeam","totalBlueCards","totalRedCards","redPoints","bluePoints","winningTeam","losingTeam","showPopUp","componentDidUpdate","prevProps","prevState","wsp","readyState","loadedPlayers","socketSendPlayers","player","wantedFirst","bIndex","player_id","bIdx","rIndex","rIdx","ws_turn","WebSocket","that","connectInterval","onopen","timeout","clearTimeout","onclose","e","Math","min","reason","setTimeout","checkTurns","onerror","err","error","message","close","onmessage","evt","JSON","parse","nextPlayingTeam","nextTeam","nextUser","nextPlayer","setDoubleAgent","agentClicked","put","word_id","doubleAgentWS","send","stringify","increaseTeamPoints","word","win","lose","wordObj","find","w","guessed","setItem","patch","socketSendTeamPoints","endRoundEarly","assassinGuessed","socketSendWinLose","wswl","winningScreenIsOpen","statusMessage","red_team_points","blue_team_points","wstp","checkTeamPoints","CLOSED","sendTurns","updateRoundPlayer","redIndex","blueIndex","check","new_players","includes","playersData","push","checkPlayers","connectClue","wsClue","checkClueSocket","count","clue","spymasterClueCount","spymasterClueWord","clueSocketSend","checkWinLose","ws","checkDA","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport './Game.css'\nimport axios from 'axios'\nimport SpymastersGame from './Spymasters/SpymastersGame.js'\nimport OperativesGame from './Operatives/OperativesGame.js'\n\n\nclass Game extends Component {\n    constructor() {\n        super()\n        this.state = {\n            room_key: '',\n            roomid: '',\n            nickname: '',\n            team: '',\n            playerid: '',\n            task: '',\n            red_score: 0,\n            blue_score: 0,\n            gameid: '',\n            gameData: '', \n            gameWords: '',\n            doubleAgent: '',\n            doubleAgentIndex: '',\n            playersdata: '',\n            agentClicked: false,\n\n            redteamid: '',\n            blueteamid: '',\n            \n            loadedPlayers: false,\n            //Websocket Team Points\n            wstp: null,\n            //Websocket Players\n            wsp: null,\n\n            //Websocket Win Lose Prompt\n            wswl: null,\n\n            totalBlueCards: 0,\n            totalRedCards: 0,\n\n            winningTeam: '',\n            losingTeam: '',\n\n            winningScreenIsOpen: false,\n            statusMessage: '',\n\n            // currentTeam: '',\n            assassinGuessed: false,\n            \n            //WebSocket Double Agent\n            doubleAgentWS: '',\n\n            // WebSocket turns\n            ws_turn: null,\n            currentTeam: 'R',\n            currentPlayer: null,\n\n            wsClue: null,\n\n            blueOperatives: [],\n            bIndex: 0,\n            redOperatives: [],\n            rIndex: 0,\n\n            wantedFirst: 'R'\n        }\n    }\n\n    \n\n\n\n    componentDidMount = async () =>{\n        let gameWords = this.props.location.state.gameWords;\n        for(let i = 0; i < gameWords.length; i++) {\n            if(gameWords[i].category === 'D') {\n                this.setState({\n                    doubleAgent: gameWords[i],\n                    doubleAgentIndex: i\n                })\n            }\n        }\n        this.setTotalCards(); \n\n        await axios.get('http://127.0.0.1:8000/codenames/players').then(res => {\n            this.setState({\n                playersdata: res.data\n            })\n            let playerExist = false;\n            for(let i = 0; i < res.data.length; i++) {\n                if(res.data[i].game_id === this.props.location.state.gameid && res.data[i].room === this.props.location.state.room_key && res.data[i].user_id === this.props.location.state.playerid) {\n                    playerExist = true;\n                }\n            }\n\n            if(playerExist === false) {\n                axios.post('http://127.0.0.1:8000/codenames/players', {\n                    operative_screen_name: this.props.location.state.nickname,\n                    team: this.props.location.state.team,\n                    role: this.props.location.state.task,\n                    room: this.props.location.state.room_key,\n                    game_id: this.props.location.state.gameid,\n                    user_id: this.props.location.state.playerid\n                }).then(response =>{\n\n                    if(this.props.location.state.team === 'B' && this.props.location.state.task === 'O') {\n                        console.log(\"new blue operative\")\n                        this.setState({\n                            blueOperatives: [...this.state.blueOperatives, response.data]\n                        })\n                    } else if(this.props.location.state.team === 'R' && this.props.location.state.task === 'O') {\n                        console.log(\"new red operative\")\n                        this.setState({\n                            redOperatives: [...this.state.redOperatives, response.data]\n                        })\n                    }\n\n                    this.setState({\n                        playersdata: [...this.state.playersdata, response.data],\n                    })\n                })\n            }\n        })\n        \n        this.setState({\n            room_key: this.props.location.state.room_key,\n            roomid: this.props.location.state.roomid,\n            nickname: this.props.location.state.nickname,\n            team: this.props.location.state.team,\n            task: this.props.location.state.task,\n            gameid: this.props.location.state.gameid,\n            gameData: this.props.location.state.gameData,\n            gameWords: this.props.location.state.gameWords,\n            playerid: this.props.location.state.playerid,\n            redteamid: this.props.location.state.redteamid,\n            blueteamid: this.props.location.state.blueteamid,\n        })\n\n        this.updateGameWords(this.props.location.state.gameid)\n        this.connectTurns()\n\n        await axios.get(`http://127.0.0.1:8000/codenames/redTeam/${this.state.redteamid}`)\n        .then(response => {\n            this.setState({\n                red_score:response.data.red_team_score\n            })\n        })\n        await axios.get(`http://127.0.0.1:8000/codenames/blueTeam/${this.state.blueteamid}`)\n        .then(response => {\n            this.setState({\n                blue_score:response.data.blue_team_score\n            })\n        })\n\n        const localRedTeamId = localStorage.getItem(this.state.redteamid);\n        const localBlueTeamId = localStorage.getItem(this.state.blueteamid);\n\n        if(localRedTeamId && localBlueTeamId) {\n            // console.log(localRedTeamId, localBlueTeamId);\n            this.setState({\n                red_score: Number(localRedTeamId),\n                blue_score: Number(localBlueTeamId)\n            })\n        }\n\n        this.connectTeamPoints();\n        this.connectPlayers(); \n\n        // ATTEMP WS FOR WIN LOSE PROMPT\n        this.connectWinLose(); \n        \n        this.connectDoubleAgent();\n\n        if(this.state.currentPlayer === null) {\n            console.log(\"trying to set initial player\")\n            this.setIntial()\n        } else {\n            console.log(\"was already set\")\n            console.log(this.state.currentPlayer)\n            console.log(this.state.currentTeam)\n            console.log(\"was already set\")\n        }\n        \n        /* Just in case of refresh */\n        let totalBlueCards = this.state.totalBlueCards\n        let totalRedCards = this.state.totalRedCards\n        let redPoints = this.state.red_score\n        let bluePoints = this.state.blue_score\n\n\n        if(redPoints === totalRedCards){\n            this.setState({\n                winningTeam: \"R\",\n                losingTeam: \"B\",\n            }) \n            let winningTeam = \"R\"\n            this.showPopUp(winningTeam)\n        }\n        else if(bluePoints === totalBlueCards){\n            this.setState({\n                winningTeam: \"B\",\n                losingTeam: \"R\",\n            })\n            let winningTeam = \"B\"\n            this.showPopUp(winningTeam)\n        }\n    }\n\n    componentDidUpdate = (prevProps, prevState) => {\n        if(this.state.wsp && this.state.wsp.readyState === 1 && this.state.loadedPlayers === false) {\n            console.log('the ready state is working', this.state.playersdata[this.state.playersdata.length-1])\n            this.socketSendPlayers(this.state.playersdata[this.state.playersdata.length-1]);\n            this.setState({\n                loadedPlayers: true\n            })\n        }\n    }\n    \n    setIntial = () => {\n\n        var player;\n        var team;\n\n        if(this.state.wantedFirst === 'B' && this.state.blueOperatives.length > 0) {\n            player = this.state.blueOperatives[this.state.bIndex].player_id\n            team = 'B'\n            var bIdx = this.state.bIndex + 1\n            this.setState({bIndex: bIdx})\n        } else if(this.state.wantedFirst === 'R') {\n            console.log(\"red team wanted first\")\n            console.log(this.state.redOperatives)\n            if(this.state.redOperatives.length === 0) {\n                player = {\n                    operative_screen_name: this.props.location.state.nickname,\n                    team: this.props.location.state.team,\n                    role: this.props.location.state.task,\n                    room: this.props.location.state.room_key,\n                    game_id: this.props.location.state.gameid,\n                    user_id: this.props.location.state.playerid\n                }\n            } else {\n                player = this.state.redOperatives[this.state.rIndex].player_id\n            }\n            team = 'R'\n            var rIdx = this.state.rIndex + 1\n            this.setState({rIndex: rIdx})\n        }\n        // this.state.ws_turn.onopen = () => {\n        //     console.log(\"line 187 -- ws open\")\n        //     this.updateRoundPlayer(team, player, this.state.rIndex, this.state.bIndex)\n        //     this.setState({\n        //         currentPlayer: player,\n        //         currentTeam: team\n        //     })\n        // }\n    }\n\n    connectTurns = () => {\n        var ws_turn = new WebSocket('ws://localhost:8000/turns/turns/' + this.state.gameid + '/');\n        let that = this; //cache the this\n        var connectInterval;\n\n        //websocket onopen event listener\n        ws_turn.onopen = () => {\n            // console.log('connect team points component');\n            this.setState({ ws_turn: ws_turn });\n\n            that.timeout = 250;\n            clearTimeout(connectInterval);\n        }\n\n        ws_turn.onclose = e => {\n            console.log(\n                `Socket is closed. Reconnect will be attempted in ${Math.min(\n                    10000 / 1000,\n                    (that.timeout + that.timeout) / 1000\n                )} second.`,\n                e.reason\n            );\n\n            that.timeout = that.timeout + that.timeout; //increment retry interval\n            connectInterval = setTimeout(this.checkTurns, Math.min(1000, that.timeout));\n        }\n\n        // websocket onerror event listener\n        ws_turn.onerror = err => {\n            console.error(\n                \"Socket encountered error: \",\n                err.message,\n                \"Closing socket\"\n            );\n\n            ws_turn.close();\n        };\n\n        ws_turn.onmessage = evt => {\n            // listen to data sent from the websocket server\n            const data = JSON.parse(evt.data)\n            console.log(data)\n            console.log(\"tryeng to print event out\")\n            console.log(evt)\n            // console.log(\"received clue!\")\n            let nextPlayingTeam = data.nextTeam\n            let nextUser= data.nextPlayer\n            this.setState({\n                currentTeam: nextPlayingTeam,\n                currentPlayer: nextUser\n            })\n            console.log(\"start printing out ws on message stuff\")\n            console.log(nextPlayingTeam)\n            console.log(nextUser)\n            console.log(this.state.currentTeam)\n            console.log(this.state.currentPlayer)\n            console.log(\"finished printing out ws on message stuff\")\n        };\n        this.setState(prevState => {\n            return {\n                ws_turn: ws_turn\n            }\n        })\n    }\n    \n    setDoubleAgent = () => {\n\n        let doubleAgent = { ...this.state.doubleAgent}; \n        doubleAgent.category = this.state.team;\n        let agentClicked = this.state.agentClicked;\n        agentClicked = true;\n        this.setState({\n            doubleAgent,\n            agentClicked\n        })\n\n        // localStorage.setItem(this.state.gameid, agentClicked)\n        \n\n        axios.put(`http://127.0.0.1:8000/codenames/games/word/${this.state.doubleAgent.word_id}`, doubleAgent)\n            .then(res => {\n                console.log(res)\n                this.updateGameWords(this.state.gameid)\n        })\n        var data = {\n            \"number\": this.state.doubleAgentIndex,\n            \"team\": this.state.team\n        }\n        this.state.doubleAgentWS.send(JSON.stringify(data)) // send to channel\n        console.log(data)\n        if(doubleAgent.category === 'R'){\n            this.setState(prevState => {\n                return {\n                    totalRedCards: prevState.totalRedCards+1,\n                }\n            })\n        }\n        else if(doubleAgent.category === 'B'){\n            this.setState(prevState => {\n                return {\n                    totalBlueCards: prevState.totalBlueCards+1,\n                }\n            })\n        }\n    }\n\n    updateGameWords = (gameid) => {\n        axios.get(`http://127.0.0.1:8000/codenames/games/${gameid}`).then(res => {\n            this.setState({ \n                gameWords: res.data.gameWords \n            })\n        \n        })\n    }\n\n    //from the card component, the words id and its corresponding team will be sent here to increase the points and change the guess to true accordingly\n    increaseTeamPoints = (team, word) => {\n        let totalBlueCards = this.state.totalBlueCards\n        let totalRedCards = this.state.totalRedCards\n        let win = this.state.winningTeam\n        let lose = this.state.losingTeam\n\n        let redPoints = this.state.red_score\n        let bluePoints = this.state.blue_score\n        if(team === 'R'){\n            let wordObj = this.state.gameWords.find(w => w.word_id === word);\n            if(wordObj.guessed === false) {\n                this.setState(prevState => {\n                    return {\n                        red_score: prevState.red_score+1,\n                    }\n                })\n                redPoints += 1\n    \n                localStorage.setItem(this.state.redteamid, JSON.stringify(redPoints));\n\n                axios.patch(`http://127.0.0.1:8000/codenames/games/word/${word}`, {guessed:true}).then(response => {\n                    console.log(response.data)\n                })\n                axios.patch(`http://127.0.0.1:8000/codenames/redTeam/${this.state.redteamid}`, {red_team_score: redPoints}).then(response => {\n                    console.log(response.data)\n                })\n            }\n            \n            this.socketSendTeamPoints(redPoints, bluePoints);\n            // this.socketSendPlayers(this.state.playersdata[this.state.playersdata.length-1]);\n        }\n        else if(team === 'B'){\n            let wordObj = this.state.gameWords.find(w => w.word_id === word);\n            if(wordObj.guessed === false) {\n                this.setState(prevState => {\n                    return {\n                        blue_score: prevState.blue_score+1,\n                    }\n                })\n                bluePoints += 1\n\n                localStorage.setItem(this.state.blueteamid, JSON.stringify(bluePoints));\n\n                axios.patch(`http://127.0.0.1:8000/codenames/games/word/${word}`, {guessed:true}).then(response => {\n                    console.log(response.data)\n                })\n                axios.patch(`http://127.0.0.1:8000/codenames/blueTeam/${this.state.blueteamid}`, {blue_team_score: bluePoints}).then(response => {\n                    console.log(response.data)\n                })\n\n\n            }\n            this.socketSendTeamPoints(redPoints, bluePoints);\n\n            if(team !== this.state.currentTeam) {\n                this.endRoundEarly()\n            }\n        }\n        // if assassin card is guessed\n        else if( team === 'A'){\n            let wordObj = this.state.gameWords.find(w => w.word_id === word);\n            // let currentTeam = this.state.currentTeam;\n            // console.log(currentTeam);\n            if(wordObj.guessed === false) {\n                // bluePoints += 1\n                this.setState({\n                    assassinGuessed: true,\n                })\n\n                if (this.state.team === 'R'){\n                    this.setState({\n                        winningTeam: \"B\",\n                        losingTeam: \"R\",\n                    }) \n                    let winningTeam = \"B\"\n                    let win = 'B'\n                    let lose = 'R'\n                    this.socketSendWinLose(win, lose)\n                    this.showPopUp(winningTeam)\n                }\n                else if(this.state.team === 'B'){\n                    this.setState({\n                        winningTeam: \"R\",\n                        losingTeam: \"B\",\n                    })\n                    let winningTeam= \"R\"\n                    let win = 'R'\n                    let lose = 'B'\n                    this.socketSendWinLose(win, lose)\n                    this.showPopUp(winningTeam)\n                }\n\n                // localStorage.setItem(this.state.blueteamid, JSON.stringify(bluePoints));\n\n                axios.patch(`http://127.0.0.1:8000/codenames/games/word/${word}`, {guessed:true}).then(response => {\n                    console.log(response.data)\n                })\n            }\n        }\n\n        if(redPoints === totalRedCards){\n            this.setState({\n                winningTeam: \"R\",\n                losingTeam: \"B\",\n            }) \n            let winningTeam = \"R\"\n            win = 'R'\n            lose = 'B'\n            \n            // ATTEMPT\n            this.socketSendWinLose(win, lose)\n            console.log('RED WIN')\n\n            this.showPopUp(winningTeam)\n\n        }\n        else if(bluePoints === totalBlueCards){\n            this.setState({\n                winningTeam: \"B\",\n                losingTeam: \"R\",\n            })\n            win = 'B'\n            lose = 'R'\n            let winningTeam= \"B\"\n            // ATTEMPT\n            this.socketSendWinLose(win, lose)\n            console.log('BLUE WIN')\n\n            this.showPopUp(winningTeam)\n\n        }\n\n    }\n\n    // ATTEMPT\n    socketSendWinLose = (winningTeam, losingTeam) => {\n        var data = {\n            \"winningTeam\": winningTeam,\n            \"losingTeam\": losingTeam\n        }\n        this.state.wswl.send(JSON.stringify(data))\n        console.log('SENT WIN LOSE TO OTHERS!!!!!!!!!')\n        \n    }\n\n\n    setTotalCards = () => {\n        let gameWords = this.props.location.state.gameWords;\n        for(let i = 0; i < gameWords.length; i++) {\n            if(gameWords[i].category === 'R') {\n                // this.setState({\n                //     doubleAgent: gameWords[i],\n                //     doubleAgentIndex: i\n                // })\n                this.setState(prevState => {\n                    return {\n                        totalRedCards: prevState.totalRedCards+1,\n                    }\n                })\n            }\n            else if(gameWords[i].category === 'B') {\n                // this.setState({\n                //     doubleAgent: gameWords[i],\n                //     doubleAgentIndex: i\n                // })\n                this.setState(prevState => {\n                    return {\n                        totalBlueCards: prevState.totalBlueCards+1,\n                    }\n                })\n            }\n        }\n        //this.showPopUp()\n    }\n\n    showPopUp = (winningTeam) => {\n        //let winningScreenIsOpen = this.state.winningScreenIsOpen\n        let team = this.props.location.state.team\n        console.log(winningTeam)\n        //console.log(winningScreenIsOpen)\n\n        //if there is a winning team\n        if(winningTeam !== \"\"){\n            this.setState({\n                winningScreenIsOpen: true\n            })//this works\n\n            if(winningTeam === \"R\"){\n                if(team === 'R'){\n                    //console.log(\"winning team is R has been called!\")\n                    //let statusMessage = 'CONGRATS! YOUR TEAM WON!'\n                    this.setState({\n                        statusMessage: 'CONGRATS! YOUR TEAM WON!'\n                    })\n                }\n                else {\n                    //console.log(\"winning team is Blue has been called!\")\n                    //let statusMessage = 'SORRY! YOUR TEAM LOST!'\n                    this.setState({\n                        statusMessage: 'SORRY! YOUR TEAM LOST!'\n                    })\n                }\n            }\n            else if (winningTeam === \"B\"){\n                //console.log(\"winning team is B has been called!\")\n                if(team === 'B'){\n                    console.log(\"winning team is Blue has been called!\")\n                    this.setState({\n                        statusMessage: 'CONGRATS! YOUR TEAM WON!'\n                    })\n                }\n                else {\n                    this.setState({\n                        statusMessage: 'SORRY! YOUR TEAM LOST!'\n                    })\n                }\n            }\n        }\n    }\n\n    socketSendTeamPoints = (red_team_points, blue_team_points) => {\n        var data = {\n            \"red_team_points\": red_team_points,\n            \"blue_team_points\": blue_team_points\n        }\n\n        this.state.wstp.send(JSON.stringify(data))\n        // console.log(data)\n    }\n\n    connectTeamPoints = () => {\n        var wstp = new WebSocket('ws://localhost:8000/teampoints/teampoints/' + this.state.gameid + '/');\n        let that = this; //cache the this\n        var connectInterval;\n\n        //websocket onopen event listener\n        wstp.onopen = () => {\n            // console.log('connect team points component');\n            this.setState({ wstp: wstp });\n\n            that.timeout = 250;\n            clearTimeout(connectInterval);\n        }\n\n        wstp.onclose = e => {\n            console.log(\n                `Socket is closed. Reconnect will be attempted in ${Math.min(\n                    10000 / 1000,\n                    (that.timeout + that.timeout) / 1000\n                )} second.`,\n                e.reason\n            );\n\n            that.timeout = that.timeout + that.timeout; //increment retry interval\n            connectInterval = setTimeout(this.checkTeamPoints, Math.min(1000, that.timeout));\n        }\n\n        // websocket onerror event listener\n        wstp.onerror = err => {\n            console.error(\n                \"Socket encountered error: \",\n                err.message,\n                \"Closing socket\"\n            );\n\n            wstp.close();\n        };\n\n        wstp.onmessage = evt => {\n            // listen to data sent from the websocket server\n            const data = JSON.parse(evt.data)\n            console.log(data)\n            // console.log(\"received clue!\")\n            let red_team_points = data.red_team_points\n            let blue_team_points = data.blue_team_points\n            this.setState(prevState => {\n                return {\n                    red_score: red_team_points,\n                    blue_score: blue_team_points\n                }\n            })\n        };\n        this.setState(prevState => {\n            return {\n                wstp: wstp\n            }\n        })\n    };\n\n    /**\n     * utilited by the @function connect to check if the connection is close, if so attempts to reconnect\n     */\n    checkTeamPoints = () => {\n        const { wstp } = this.state.wstp;\n        if (!wstp || wstp.readyState === WebSocket.CLOSED) this.connectTeamPoints(); //check if websocket instance is closed, if so call `connect` function.\n    };\n\n    checkTurns = () => {\n        const { ws_turn } = this.state.ws_turn;\n        if (!ws_turn || ws_turn.readyState === WebSocket.CLOSED) this.connectTurns(); //check if websocket instance is closed, if so call `connect` function.\n    };\n\n    sendTurns = (team, player) => {\n\n        console.log(\"sendturns\")\n        console.log(player)\n        console.log(team)\n        console.log(player)\n        console.log(\"sendturns\")\n        if(player !== null){\n            this.state.ws_turn.send(JSON.stringify({\n                'nextTeam': team,\n                'nextPlayer': player\n            }))\n        }\n\n    }\n\n    updateRoundPlayer = (team, player, redIndex, blueIndex) => {\n        this.setState({\n            currentPlayer: player,\n            currentTeam: team,\n            rIndex: redIndex,\n            bIndex: blueIndex\n        })\n        this.sendTurns(team, player)\n        // this.clueSocketSend()\n    }\n\n    endRoundEarly = () => {\n        var team;\n        var player;\n        var blueIndex = this.state.bIndex\n        var redIndex = this.state.rIndex\n\n        if(this.state.currentTeam === 'R') {\n            team = 'B'\n            console.log(\"tryig to fetch a blue player\")\n            console.log(this.state.blueOperatives.length)\n            player = this.state.blueOperatives[blueIndex]\n            blueIndex += 1\n            if(blueIndex === this.state.blueOperatives.length) {blueIndex = 0}\n\n            this.updateRoundPlayer(team, player, redIndex, blueIndex)\n\n        } else if(this.state.currentTeam === 'B') {\n            team = 'R'\n            console.log(\"tryig to fetch a red player\")\n            console.log(this.state.redOperatives.length)\n            player = this.state.redOperatives[redIndex]\n            redIndex += 1\n            if(redIndex === this.state.redOperatives.length) {redIndex = 0}\n\n            this.updateRoundPlayer(team, player, redIndex, blueIndex)\n        }\n    }\n    \n    socketSendPlayers = (player) => {\n        var data = {\n            \"new_players\": player\n        }\n        this.state.wsp.send(JSON.stringify(data))\n        \n        // console.log('this is the incoming players data', data);\n    }\n\n    connectPlayers = () => {\n        var wsp = new WebSocket('ws://localhost:8000/players/players/' + this.state.gameid + '/');\n        let that = this;\n        var connectInterval;\n\n        wsp.onopen = () => {\n            this.setState ({ wsp: wsp });\n\n            that.timeout = 250;\n            clearTimeout(connectInterval);\n        };\n\n        wsp.onclose = e => {\n            console.log(\n                `Socket is closed. Reconnect will be attempted in ${Math.min(\n                    10000 / 1000,\n                    (that.timeout + that.timeout) / 1000\n                )} second.`,\n                e.reason\n            );\n\n            that.timeout = that.timeout + that.timeout; //increment retry interval\n            connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\n        }\n\n        wsp.onerror = err => {\n            console.error(\n                \"Socket encountered error: \",\n                err.message,\n                \"Closing socket\"\n            );\n\n            wsp.close();\n        };\n\n        wsp.onmessage = evt => {\n            const data = JSON.parse(evt.data)\n            let new_players = data.new_players\n\n            if(!this.state.playersdata.includes(new_players)) {\n                let playersData = this.state.playersdata;\n                playersData.push(new_players);\n                this.setState({\n                    playersdata: playersData\n                })\n            }\n            \n            // console.log('THIS IS THE NEWEST PLAYERS ,PLEASE SHOW ', new_players)\n        };\n\n        this.setState(prevState => {\n            return {\n                wsp: wsp\n            }\n        })\n\n    };\n\n    checkPlayers = () => {\n        const { wsp } = this.state.wsp;\n        if(!wsp || wsp.readyState === WebSocket.CLOSED) this.connectPlayers();\n    }\n\n    connectClue = () => {\n        var wsClue = new WebSocket('ws://localhost:8000/cluebox/cluebox/' + this.props.gameid + '/');\n        let that = this; // cache the this\n        var connectInterval;\n\n        // websocket onopen event listener\n        wsClue.onopen = () => {\n            console.log(\"connected websocket main component\");\n            this.setState({ wsClue: wsClue });\n\n            that.timeout = 250; // reset timer to 250 on open of websocket connection \n            clearTimeout(connectInterval); // clear Interval on on open of websocket connection\n        };\n\n        // websocket onclose event listener\n        wsClue.onclose = e => {\n            console.log(\n                `Socket is closed. Reconnect will be attempted in ${Math.min(\n                    10000 / 1000,\n                    (that.timeout + that.timeout) / 1000\n                )} second.`,\n                e.reason\n            );\n\n            that.timeout = that.timeout + that.timeout; //increment retry interval\n            connectInterval = setTimeout(this.checkClueSocket, Math.min(10000, that.timeout)); //call check function after timeout\n        };\n\n        // websocket onerror event listener\n        wsClue.onerror = err => {\n            console.error(\n                \"Socket encountered error: \",\n                err.message,\n                \"Closing socket\"\n            );\n\n            wsClue.close();\n        };\n\n        wsClue.onmessage = evt => {\n            // listen to data sent from the websocket server\n            const data = JSON.parse(evt.data)\n            console.log(data)\n            console.log(\"received clue!\")\n            let count = data.count\n            let clue = data.clue\n            this.setState(prevState => {\n                return {\n                    spymasterClueCount: count,\n                    spymasterClueWord: clue\n                }\n            })\n        };\n        this.setState(prevState => {\n            return {\n                wsClue: wsClue\n            }\n        })\n    };\n\n    checkClueSocket = () => {\n        const { wsClue } = this.state.wsClue;\n        if (!wsClue || wsClue.readyState === WebSocket.CLOSED) this.connectClue(); //check if websocket instance is closed, if so call `connect` function.\n    };\n\n    clueSocketSend = () => {\n        var data = {\n            \"count\": 0,\n            \"clue\": \"Waiting...\"\n        }\n        this.state.wsClue.send(JSON.stringify(data)) // send to channel\n        console.log(data)\n    }\n\n\n    // ATTEMPT WS FOR WIN/LOSE PROMPT \n    connectWinLose = () => {\n        var wswl = new WebSocket('ws://localhost:8000/winlose/winlose/' + this.state.gameid + '/');\n        let that = this;\n        var connectInterval;\n        wswl.onopen = () => {\n            this.setState({ wswl: wswl})\n            that.timeout = 250\n            clearTimeout(connectInterval)\n        }\n\n        wswl.onclose = e => {\n            console.log(\n                `Socket is closed. Reconnect will be attempted in ${Math.min(\n                    10000 / 1000,\n                    (that.timeout + that.timeout) / 1000\n                )} second.`,\n                e.reason\n            )\n            \n            // increment retry interval\n            that.timeout = that.timeout + that.timeout \n            connectInterval = setTimeout(this.checkWinLose, Math.min(1000, that.timeout))\n        }\n\n        wswl.onerror = err => {\n            console.error(\n                \"Socket encountered error: \",\n                err.message,\n                \"Closing socket\"\n            )\n\n            wswl.close()\n        }\n        wswl.onmessage = evt => {\n            const data = JSON.parse(evt.data)\n            console.log(data)\n            let winningTeam = data.winningTeam\n            let losingTeam = data.losingTeam\n            this.setState(prevState => {\n                return{\n                    winningTeam: winningTeam,\n                    losingTeam: losingTeam,\n                    winningScreenIsOpen: true,\n                    // statusMessage: statusMessage,\n                }\n            })\n        }\n        this.setState(prevState => {\n            return{\n                wswl: wswl\n            }\n        })\n    }\n\n    checkWinLose = () => {\n        const {wswl} = this.state.wswl\n        if(!wswl || wswl.readyState === WebSocket.CLOSED) this.connectWinLose();\n    }\n\n    connectDoubleAgent = () => {\n        var ws = new WebSocket('ws://localhost:8000/doubleagent/doubleagent/' + this.state.gameid + '/');\n        let that = this; // cache the this\n        var connectInterval;\n\n        // websocket onopen event listener\n        ws.onopen = () => {\n            console.log(\"connected websocket main component\");\n            this.setState({ doubleAgentWS: ws });\n\n            that.timeout = 250; // reset timer to 250 on open of websocket connection \n            clearTimeout(connectInterval); // clear Interval on on open of websocket connection\n        };\n\n        // websocket onclose event listener\n        ws.onclose = e => {\n            console.log(\n                `Socket is closed. Reconnect will be attempted in ${Math.min(\n                    10000 / 1000,\n                    (that.timeout + that.timeout) / 1000\n                )} second.`,\n                e.reason\n            );\n\n            that.timeout = that.timeout + that.timeout; //increment retry interval\n            connectInterval = setTimeout(this.checkDA, Math.min(10000, that.timeout)); //call check function after timeout\n        };\n\n        // websocket onerror event listener\n        ws.onerror = err => {\n            console.error(\n                \"Socket encountered error: \",\n                err.message,\n                \"Closing socket\"\n            );\n\n            ws.close();\n        };\n        ws.onmessage = evt => {\n            // listen to data sent from the websocket server\n            const data = JSON.parse(evt.data)\n            console.log(data)\n            console.log(\"received clue!\")\n            let team = data.team\n            if (this.state.agentClicked === false && \n                this.state.gameWords[this.state.doubleAgentIndex].category === 'D') {\n                let doubleAgent = { ...this.state.doubleAgent}; \n                doubleAgent.category = team;\n                let gameWords = this.state.gameWords;\n                gameWords[this.state.doubleAgentIndex] = doubleAgent;\n                this.setState(prevState => {\n                    return {\n                        // Add\n                        agentClicked: true, // Make it so the I WANT FIRST goes away\n                        doubleAgent: doubleAgent,\n                        gameWords: gameWords\n                    }\n                })\n                // Update number of cards I guess\n                if(doubleAgent.category === 'R'){\n                    this.setState(prevState => {\n                        return {\n                            totalRedCards: prevState.totalRedCards+1,\n                        }\n                    })\n                }\n                else if(doubleAgent.category === 'B'){\n                    this.setState(prevState => {\n                        return {\n                            totalBlueCards: prevState.totalBlueCards+1,\n                        }\n                    })\n                }\n            }\n            \n        };\n        this.setState(prevState => {\n            return {\n                doubleAgentWS: ws\n            }\n        })\n    };\n\n    /**\n     * utilited by the @function connect to check if the connection is close, if so attempts to reconnect\n     */\n     checkDA = () => {\n        const { ws } = this.state.doubleAgentWS;\n        if (!ws || ws.readyState === WebSocket.CLOSED) this.connectDoubleAgent(); //check if websocket instance is closed, if so call `connect` function.\n    };\n\n\n    render() {\n        \n        return(\n            <div>\n                {\n\n                    this.state.task === 'S' ?   \n                    \n                    \n                    <SpymastersGame \n                        doubleAgent ={this.state.doubleAgent}\n                        doubleAgentIndex = {this.state.doubleAgentIndex}\n                        agentClicked = {this.state.agentClicked}\n                        setDoubleAgent = {this.setDoubleAgent}\n                        room_key = {this.state.room_key}\n                        gameWords = {this.state.gameWords}\n                        increaseTeamPoints = {this.increaseTeamPoints}\n                        redPoints = {this.state.red_score}\n                        bluePoints = {this.state.blue_score}\n                        playersdata = {this.state.playersdata}\n                        gameid = {this.state.gameid}\n                        winningScreenIsOpen = {this.state.winningScreenIsOpen}\n                        statusMessage= {this.state.statusMessage}\n                        team = {this.state.team}\n                        winningTeam = {this.state.winningTeam}\n                        showPopUp = {this.showPopUp}\n                        myTeam = {this.state.team}\n                        currentTeam = {this.state.currentTeam}\n                        currentPlayer = {this.state.currentPlayer}\n                        />\n                        : \n                        \n                        <OperativesGame \n                        doubleAgent ={this.state.doubleAgent}\n                        doubleAgentIndex = {this.state.doubleAgentIndex}\n                        agentClicked = {this.state.agentClicked}\n                        room_key = {this.state.room_key}\n                        gameWords = {this.state.gameWords}\n                        gameid = {this.state.gameid}\n                        increaseTeamPoints = {this.increaseTeamPoints}\n                        redPoints = {this.state.red_score}\n                        bluePoints = {this.state.blue_score}\n                        playersdata = {this.state.playersdata}\n                        winningScreenIsOpen = {this.state.winningScreenIsOpen}\n                        statusMessage= {this.state.statusMessage}\n                        team = {this.state.team}\n                        winningTeam = {this.state.winningTeam}\n                        showPopUp = {this.showPopUp}\n                        currentTeam = {this.state.currentTeam}\n                        currentPlayer = {this.state.currentPlayer}\n                        updateRoundPlayer = {this.updateRoundPlayer}\n                        playerid = {this.state.playerid}\n                        playerTeam = {this.state.team}\n                        bIndex = {this.state.bIndex}\n                        rIndex = {this.state.rIndex}\n                    />\n                }\n            </div>\n        )\n    }\n}\n\nexport default Game"]},"metadata":{},"sourceType":"module"}