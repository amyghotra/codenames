{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/micha/Codenames/codenames/codenames/src/Components/GamePage/Operatives/OperativesGame.js\";\nimport React, { Component } from 'react';\nimport Row from \"../Row/Row\";\nimport './OperativesGame.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass OperativesGame extends Component {\n  // Still not 100% sure whether to change this to a class, or to just useState\n  constructor() {\n    super();\n\n    this.componentDidMount = () => {// Doesn't fire?\n    };\n\n    this.connect = () => {\n      var ws = new WebSocket('ws://localhost:8000/cluebox/cluebox/' + this.props.gameid + '/');\n      let that = this; // cache the this\n\n      var connectInterval; // websocket onopen event listener\n\n      ws.onopen = () => {\n        console.log(\"connected websocket main component\");\n        this.setState({\n          ws: ws\n        });\n        that.timeout = 250; // reset timer to 250 on open of websocket connection \n\n        clearTimeout(connectInterval); // clear Interval on on open of websocket connection\n      }; // websocket onclose event listener\n\n\n      ws.onclose = e => {\n        console.log(`Socket is closed. Reconnect will be attempted in ${Math.min(10000 / 1000, (that.timeout + that.timeout) / 1000)} second.`, e.reason);\n        that.timeout = that.timeout + that.timeout; //increment retry interval\n\n        connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\n      }; // websocket onerror event listener\n\n\n      ws.onerror = err => {\n        console.error(\"Socket encountered error: \", err.message, \"Closing socket\");\n        ws.close();\n      };\n\n      ws.onmessage = evt => {\n        // listen to data sent from the websocket server\n        const data = JSON.parse(evt.data);\n        console.log(data);\n        console.log(\"received clue!\");\n        let count = data.count;\n        let clue = data.clue;\n        this.setState(prevState => {\n          return {\n            spymasterClueCount: count,\n            spymasterClueWord: clue\n          };\n        });\n      };\n\n      this.setState(prevState => {\n        return {\n          ws: ws\n        };\n      });\n    };\n\n    this.componentDidUpdate = event => {\n      if (event.gameWords !== this.props.gameWords) {\n        this.setState(prevState => {\n          return {\n            gameWords: this.props.gameWords,\n            room_key: this.props.room_key,\n            gameid: this.props.gameid,\n            redteamid: this.props.redteamid,\n            blueteamid: this.props.blueteamid\n          };\n        });\n\n        if (this.state.ws === null) {\n          this.connect();\n        }\n      }\n\n      if (event.playersdata !== this.props.playersdata) {\n        this.setState(prevState => {\n          return {\n            playersdata: this.props.playersdata\n          };\n        });\n      }\n    };\n\n    this.componentWillReceiveProps = players => {\n      this.setState({\n        playersdata: players.playersdata //renderPlayers: true,\n\n      }); //console.log(players)\n      // console.log(\"Checking how many times this will call the update players!\")\n\n      this.updatePlayers(players.playersdata);\n    };\n\n    this.updatePlayers = players => {\n      //console.log('Update Players Called!');\n      let room_key = this.props.room_key; //let players = this.props.playersdata;\n      // console.log(\"Players data: \", players)\n      //if(this.state.renderPlayers === true){\n\n      for (let i = 0; i < players.length; i++) {\n        //console.log(\"Current Player: \", players[i])\n        if (players[i].room === room_key) {\n          if (players[i].role === \"S\") {\n            if (players[i].team === \"R\") {\n              //console.log(\"It went here [Red Spy]: \", players[i])\n              let redSpymasters = this.state.redSpymasters;\n              redSpymasters.push(players[i]);\n              this.setState({\n                redSpymasters\n              });\n            } else if (players[i].team === \"B\") {\n              //console.log(\"It went here [Blue Spy]: \", players[i])\n              let blueSpymasters = this.state.blueSpymasters;\n              blueSpymasters.push(players[i]);\n              this.setState({\n                blueSpymasters\n              });\n            }\n          } else if (players[i].role === \"O\") {\n            if (players[i].team === \"R\") {\n              //console.log(\"It went here [Red Op]: \", players[i])\n              let redOperatives = this.state.redOperatives;\n              redOperatives.push(players[i]);\n              this.setState({\n                redOperatives\n              });\n            } else if (players[i].team === \"B\") {\n              //console.log(\"It went here [Blue Op]: \", players[i])\n              let blueOperatives = this.state.blueOperatives;\n              blueOperatives.push(players[i]);\n              this.setState({\n                blueOperatives\n              });\n            }\n          }\n        }\n      } //}\n\n\n      this.deleteRepeated();\n    };\n\n    this.deleteRepeated = () => {\n      let redOperatives = this.state.redOperatives;\n      let redSpymasters = this.state.redSpymasters;\n      let blueOperatives = this.state.blueOperatives;\n      let blueSpymasters = this.state.blueSpymasters;\n      let showredOperatives = this.state.showredOperatives;\n      let showredSpymasters = this.state.showredSpymasters;\n      let showblueOperatives = this.state.showblueOperatives;\n      let showblueSpymasters = this.state.showblueSpymasters; //Red Operatives\n\n      for (let i = 0; i < redOperatives.length; i++) {\n        let repeated = false;\n\n        for (let j = 0; j < showredOperatives.length; j++) {\n          if (redOperatives[i].player_id === showredOperatives[j].player_id) {\n            repeated = true;\n          }\n        }\n\n        if (repeated === false) {\n          showredOperatives.push(redOperatives[i]);\n          this.setState({\n            showredOperatives\n          });\n        }\n      } //end of for loop\n      //Red Spymasters\n\n\n      for (let i = 0; i < redSpymasters.length; i++) {\n        let repeated = false;\n\n        for (let j = 0; j < showredSpymasters.length; j++) {\n          if (redSpymasters[i].player_id === showredSpymasters[j].player_id) {\n            repeated = true;\n          }\n        }\n\n        if (repeated === false) {\n          showredSpymasters.push(redSpymasters[i]);\n          this.setState({\n            showredSpymasters\n          });\n        }\n      } //Blue Operative\n\n\n      for (let i = 0; i < blueOperatives.length; i++) {\n        let repeated = false;\n\n        for (let j = 0; j < showblueOperatives.length; j++) {\n          if (blueOperatives[i].player_id === showblueOperatives[j].player_id) {\n            repeated = true;\n          }\n        }\n\n        if (repeated === false) {\n          showblueOperatives.push(blueOperatives[i]);\n          this.setState({\n            showblueOperatives\n          });\n        }\n      } //Blue Spymasters\n\n\n      for (let i = 0; i < blueSpymasters.length; i++) {\n        let repeated = false;\n\n        for (let j = 0; j < showblueSpymasters.length; j++) {\n          if (blueSpymasters[i].player_id === showblueSpymasters[j].player_id) {\n            repeated = true;\n          }\n        }\n\n        if (repeated === false) {\n          showblueSpymasters.push(blueSpymasters[i]);\n          this.setState({\n            showblueSpymasters\n          });\n        }\n      }\n    };\n\n    this.handleEndTurn = () => {\n      // this.setState = {\n      //     turn: !this.state.turn\n      // }\n      // console.log((this.state.turn) ? \"Blue turn\" : \"Red turn\")\n      console.log(\"handleendturn function\");\n\n      if (this.props.currentTeam === 'R' && this.props.wsturns.readyState === 1) {\n        this.props.updateRoundPlayer('B');\n      } else if (this.props.currentTeam === 'B' && this.props.wsturns.readyState === 1) {\n        this.props.updateRoundPlayer('R');\n      }\n    };\n\n    this.incrementClueCount = () => {\n      this.setState(prevState => {\n        // Update with inline function\n        return {\n          spymasterClueCount: prevState.spymasterClueCount + 1\n        };\n      });\n    };\n\n    this.decrementClueCount = () => {\n      this.setState(prevState => {\n        return {\n          spymasterClueCount: prevState.spymasterClueCount - 1\n        };\n      });\n    };\n\n    this.state = {\n      room_key: '',\n      task: 'O',\n      gameWords: '',\n      redScore: 0,\n      blueScore: 0,\n      turn: true,\n      // true = blue turn & false = red turn \n      redteamid: '',\n      blueteamid: '',\n      //Helper Variables\n      redOperatives: [],\n      redSpymasters: [],\n      blueOperatives: [],\n      blueSpymasters: [],\n      renderPlayers: false,\n      //Show Variables\n      showredOperatives: [],\n      showredSpymasters: [],\n      showblueOperatives: [],\n      showblueSpymasters: [],\n      //websocket\n      ws: null,\n      spymasterClueCount: '0',\n      spymasterClueWord: 'WAITING...'\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.state.showredOperatives.length >= 1 && this.state.showblueOperatives.length >= 1 && this.state.showredSpymasters.length === 1 && this.state.showblueSpymasters.length === 1 && (this.props.agentClicked === true || this.props.gameWords[this.props.doubleAgentIndex].category !== 'D') ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game\",\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n          children: \"OPERATORS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n          className: \"gameCode\",\n          children: [\" Game Code: \", this.props.room_key, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container-fluid\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-12\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"row\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-md-4\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"gameScores\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"redTeam\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n                          className: \"teamTitle\",\n                          children: \"Red Team\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 343,\n                          columnNumber: 57\n                        }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                          className: \"teamScore\",\n                          children: this.props.redPoints\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 344,\n                          columnNumber: 57\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 342,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 346,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 347,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                        className: \"teamContent\",\n                        children: \" Spymasters:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 348,\n                        columnNumber: 53\n                      }, this), this.state.showredSpymasters.map((player, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                        className: \"bulletContent\",\n                        children: player.operative_screen_name\n                      }, index, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 350,\n                        columnNumber: 57\n                      }, this)), this.showRedSpymasters, /*#__PURE__*/_jsxDEV(\"h6\", {\n                        className: \"teamContent\",\n                        children: \" Operatives:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 354,\n                        columnNumber: 53\n                      }, this), this.state.showredOperatives.map((player, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                        className: \"bulletContent\",\n                        children: player.operative_screen_name\n                      }, index, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 356,\n                        columnNumber: 57\n                      }, this))]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 341,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 359,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"blueTeam\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n                          className: \"teamTitle\",\n                          children: \"Blue Team\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 362,\n                          columnNumber: 57\n                        }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                          className: \"teamScore\",\n                          children: this.props.bluePoints\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 363,\n                          columnNumber: 57\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 361,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 365,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 366,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                        className: \"teamContent\",\n                        children: \" Spymasters:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 367,\n                        columnNumber: 53\n                      }, this), this.state.showblueSpymasters.map((player, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                        className: \"bulletContent\",\n                        children: player.operative_screen_name\n                      }, index, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 369,\n                        columnNumber: 57\n                      }, this)), /*#__PURE__*/_jsxDEV(\"h6\", {\n                        className: \"teamContent\",\n                        children: \" Operatives:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 371,\n                        columnNumber: 53\n                      }, this), this.state.showblueOperatives.map((player, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                        className: \"bulletContent\",\n                        children: player.operative_screen_name\n                      }, index, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 373,\n                        columnNumber: 57\n                      }, this))]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 360,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 340,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 339,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-md-7\",\n                  children: [\"  \", /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"row\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"col-md-12\",\n                      children: /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"clueBody\",\n                        children: /*#__PURE__*/_jsxDEV(\"h5\", {\n                          className: \"clue\",\n                          children: [\"Clue:\", ' ' + this.state.spymasterClueCount, \" Card(s)\", ' ' + this.state.spymasterClueWord]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 382,\n                          columnNumber: 53\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 381,\n                        columnNumber: 53\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 380,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 379,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Row, {\n                    task: this.state.task,\n                    rowWords: [this.state.gameWords[0], this.state.gameWords[1], this.state.gameWords[2], this.state.gameWords[3], this.state.gameWords[4]],\n                    cardNumbers: [0, 1, 2, 3, 4] // Add in card numbers to distinguish\n                    ,\n                    gameid: this.state.gameid // Add in gameid for card websocket\n                    ,\n                    increaseTeamPoints: this.props.increaseTeamPoints\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 388,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Row, {\n                    task: this.state.task,\n                    rowWords: [this.state.gameWords[5], this.state.gameWords[6], this.state.gameWords[7], this.state.gameWords[8], this.state.gameWords[9]],\n                    cardNumbers: [5, 6, 7, 8, 9],\n                    gameid: this.state.gameid // Add in gameid for card websocket\n                    ,\n                    increaseTeamPoints: this.props.increaseTeamPoints\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 397,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(Row, {\n                    task: this.state.task,\n                    rowWords: [this.state.gameWords[10], this.state.gameWords[11], this.state.gameWords[12], this.state.gameWords[13], this.state.gameWords[14]],\n                    cardNumbers: [10, 11, 12, 13, 14],\n                    gameid: this.state.gameid // Add in gameid for card websocket\n                    ,\n                    increaseTeamPoints: this.props.increaseTeamPoints\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 406,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(Row, {\n                    task: this.state.task,\n                    rowWords: [this.state.gameWords[15], this.state.gameWords[16], this.state.gameWords[17], this.state.gameWords[18], this.state.gameWords[19]],\n                    cardNumbers: [15, 16, 17, 18, 19],\n                    gameid: this.state.gameid // Add in gameid for card websocket\n                    ,\n                    increaseTeamPoints: this.props.increaseTeamPoints\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 415,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(Row, {\n                    task: this.state.task,\n                    rowWords: [this.state.gameWords[20], this.state.gameWords[21], this.state.gameWords[22], this.state.gameWords[23], this.state.gameWords[24]],\n                    cardNumbers: [20, 21, 22, 23, 24],\n                    gameid: this.state.gameid // Add in gameid for card websocket\n                    ,\n                    increaseTeamPoints: this.props.increaseTeamPoints\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 424,\n                    columnNumber: 49\n                  }, this), !this.props.winningScreenIsOpen ? /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"row\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"col-md-12\",\n                      children: /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"d-flex justify-content-end\",\n                        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                          className: \"btn\",\n                          onClick: this.handleEndTurn,\n                          children: \"End Turn\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 437,\n                          columnNumber: 57\n                        }, this), \" \"]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 436,\n                        columnNumber: 53\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 435,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 434,\n                    columnNumber: 45\n                  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"popUp\",\n                    children: this.props.team === this.props.winningTeam ? /*#__PURE__*/_jsxDEV(\"h4\", {\n                      className: \"Status\",\n                      children: \"CONGRATS! YOUR TEAM WON!\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 444,\n                      columnNumber: 49\n                    }, this) : /*#__PURE__*/_jsxDEV(\"h4\", {\n                      className: \"Status\",\n                      children: \"SORRY! YOUR TEAM LOST!\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 446,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 442,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 378,\n                  columnNumber: 41\n                }, this), \"  \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 338,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Waiting for players!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default OperativesGame;","map":{"version":3,"sources":["/mnt/c/Users/micha/Codenames/codenames/codenames/src/Components/GamePage/Operatives/OperativesGame.js"],"names":["React","Component","Row","OperativesGame","constructor","componentDidMount","connect","ws","WebSocket","props","gameid","that","connectInterval","onopen","console","log","setState","timeout","clearTimeout","onclose","e","Math","min","reason","setTimeout","check","onerror","err","error","message","close","onmessage","evt","data","JSON","parse","count","clue","prevState","spymasterClueCount","spymasterClueWord","componentDidUpdate","event","gameWords","room_key","redteamid","blueteamid","state","playersdata","componentWillReceiveProps","players","updatePlayers","i","length","room","role","team","redSpymasters","push","blueSpymasters","redOperatives","blueOperatives","deleteRepeated","showredOperatives","showredSpymasters","showblueOperatives","showblueSpymasters","repeated","j","player_id","handleEndTurn","currentTeam","wsturns","readyState","updateRoundPlayer","incrementClueCount","decrementClueCount","task","redScore","blueScore","turn","renderPlayers","render","agentClicked","doubleAgentIndex","category","redPoints","map","player","index","operative_screen_name","showRedSpymasters","bluePoints","increaseTeamPoints","winningScreenIsOpen","winningTeam"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Row from \"../Row/Row\"\nimport './OperativesGame.css'\n\nclass OperativesGame extends Component { // Still not 100% sure whether to change this to a class, or to just useState\n    constructor() {\n        super()\n        this.state = {\n            room_key: '',\n            task: 'O',\n            gameWords: '',\n            redScore: 0,\n            blueScore: 0,\n            turn: true, // true = blue turn & false = red turn \n\n            redteamid: '',\n            blueteamid: '',\n\n            //Helper Variables\n            redOperatives: [],\n            redSpymasters: [],\n            blueOperatives: [],\n            blueSpymasters: [],\n            renderPlayers: false,\n\n            //Show Variables\n            showredOperatives: [],\n            showredSpymasters: [],\n            showblueOperatives: [],\n            showblueSpymasters: [],\n\n            //websocket\n            ws: null,\n            spymasterClueCount: '0',\n            spymasterClueWord: 'WAITING...'\n\n        }\n\n    }\n    componentDidMount = () => { // Doesn't fire?\n    } // Don't add this.connect()\n\n    /**\n     * @function connect\n     * This function establishes the connect with the websocket and also ensures \n     * constant reconnection if connection closes\n     */\n     connect = () => {\n        var ws = new WebSocket('ws://localhost:8000/cluebox/cluebox/' + this.props.gameid + '/');\n        let that = this; // cache the this\n        var connectInterval;\n\n        // websocket onopen event listener\n        ws.onopen = () => {\n            console.log(\"connected websocket main component\");\n            this.setState({ ws: ws });\n\n            that.timeout = 250; // reset timer to 250 on open of websocket connection \n            clearTimeout(connectInterval); // clear Interval on on open of websocket connection\n        };\n\n        // websocket onclose event listener\n        ws.onclose = e => {\n            console.log(\n                `Socket is closed. Reconnect will be attempted in ${Math.min(\n                    10000 / 1000,\n                    (that.timeout + that.timeout) / 1000\n                )} second.`,\n                e.reason\n            );\n\n            that.timeout = that.timeout + that.timeout; //increment retry interval\n            connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\n        };\n\n        // websocket onerror event listener\n        ws.onerror = err => {\n            console.error(\n                \"Socket encountered error: \",\n                err.message,\n                \"Closing socket\"\n            );\n\n            ws.close();\n        };\n        ws.onmessage = evt => {\n            // listen to data sent from the websocket server\n            const data = JSON.parse(evt.data)\n            console.log(data)\n            console.log(\"received clue!\")\n            let count = data.count\n            let clue = data.clue\n            this.setState(prevState => {\n                return {\n                    spymasterClueCount: count,\n                    spymasterClueWord: clue\n                }\n            })\n        };\n        this.setState(prevState => {\n            return {\n                ws: ws\n            }\n        })\n    };\n\n    componentDidUpdate = (event) => {\n\n        if (event.gameWords !== this.props.gameWords) {\n            this.setState(prevState => {\n                return {\n                    gameWords: this.props.gameWords,\n                    room_key: this.props.room_key,\n                    gameid: this.props.gameid,\n                    redteamid: this.props.redteamid,\n                    blueteamid: this.props.blueteamid\n                }\n            })\n            if (this.state.ws === null) {\n                this.connect();\n            }\n        }\n\n        if (event.playersdata !== this.props.playersdata) {\n            this.setState(prevState => {\n                return {\n                    playersdata: this.props.playersdata\n                }\n            })\n        }\n    }\n\n    /*This one will call updatePlayers twice therefore adds it twice but will show normal when refreshed. \n        =>Fixed with the deleteRepeated() function    \n    */\n    componentWillReceiveProps = (players) => {\n        this.setState({\n            playersdata: players.playersdata,\n            //renderPlayers: true,\n        })\n        //console.log(players)\n\n        // console.log(\"Checking how many times this will call the update players!\")\n        this.updatePlayers(players.playersdata)\n    }\n\n    /*Issues: Being called twice so it adds double the amount until you refresh the page.\n        =>Fixed with the deleteRepeated() function    \n    */\n    updatePlayers = (players) => {\n        //console.log('Update Players Called!');\n        let room_key = this.props.room_key;\n        //let players = this.props.playersdata;\n        // console.log(\"Players data: \", players)\n        //if(this.state.renderPlayers === true){\n\n        for (let i = 0; i < players.length; i++) {\n            //console.log(\"Current Player: \", players[i])\n            if (players[i].room === room_key) {\n                if (players[i].role === \"S\") {\n                    if (players[i].team === \"R\") {\n                        //console.log(\"It went here [Red Spy]: \", players[i])\n                        let redSpymasters = this.state.redSpymasters\n                        redSpymasters.push(players[i])\n                        this.setState({\n                            redSpymasters,\n                        })\n\n                    }\n                    else if (players[i].team === \"B\") {\n                        //console.log(\"It went here [Blue Spy]: \", players[i])\n                        let blueSpymasters = this.state.blueSpymasters\n                        blueSpymasters.push(players[i])\n                        this.setState({\n                            blueSpymasters\n                        })\n\n                    }\n                }\n                else if (players[i].role === \"O\") {\n                    if (players[i].team === \"R\") {\n                        //console.log(\"It went here [Red Op]: \", players[i])\n                        let redOperatives = this.state.redOperatives\n                        redOperatives.push(players[i])\n                        this.setState({\n                            redOperatives\n                        })\n\n                    }\n                    else if (players[i].team === \"B\") {\n                        //console.log(\"It went here [Blue Op]: \", players[i])\n                        let blueOperatives = this.state.blueOperatives\n                        blueOperatives.push(players[i])\n                        this.setState({\n                            blueOperatives\n                        })\n\n                    }\n\n                }\n\n            }\n        }\n        //}\n\n        this.deleteRepeated()\n    }\n\n    //This fixes the issue of having repeated players on intial load. \n    deleteRepeated = () => {\n        let redOperatives = this.state.redOperatives\n        let redSpymasters = this.state.redSpymasters\n        let blueOperatives = this.state.blueOperatives\n        let blueSpymasters = this.state.blueSpymasters\n        let showredOperatives = this.state.showredOperatives\n        let showredSpymasters = this.state.showredSpymasters\n        let showblueOperatives = this.state.showblueOperatives\n        let showblueSpymasters = this.state.showblueSpymasters\n\n        //Red Operatives\n        for (let i = 0; i < redOperatives.length; i++) {\n            let repeated = false;\n            for (let j = 0; j < showredOperatives.length; j++) {\n                if (redOperatives[i].player_id === showredOperatives[j].player_id) {\n                    repeated = true\n                }\n            }\n            if (repeated === false) {\n                showredOperatives.push(redOperatives[i])\n                this.setState({\n                    showredOperatives\n                })\n            }\n        }//end of for loop\n\n        //Red Spymasters\n        for (let i = 0; i < redSpymasters.length; i++) {\n            let repeated = false;\n            for (let j = 0; j < showredSpymasters.length; j++) {\n                if (redSpymasters[i].player_id === showredSpymasters[j].player_id) {\n\n                    repeated = true\n                }\n            }\n            if (repeated === false) {\n                showredSpymasters.push(redSpymasters[i])\n                this.setState({\n                    showredSpymasters\n                })\n            }\n        }\n\n        //Blue Operative\n        for (let i = 0; i < blueOperatives.length; i++) {\n            let repeated = false;\n            for (let j = 0; j < showblueOperatives.length; j++) {\n                if (blueOperatives[i].player_id === showblueOperatives[j].player_id) {\n                    repeated = true\n                }\n            }\n            if (repeated === false) {\n\n                showblueOperatives.push(blueOperatives[i])\n                this.setState({\n                    showblueOperatives\n                })\n            }\n        }\n\n        //Blue Spymasters\n        for (let i = 0; i < blueSpymasters.length; i++) {\n            let repeated = false;\n            for (let j = 0; j < showblueSpymasters.length; j++) {\n                if (blueSpymasters[i].player_id === showblueSpymasters[j].player_id) {\n                    repeated = true\n                }\n            }\n            if (repeated === false) {\n                showblueSpymasters.push(blueSpymasters[i])\n                this.setState({\n                    showblueSpymasters\n                })\n            }\n        }\n\n    }\n\n\n    // For handling the players' submitting their guesses / word picks\n    handleEndTurn = () => {\n        // this.setState = {\n        //     turn: !this.state.turn\n        // }\n        // console.log((this.state.turn) ? \"Blue turn\" : \"Red turn\")\n\n        console.log(\"handleendturn function\")\n\n        if(this.props.currentTeam === 'R' && this.props.wsturns.readyState === 1) {\n\n            this.props.updateRoundPlayer('B')\n            \n        } else if(this.props.currentTeam === 'B' && this.props.wsturns.readyState === 1) {\n\n            this.props.updateRoundPlayer('R')\n\n        }\n    }\n\n    incrementClueCount = () => {\n        this.setState(prevState => { // Update with inline function\n            return {\n                spymasterClueCount: prevState.spymasterClueCount + 1\n            }\n        })\n    }\n    decrementClueCount = () => {\n        this.setState(prevState => {\n            return {\n                spymasterClueCount: prevState.spymasterClueCount - 1\n            }\n        })\n    }\n\n    \n    render() {\n        return (\n            <div>\n                {(this.state.showredOperatives.length >= 1 && this.state.showblueOperatives.length >=1 && \n                  this.state.showredSpymasters.length === 1 && this.state.showblueSpymasters.length === 1) && \n                  (this.props.agentClicked === true || this.props.gameWords[this.props.doubleAgentIndex].category !== 'D') ?\n                <div className=\"game\">\n                        <br />\n                        <h6>OPERATORS</h6>\n                        <h6 className=\"gameCode\"> Game Code: {this.props.room_key} </h6>\n                        <div className=\"container-fluid\">\n                            <div className=\"row\">\n                                <div className=\"col-md-12\">\n                                    <div className=\"row\">\n                                        <div className=\"col-md-4\">\n                                            <div className=\"gameScores\">\n                                                <div className=\"redTeam\">\n                                                    <div>\n                                                        <h6 className=\"teamTitle\">Red Team</h6>\n                                                        <h6 className=\"teamScore\">{this.props.redPoints}</h6>\n                                                    </div>\n                                                    <br />\n                                                    <br />\n                                                    <h6 className=\"teamContent\"> Spymasters:</h6>\n                                                    {this.state.showredSpymasters.map((player, index) => (\n                                                        <li className=\"bulletContent\" key={index}>{player.operative_screen_name}</li>\n                                                    ))}\n                                                    {this.showRedSpymasters}\n        \n                                                    <h6 className=\"teamContent\"> Operatives:</h6>\n                                                    {this.state.showredOperatives.map((player, index) => (\n                                                        <li className=\"bulletContent\" key={index}>{player.operative_screen_name}</li>\n                                                    ))}\n                                                </div>\n                                                <br />\n                                                <div className=\"blueTeam\">\n                                                    <div>\n                                                        <h6 className=\"teamTitle\">Blue Team</h6>\n                                                        <h6 className=\"teamScore\">{this.props.bluePoints}</h6>\n                                                    </div>\n                                                    <br />\n                                                    <br />\n                                                    <h6 className=\"teamContent\"> Spymasters:</h6>\n                                                    {this.state.showblueSpymasters.map((player, index) => (\n                                                        <li className=\"bulletContent\" key={index}>{player.operative_screen_name}</li>\n                                                    ))}\n                                                    <h6 className=\"teamContent\"> Operatives:</h6>\n                                                    {this.state.showblueOperatives.map((player, index) => (\n                                                        <li className=\"bulletContent\" key={index}>{player.operative_screen_name}</li>\n                                                    ))}\n                                                </div>\n                                            </div>\n                                        </div>\n                                        <div className=\"col-md-7\">  {/* Changed back to div from a form */}\n                                            <div className=\"row\">\n                                                <div className=\"col-md-12\">\n                                                    <div className=\"clueBody\">\n                                                    <h5 className=\"clue\">Clue: \n                                                        {' ' + this.state.spymasterClueCount} Card(s)\n                                                        {' ' + this.state.spymasterClueWord}</h5>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <Row task={this.state.task}\n                                                    rowWords={[this.state.gameWords[0],\n                                                    this.state.gameWords[1],\n                                                    this.state.gameWords[2],\n                                                    this.state.gameWords[3],\n                                                    this.state.gameWords[4]]}\n                                                    cardNumbers={[0,1,2,3,4]} // Add in card numbers to distinguish\n                                                    gameid={this.state.gameid} // Add in gameid for card websocket\n                                                    increaseTeamPoints={this.props.increaseTeamPoints} />\n                                                <Row task={this.state.task}\n                                                    rowWords={[this.state.gameWords[5],\n                                                    this.state.gameWords[6],\n                                                    this.state.gameWords[7],\n                                                    this.state.gameWords[8],\n                                                    this.state.gameWords[9]]}\n                                                    cardNumbers={[5,6,7,8,9]}\n                                                    gameid={this.state.gameid} // Add in gameid for card websocket\n                                                    increaseTeamPoints={this.props.increaseTeamPoints} />\n                                                <Row task={this.state.task}\n                                                    rowWords={[this.state.gameWords[10],\n                                                    this.state.gameWords[11],\n                                                    this.state.gameWords[12],\n                                                    this.state.gameWords[13],\n                                                    this.state.gameWords[14]]}\n                                                    cardNumbers={[10,11,12,13,14]}\n                                                    gameid={this.state.gameid} // Add in gameid for card websocket\n                                                    increaseTeamPoints={this.props.increaseTeamPoints} />\n                                                <Row task={this.state.task}\n                                                    rowWords={[this.state.gameWords[15],\n                                                    this.state.gameWords[16],\n                                                    this.state.gameWords[17],\n                                                    this.state.gameWords[18],\n                                                    this.state.gameWords[19]]}\n                                                    cardNumbers={[15,16,17,18,19]}\n                                                    gameid={this.state.gameid} // Add in gameid for card websocket\n                                                    increaseTeamPoints={this.props.increaseTeamPoints} />\n                                                <Row task={this.state.task}\n                                                    rowWords={[this.state.gameWords[20],\n                                                    this.state.gameWords[21],\n                                                    this.state.gameWords[22],\n                                                    this.state.gameWords[23],\n                                                    this.state.gameWords[24]]}\n                                                    cardNumbers={[20,21,22,23,24]}\n                                                    gameid={this.state.gameid} // Add in gameid for card websocket\n                                                    increaseTeamPoints={this.props.increaseTeamPoints} />\n                                            {!this.props.winningScreenIsOpen  ?\n                                            <div className=\"row\">\n                                                <div className=\"col-md-12\">\n                                                    <div className=\"d-flex justify-content-end\">\n                                                        <button className=\"btn\" onClick={this.handleEndTurn}>End Turn</button> {/*  onSubmit / onClick ? */}\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            :\n                                            <div className=\"popUp\" >\n                                                {this.props.team === this.props.winningTeam ? \n                                                <h4 className=\"Status\">CONGRATS! YOUR TEAM WON!</h4>\n                                                :\n                                                <h4 className=\"Status\">SORRY! YOUR TEAM LOST!</h4>\n                                                }\n                                            </div>\n                                            }\n                                        </div>  {/* Changed back to div from a form */}\n                                    </div>\n                                    \n                                </div> \n                            </div>\n                        </div>\n                </div>\n                :\n                <div>Waiting for players!</div>\n                }\n            </div>\n        )\n    }\n}\n\nexport default OperativesGame"]},"metadata":{},"sourceType":"module"}