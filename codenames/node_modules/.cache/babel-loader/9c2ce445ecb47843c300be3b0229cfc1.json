{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/micha/Codenames/codenames/codenames/src/Components/GamePage/Game.js\";\nimport React, { Component } from 'react';\nimport './Game.css';\nimport axios from 'axios';\nimport SpymastersGame from './Spymasters/SpymastersGame.js';\nimport OperativesGame from './Operatives/OperativesGame.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Game extends Component {\n  constructor() {\n    super();\n\n    this.componentDidMount = async () => {\n      let gameWords = this.props.location.state.gameWords;\n\n      for (let i = 0; i < gameWords.length; i++) {\n        if (gameWords[i].category === 'D') {\n          this.setState({\n            doubleAgent: gameWords[i],\n            doubleAgentIndex: i\n          });\n        }\n      }\n\n      await axios.get('http://127.0.0.1:8000/codenames/players').then(res => {\n        this.setState({\n          playersdata: res.data\n        });\n        let playerExist = false;\n\n        for (let i = 0; i < res.data.length; i++) {\n          if (res.data[i].game_id === this.props.location.state.gameid && res.data[i].room === this.props.location.state.room_key && res.data[i].user_id === this.props.location.state.playerid) {\n            playerExist = true;\n          }\n        }\n\n        if (playerExist === false) {\n          axios.post('http://127.0.0.1:8000/codenames/players', {\n            operative_screen_name: this.props.location.state.nickname,\n            team: this.props.location.state.team,\n            role: this.props.location.state.task,\n            room: this.props.location.state.room_key,\n            game_id: this.props.location.state.gameid,\n            user_id: this.props.location.state.playerid\n          }).then(response => {\n            this.setState({\n              playersdata: [...this.state.playersdata, response.data]\n            });\n            this.socketSendPlayers();\n          });\n        }\n      });\n      this.setState({\n        room_key: this.props.location.state.room_key,\n        roomid: this.props.location.state.roomid,\n        nickname: this.props.location.state.nickname,\n        team: this.props.location.state.team,\n        task: this.props.location.state.task,\n        gameid: this.props.location.state.gameid,\n        gameData: this.props.location.state.gameData,\n        gameWords: this.props.location.state.gameWords,\n        playerid: this.props.location.state.playerid,\n        redteamid: this.props.location.state.redteamid,\n        blueteamid: this.props.location.state.blueteamid\n      });\n      this.updateGameWords(this.props.location.state.gameid);\n      await axios.get(`http://127.0.0.1:8000/codenames/redTeam/${this.state.redteamid}`).then(response => {\n        this.setState({\n          red_score: response.data.red_team_score\n        });\n      });\n      await axios.get(`http://127.0.0.1:8000/codenames/blueTeam/${this.state.blueteamid}`).then(response => {\n        this.setState({\n          blue_score: response.data.blue_team_score\n        });\n      });\n      const localRedTeamId = localStorage.getItem(this.state.redteamid);\n      const localBlueTeamId = localStorage.getItem(this.state.blueteamid);\n\n      if (localRedTeamId && localBlueTeamId) {\n        // console.log(localRedTeamId, localBlueTeamId);\n        this.setState({\n          red_score: Number(localRedTeamId),\n          blue_score: Number(localBlueTeamId)\n        });\n      }\n\n      this.connectTeamPoints();\n      this.connectPlayers();\n    };\n\n    this.componentDidUpdate = () => {// this.socketSendPlayers();\n    };\n\n    this.setDoubleAgent = () => {\n      let doubleAgent = { ...this.state.doubleAgent\n      };\n      doubleAgent.category = this.state.team;\n      let agentClicked = this.state.agentClicked;\n      agentClicked = true;\n      this.setState({\n        doubleAgent,\n        agentClicked\n      });\n      axios.put(`http://127.0.0.1:8000/codenames/games/word/${this.state.doubleAgent.word_id}`, doubleAgent).then(res => {\n        console.log(res);\n        this.updateGameWords(this.state.gameid);\n      });\n    };\n\n    this.updateGameWords = gameid => {\n      axios.get(`http://127.0.0.1:8000/codenames/games/${gameid}`).then(res => {\n        this.setState({\n          gameWords: res.data.gameWords\n        });\n      });\n    };\n\n    this.increaseTeamPoints = (team, word) => {\n      let redPoints = this.state.red_score;\n      let bluePoints = this.state.blue_score;\n\n      if (team === 'R') {\n        let wordObj = this.state.gameWords.find(w => w.word_id === word);\n\n        if (wordObj.guessed === false) {\n          this.setState(prevState => {\n            return {\n              red_score: prevState.red_score + 1\n            };\n          });\n          redPoints += 1;\n          localStorage.setItem(this.state.redteamid, JSON.stringify(redPoints));\n          axios.patch(`http://127.0.0.1:8000/codenames/games/word/${word}`, {\n            guessed: true\n          }).then(response => {\n            console.log(response.data);\n          });\n          axios.patch(`http://127.0.0.1:8000/codenames/redTeam/${this.state.redteamid}`, {\n            red_team_score: redPoints\n          }).then(response => {\n            console.log(response.data);\n          });\n        }\n\n        this.socketSendTeamPoints(redPoints, bluePoints);\n      } else if (team === 'B') {\n        let wordObj = this.state.gameWords.find(w => w.word_id === word);\n\n        if (wordObj.guessed === false) {\n          this.setState(prevState => {\n            return {\n              blue_score: prevState.blue_score + 1\n            };\n          });\n          bluePoints += 1;\n          localStorage.setItem(this.state.blueteamid, JSON.stringify(bluePoints));\n          axios.patch(`http://127.0.0.1:8000/codenames/games/word/${word}`, {\n            guessed: true\n          }).then(response => {\n            console.log(response.data);\n          });\n          axios.patch(`http://127.0.0.1:8000/codenames/blueTeam/${this.state.blueteamid}`, {\n            blue_team_score: bluePoints\n          }).then(response => {\n            console.log(response.data);\n          });\n        }\n\n        this.socketSendTeamPoints(redPoints, bluePoints);\n      }\n    };\n\n    this.socketSendTeamPoints = (red_team_points, blue_team_points) => {\n      var data = {\n        \"red_team_points\": red_team_points,\n        \"blue_team_points\": blue_team_points\n      };\n      this.state.wstp.send(JSON.stringify(data));\n      console.log(data);\n    };\n\n    this.connectTeamPoints = () => {\n      var wstp = new WebSocket('ws://localhost:8000/teampoints/teampoints/' + this.state.gameid + '/');\n      let that = this; //cache the this\n\n      var connectInterval; //websocket onopen event listener\n\n      wstp.onopen = () => {\n        console.log('connect team points component');\n        this.setState({\n          wstp: wstp\n        });\n        that.timeout = 250;\n        clearTimeout(connectInterval);\n      };\n\n      wstp.onclose = e => {\n        console.log(`Socket is closed. Reconnect will be attempted in ${Math.min(10000 / 1000, (that.timeout + that.timeout) / 1000)} second.`, e.reason);\n        that.timeout = that.timeout + that.timeout; //increment retry interval\n\n        connectInterval = setTimeout(this.checkTeamPoints, Math.min(1000, that.timeout));\n      }; // websocket onerror event listener\n\n\n      wstp.onerror = err => {\n        console.error(\"Socket encountered error: \", err.message, \"Closing socket\");\n        wstp.close();\n      };\n\n      wstp.onmessage = evt => {\n        // listen to data sent from the websocket server\n        const data = JSON.parse(evt.data);\n        console.log(data);\n        console.log(\"received clue!\");\n        let red_team_points = data.red_team_points;\n        let blue_team_points = data.blue_team_points;\n        this.setState(prevState => {\n          return {\n            red_score: red_team_points,\n            blue_score: blue_team_points\n          };\n        });\n      };\n\n      this.setState(prevState => {\n        return {\n          wstp: wstp\n        };\n      });\n    };\n\n    this.checkTeamPoints = () => {\n      const {\n        wstp\n      } = this.state.wstp;\n      if (!wstp || wstp.readyState === WebSocket.CLOSED) this.connectTeamPoints(); //check if websocket instance is closed, if so call `connect` function.\n    };\n\n    this.socketSendPlayers = players => {\n      var data = {\n        \"all_players\": players\n      };\n      this.state.wsp.send(JSON.stringify(data));\n    };\n\n    this.connectPlayers = () => {\n      var wsp = new WebSocket('ws://localhost:8000/players/players/' + this.state.gameid + '/');\n      let that = this;\n      var connectInterval;\n\n      wsp.onopen = () => {\n        this.setState({\n          wsp: wsp\n        });\n        that.timeout = 250;\n        clearTimeout(connectInterval);\n      };\n\n      wsp.onclose = e => {\n        console.log(`Socket is closed. Reconnect will be attempted in ${Math.min(10000 / 1000, (that.timeout + that.timeout) / 1000)} second.`, e.reason);\n        that.timeout = that.timeout + that.timeout; //increment retry interval\n\n        connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\n      };\n\n      wsp.onerror = err => {\n        console.error(\"Socket encountered error: \", err.message, \"Closing socket\");\n        wsp.close();\n      };\n\n      wsp.onmessage = evt => {\n        const data = JSON.parse(evt.data);\n        let all_player = data.all_player;\n        this.setState(prevState => {\n          return {\n            playersdata: all_player\n          };\n        });\n      };\n\n      this.setState(prevState => {\n        return {\n          wsp: wsp\n        };\n      });\n    };\n\n    this.checkPlayers = () => {\n      const {\n        wsp\n      } = this.state.wsp;\n      if (!wsp || wsp.readyState === WebSocket.CLOSED) this.connectPlayers();\n    };\n\n    this.state = {\n      room_key: '',\n      roomid: '',\n      nickname: '',\n      team: '',\n      playerid: '',\n      task: '',\n      red_score: 0,\n      blue_score: 0,\n      gameid: '',\n      gameData: '',\n      gameWords: '',\n      doubleAgent: '',\n      doubleAgentIndex: '',\n      playersdata: '',\n      agentClicked: false,\n      redteamid: '',\n      blueteamid: '',\n      //Websocket Team Points\n      wstp: null,\n      //Websocket Players\n      wsp: null\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.state.task === 'S' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.agentClicked === false ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.setDoubleAgent,\n            children: \"I WANT FIRST\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(SpymastersGame, {\n            room_key: this.state.room_key,\n            gameWords: this.state.gameWords,\n            increaseTeamPoints: this.increaseTeamPoints,\n            redPoints: this.state.red_score,\n            bluePoints: this.state.blue_score,\n            playersdata: this.state.playersdata,\n            gameid: this.state.gameid\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(SpymastersGame, {\n            room_key: this.state.room_key,\n            gameWords: this.state.gameWords,\n            increaseTeamPoints: this.increaseTeamPoints,\n            redPoints: this.state.red_score,\n            bluePoints: this.state.blue_score,\n            playersdata: this.state.playersdata,\n            gameid: this.state.gameid\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(OperativesGame, {\n        room_key: this.state.room_key,\n        gameWords: this.state.gameWords,\n        increaseTeamPoints: this.increaseTeamPoints,\n        redPoints: this.state.red_score,\n        bluePoints: this.state.blue_score,\n        playersdata: this.state.playersdata\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/mnt/c/Users/micha/Codenames/codenames/codenames/src/Components/GamePage/Game.js"],"names":["React","Component","axios","SpymastersGame","OperativesGame","Game","constructor","componentDidMount","gameWords","props","location","state","i","length","category","setState","doubleAgent","doubleAgentIndex","get","then","res","playersdata","data","playerExist","game_id","gameid","room","room_key","user_id","playerid","post","operative_screen_name","nickname","team","role","task","response","socketSendPlayers","roomid","gameData","redteamid","blueteamid","updateGameWords","red_score","red_team_score","blue_score","blue_team_score","localRedTeamId","localStorage","getItem","localBlueTeamId","Number","connectTeamPoints","connectPlayers","componentDidUpdate","setDoubleAgent","agentClicked","put","word_id","console","log","increaseTeamPoints","word","redPoints","bluePoints","wordObj","find","w","guessed","prevState","setItem","JSON","stringify","patch","socketSendTeamPoints","red_team_points","blue_team_points","wstp","send","WebSocket","that","connectInterval","onopen","timeout","clearTimeout","onclose","e","Math","min","reason","setTimeout","checkTeamPoints","onerror","err","error","message","close","onmessage","evt","parse","readyState","CLOSED","players","wsp","check","all_player","checkPlayers","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport './Game.css'\nimport axios from 'axios'\nimport SpymastersGame from './Spymasters/SpymastersGame.js'\nimport OperativesGame from './Operatives/OperativesGame.js'\n\n\nclass Game extends Component {\n    constructor() {\n        super()\n        this.state = {\n            room_key: '',\n            roomid: '',\n            nickname: '',\n            team: '',\n            playerid: '',\n            task: '',\n            red_score: 0,\n            blue_score: 0,\n            gameid: '',\n            gameData: '', \n            gameWords: '',\n            doubleAgent: '',\n            doubleAgentIndex: '',\n            playersdata: '',\n            agentClicked: false,\n\n            redteamid: '',\n            blueteamid: '',\n            \n            //Websocket Team Points\n            wstp: null,\n            //Websocket Players\n            wsp: null\n        }\n    }\n\n    \n\n\n\n    componentDidMount = async () =>{\n        let gameWords = this.props.location.state.gameWords;\n        for(let i = 0; i < gameWords.length; i++) {\n            if(gameWords[i].category === 'D') {\n                this.setState({\n                    doubleAgent: gameWords[i],\n                    doubleAgentIndex: i\n                })\n            }\n        }\n\n\n        await axios.get('http://127.0.0.1:8000/codenames/players').then(res => {\n            this.setState({\n                playersdata: res.data\n            })\n            let playerExist = false;\n            for(let i = 0; i < res.data.length; i++) {\n                if(res.data[i].game_id === this.props.location.state.gameid && res.data[i].room === this.props.location.state.room_key && res.data[i].user_id === this.props.location.state.playerid) {\n                    playerExist = true;\n                }\n            }\n\n            if(playerExist === false) {\n                axios.post('http://127.0.0.1:8000/codenames/players', {\n                    operative_screen_name: this.props.location.state.nickname,\n                    team: this.props.location.state.team,\n                    role: this.props.location.state.task,\n                    room: this.props.location.state.room_key,\n                    game_id: this.props.location.state.gameid,\n                    user_id: this.props.location.state.playerid\n                }).then(response =>{\n                    this.setState({\n                        playersdata: [...this.state.playersdata, response.data]\n                    })\n\n                    this.socketSendPlayers()\n                })\n            }\n        })\n        this.setState({\n            room_key: this.props.location.state.room_key,\n            roomid: this.props.location.state.roomid,\n            nickname: this.props.location.state.nickname,\n            team: this.props.location.state.team,\n            task: this.props.location.state.task,\n            gameid: this.props.location.state.gameid,\n            gameData: this.props.location.state.gameData,\n            gameWords: this.props.location.state.gameWords,\n            playerid: this.props.location.state.playerid,\n            redteamid: this.props.location.state.redteamid,\n            blueteamid: this.props.location.state.blueteamid,\n        })\n\n        this.updateGameWords(this.props.location.state.gameid)\n\n        await axios.get(`http://127.0.0.1:8000/codenames/redTeam/${this.state.redteamid}`)\n        .then(response => {\n            this.setState({\n                red_score:response.data.red_team_score\n            })\n        })\n        await axios.get(`http://127.0.0.1:8000/codenames/blueTeam/${this.state.blueteamid}`)\n        .then(response => {\n            this.setState({\n                blue_score:response.data.blue_team_score\n            })\n        })\n\n        const localRedTeamId = localStorage.getItem(this.state.redteamid);\n        const localBlueTeamId = localStorage.getItem(this.state.blueteamid);\n\n        if(localRedTeamId && localBlueTeamId) {\n            // console.log(localRedTeamId, localBlueTeamId);\n            this.setState({\n                red_score: Number(localRedTeamId),\n                blue_score: Number(localBlueTeamId)\n            })\n        }\n\n        this.connectTeamPoints();\n        this.connectPlayers();\n        \n    }\n\n    componentDidUpdate = () => {\n        // this.socketSendPlayers();\n    }\n    \n    setDoubleAgent = () => {\n        let doubleAgent = { ...this.state.doubleAgent}; \n        doubleAgent.category = this.state.team;\n        let agentClicked = this.state.agentClicked;\n        agentClicked = true;\n        this.setState({\n            doubleAgent,\n            agentClicked\n        })\n\n        axios.put(`http://127.0.0.1:8000/codenames/games/word/${this.state.doubleAgent.word_id}`, doubleAgent)\n            .then(res => {\n                console.log(res)\n                this.updateGameWords(this.state.gameid)\n            })\n    }\n\n    updateGameWords = (gameid) => {\n        axios.get(`http://127.0.0.1:8000/codenames/games/${gameid}`).then(res => {\n            this.setState({ \n                gameWords: res.data.gameWords \n            })\n        \n        })\n    }\n\n    //from the card component, the words id and its corresponding team will be sent here to increase the points and change the guess to true accordingly\n    increaseTeamPoints = (team, word) => {\n        let redPoints = this.state.red_score\n        let bluePoints = this.state.blue_score\n        if(team === 'R'){\n            let wordObj = this.state.gameWords.find(w => w.word_id === word);\n            if(wordObj.guessed === false) {\n                this.setState(prevState => {\n                    return {\n                        red_score: prevState.red_score+1,\n                    }\n                })\n                redPoints += 1\n    \n                localStorage.setItem(this.state.redteamid, JSON.stringify(redPoints));\n\n                axios.patch(`http://127.0.0.1:8000/codenames/games/word/${word}`, {guessed:true}).then(response => {\n                    console.log(response.data)\n                })\n                axios.patch(`http://127.0.0.1:8000/codenames/redTeam/${this.state.redteamid}`, {red_team_score: redPoints}).then(response => {\n                    console.log(response.data)\n                })\n            }\n            \n            this.socketSendTeamPoints(redPoints, bluePoints);\n        }\n        else if(team === 'B'){\n            let wordObj = this.state.gameWords.find(w => w.word_id === word);\n            if(wordObj.guessed === false) {\n                this.setState(prevState => {\n                    return {\n                        blue_score: prevState.blue_score+1,\n                    }\n                })\n                bluePoints += 1\n\n                localStorage.setItem(this.state.blueteamid, JSON.stringify(bluePoints));\n\n                axios.patch(`http://127.0.0.1:8000/codenames/games/word/${word}`, {guessed:true}).then(response => {\n                    console.log(response.data)\n                })\n                axios.patch(`http://127.0.0.1:8000/codenames/blueTeam/${this.state.blueteamid}`, {blue_team_score: bluePoints}).then(response => {\n                    console.log(response.data)\n                })\n\n            }\n            this.socketSendTeamPoints(redPoints, bluePoints);\n        }\n\n    }\n\n    socketSendTeamPoints = (red_team_points, blue_team_points) => {\n        var data = {\n            \"red_team_points\": red_team_points,\n            \"blue_team_points\": blue_team_points\n        }\n\n        this.state.wstp.send(JSON.stringify(data))\n        console.log(data)\n    }\n\n    connectTeamPoints = () => {\n        var wstp = new WebSocket('ws://localhost:8000/teampoints/teampoints/' + this.state.gameid + '/');\n        let that = this; //cache the this\n        var connectInterval;\n\n        //websocket onopen event listener\n        wstp.onopen = () => {\n            console.log('connect team points component');\n            this.setState({ wstp: wstp });\n\n            that.timeout = 250;\n            clearTimeout(connectInterval);\n        }\n\n        wstp.onclose = e => {\n            console.log(\n                `Socket is closed. Reconnect will be attempted in ${Math.min(\n                    10000 / 1000,\n                    (that.timeout + that.timeout) / 1000\n                )} second.`,\n                e.reason\n            );\n\n            that.timeout = that.timeout + that.timeout; //increment retry interval\n            connectInterval = setTimeout(this.checkTeamPoints, Math.min(1000, that.timeout));\n        }\n\n        // websocket onerror event listener\n        wstp.onerror = err => {\n            console.error(\n                \"Socket encountered error: \",\n                err.message,\n                \"Closing socket\"\n            );\n\n            wstp.close();\n        };\n\n        wstp.onmessage = evt => {\n            // listen to data sent from the websocket server\n            const data = JSON.parse(evt.data)\n            console.log(data)\n            console.log(\"received clue!\")\n            let red_team_points = data.red_team_points\n            let blue_team_points = data.blue_team_points\n            this.setState(prevState => {\n                return {\n                    red_score: red_team_points,\n                    blue_score: blue_team_points\n                }\n            })\n        };\n        this.setState(prevState => {\n            return {\n                wstp: wstp\n            }\n        })\n    };\n\n    /**\n     * utilited by the @function connect to check if the connection is close, if so attempts to reconnect\n     */\n     checkTeamPoints = () => {\n        const { wstp } = this.state.wstp;\n        if (!wstp || wstp.readyState === WebSocket.CLOSED) this.connectTeamPoints(); //check if websocket instance is closed, if so call `connect` function.\n    };\n    \n    socketSendPlayers = (players) => {\n        var data = {\n            \"all_players\": players\n        }\n        this.state.wsp.send(JSON.stringify(data))\n    }\n\n    connectPlayers = () => {\n        var wsp = new WebSocket('ws://localhost:8000/players/players/' + this.state.gameid + '/');\n        let that = this;\n        var connectInterval;\n\n        wsp.onopen = () => {\n            this.setState ({ wsp: wsp });\n\n            that.timeout = 250;\n            clearTimeout(connectInterval);\n        };\n\n        wsp.onclose = e => {\n            console.log(\n                `Socket is closed. Reconnect will be attempted in ${Math.min(\n                    10000 / 1000,\n                    (that.timeout + that.timeout) / 1000\n                )} second.`,\n                e.reason\n            );\n\n            that.timeout = that.timeout + that.timeout; //increment retry interval\n            connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\n        }\n\n        wsp.onerror = err => {\n            console.error(\n                \"Socket encountered error: \",\n                err.message,\n                \"Closing socket\"\n            );\n\n            wsp.close();\n        };\n\n        wsp.onmessage = evt => {\n            const data = JSON.parse(evt.data)\n            let all_player = data.all_player\n            this.setState(prevState => {\n                return {\n                    playersdata: all_player,\n                }\n            })\n        };\n\n        this.setState(prevState => {\n            return {\n                wsp: wsp\n            }\n        })\n\n    };\n\n    checkPlayers = () => {\n        const { wsp } = this.state.wsp;\n        if(!wsp || wsp.readyState === WebSocket.CLOSED) this.connectPlayers();\n    }\n\n    render() {\n        \n        return(\n            <div>\n                {\n                    this.state.task === 'S' ?\n                    \n                    <div>\n                        {\n                        this.state.agentClicked === false ?\n                        <div>\n                            <button onClick={this.setDoubleAgent}>I WANT FIRST</button> \n                            <SpymastersGame \n                                room_key = {this.state.room_key}\n                                gameWords = {this.state.gameWords}\n                                increaseTeamPoints = {this.increaseTeamPoints}\n                                redPoints = {this.state.red_score}\n                                bluePoints = {this.state.blue_score}\n                                playersdata = {this.state.playersdata}\n                                gameid = {this.state.gameid}\n                            />\n                        </div>\n\n                        :\n\n                        <div>\n                            <SpymastersGame \n                                    room_key = {this.state.room_key}\n                                    gameWords = {this.state.gameWords}\n                                    increaseTeamPoints = {this.increaseTeamPoints}\n                                    redPoints = {this.state.red_score}\n                                    bluePoints = {this.state.blue_score}\n                                    playersdata = {this.state.playersdata}\n                                    gameid = {this.state.gameid}\n                            />\n                        </div>\n                        }\n                    </div>\n                    : \n\n                    <OperativesGame \n                        room_key = {this.state.room_key}\n                        gameWords = {this.state.gameWords}\n                        increaseTeamPoints = {this.increaseTeamPoints}\n                        redPoints = {this.state.red_score}\n                        bluePoints = {this.state.blue_score}\n                        playersdata = {this.state.playersdata}\n                    />\n                }\n            </div>\n        )\n    }\n}\n\nexport default Game"]},"metadata":{},"sourceType":"module"}