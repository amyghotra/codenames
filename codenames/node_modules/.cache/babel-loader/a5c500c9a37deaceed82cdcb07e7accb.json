{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/micha/Codenames/codenames/codenames/src/Components/GamePage/Card/Card.js\";\nimport React, { Component } from \"react\";\nimport \"./Card.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Card extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      this.setState({\n        task: this.props.task,\n        team: this.state.team,\n        turn: this.state.turn,\n        number: this.props.number\n      }); // if (this.props.task === \"O\") {\n      //     this.connect();\n      // }\n    };\n\n    this.componentDidUpdate = event => {\n      if (event.word !== this.props.word) {\n        this.setState(prevState => {\n          return {\n            content: this.props.word\n          };\n        });\n\n        if (this.props.word.category === 'A' || this.props.word.category === 'R' || this.props.word.category === 'B') {\n          let wordGuessed = localStorage.getItem(this.props.word.word_id);\n          this.setState({\n            checked: wordGuessed\n          });\n        }\n      }\n    };\n\n    this.handleChange = () => {\n      if (!this.state.checked) {\n        this.setState({\n          checked: true,\n          turn: !this.state.turn\n        });\n        console.log(this.state.checked);\n        this.props.increaseTeamPoints(this.state.content.category, this.state.content.word_id);\n        localStorage.setItem(this.state.content.word_id, JSON.stringify(true)); //this.socketSend() \n      }\n    };\n\n    this.state = {\n      checked: false,\n      task: '',\n      team: '',\n      content: '',\n      turn: true,\n      // true = blue turn && false = red turn\n      redteamid: '',\n      blueteamid: '',\n      // WebSocket\n      ws: null,\n      number: 0 // Need to get number of card from props, can just pass it in from the game page when calling Row\n      // So all checkboxes should check with one check for right now\n\n    }; //this.socketSend = this.socketSend.bind(this);\n  } // socketSend = () => {\n  //     var data = {\n  //         \"number\": this.state.number,\n  //         \"checked\": true //this.state.checked // Hard coded to true, it'll never be false ?\n  //     }\n  //     this.state.ws.send(JSON.stringify(data)) // Testing send\n  //     console.log(data)\n  // }\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.state.task === 'O' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-deck\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-style\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"checkboxStructure\",\n            id: \"checkbox\",\n            type: \"checkbox\",\n            checked: this.state.checked,\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 55\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n            children: !this.state.checked ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                className: \"card-text\",\n                children: this.state.content.word\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 77\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                className: `card-text-${this.state.content.category}`,\n                children: this.state.content.word\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 110\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          className: `card-deck-${this.state.content.category}`,\n          children: this.state.content.word\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Card;","map":{"version":3,"sources":["/mnt/c/Users/micha/Codenames/codenames/codenames/src/Components/GamePage/Card/Card.js"],"names":["React","Component","Card","constructor","props","componentDidMount","setState","task","team","state","turn","number","componentDidUpdate","event","word","prevState","content","category","wordGuessed","localStorage","getItem","word_id","checked","handleChange","console","log","increaseTeamPoints","setItem","JSON","stringify","redteamid","blueteamid","ws","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,YAAP;;;AAIA,MAAMC,IAAN,SAAmBD,SAAnB,CAA4B;AACxBE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SA4BnBC,iBA5BmB,GA4BC,MAAM;AACtB,WAAKC,QAAL,CAAc;AACVC,QAAAA,IAAI,EAAE,KAAKH,KAAL,CAAWG,IADP;AAEVC,QAAAA,IAAI,EAAE,KAAKC,KAAL,CAAWD,IAFP;AAGVE,QAAAA,IAAI,EAAE,KAAKD,KAAL,CAAWC,IAHP;AAIVC,QAAAA,MAAM,EAAE,KAAKP,KAAL,CAAWO;AAJT,OAAd,EADsB,CAOtB;AACA;AACA;AACH,KAtCkB;;AAAA,SAkHnBC,kBAlHmB,GAkHGC,KAAD,IAAW;AAC5B,UAAIA,KAAK,CAACC,IAAN,KAAe,KAAKV,KAAL,CAAWU,IAA9B,EAAoC;AAChC,aAAKR,QAAL,CAAcS,SAAS,IAAI;AACvB,iBAAO;AACHC,YAAAA,OAAO,EAAE,KAAKZ,KAAL,CAAWU;AADjB,WAAP;AAGH,SAJD;;AAMA,YAAG,KAAKV,KAAL,CAAWU,IAAX,CAAgBG,QAAhB,KAA6B,GAA7B,IAAoC,KAAKb,KAAL,CAAWU,IAAX,CAAgBG,QAAhB,KAA6B,GAAjE,IAAwE,KAAKb,KAAL,CAAWU,IAAX,CAAgBG,QAAhB,KAA6B,GAAxG,EAA6G;AACzG,cAAIC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,KAAKhB,KAAL,CAAWU,IAAX,CAAgBO,OAArC,CAAlB;AACA,eAAKf,QAAL,CAAc;AACVgB,YAAAA,OAAO,EAAEJ;AADC,WAAd;AAGH;AACJ;AACJ,KAjIkB;;AAAA,SAmInBK,YAnImB,GAmIJ,MAAM;AAEjB,UAAG,CAAC,KAAKd,KAAL,CAAWa,OAAf,EAAwB;AACpB,aAAKhB,QAAL,CAAc;AACVgB,UAAAA,OAAO,EAAE,IADC;AAEVZ,UAAAA,IAAI,EAAE,CAAC,KAAKD,KAAL,CAAWC;AAFR,SAAd;AAIAc,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKhB,KAAL,CAAWa,OAAvB;AACA,aAAKlB,KAAL,CAAWsB,kBAAX,CAA8B,KAAKjB,KAAL,CAAWO,OAAX,CAAmBC,QAAjD,EAA2D,KAAKR,KAAL,CAAWO,OAAX,CAAmBK,OAA9E;AACAF,QAAAA,YAAY,CAACQ,OAAb,CAAqB,KAAKlB,KAAL,CAAWO,OAAX,CAAmBK,OAAxC,EAAiDO,IAAI,CAACC,SAAL,CAAe,IAAf,CAAjD,EAPoB,CAQpB;AACH;AAEJ,KAhJkB;;AAEf,SAAKpB,KAAL,GAAa;AACTa,MAAAA,OAAO,EAAE,KADA;AAETf,MAAAA,IAAI,EAAE,EAFG;AAGTC,MAAAA,IAAI,EAAE,EAHG;AAITQ,MAAAA,OAAO,EAAE,EAJA;AAKTN,MAAAA,IAAI,EAAE,IALG;AAKG;AACZoB,MAAAA,SAAS,EAAE,EANF;AAOTC,MAAAA,UAAU,EAAE,EAPH;AAST;AACAC,MAAAA,EAAE,EAAE,IAVK;AAWTrB,MAAAA,MAAM,EAAE,CAXC,CAWE;AACX;;AAZS,KAAb,CAFe,CAgBf;AACH,GAlBuB,CAoBxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA0HAsB,EAAAA,MAAM,GAAE;AACJ,wBACI;AAAA,gBAEM,KAAKxB,KAAL,CAAWF,IAAX,KAAoB,GAArB,gBACD;AAAA,+BACA;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA,kCACA;AAAK,YAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,kBADA,eAEA;AAAQ,YAAA,SAAS,EAAG,mBAApB;AACQ,YAAA,EAAE,EAAG,UADb;AAEQ,YAAA,IAAI,EAAG,UAFf;AAGV,YAAA,OAAO,EAAI,KAAKE,KAAL,CAAWa,OAHZ;AAIQ,YAAA,QAAQ,EAAE,KAAKC;AAJvB;AAAA;AAAA;AAAA;AAAA,kBAFA,eAMsC;AAAA;AAAA;AAAA;AAAA,kBANtC,oBAOA;AAAA,sBACE,CAAC,KAAKd,KAAL,CAAWa,OAAb,gBACD;AAAA,sCACI;AAAI,gBAAA,SAAS,EAAC,WAAd;AAAA,0BAA2B,KAAKb,KAAL,CAAWO,OAAX,CAAmBF;AAA9C;AAAA;AAAA;AAAA;AAAA,sBADJ,eAC4D;AAAA;AAAA;AAAA;AAAA,sBAD5D;AAAA;AAAA;AAAA;AAAA;AAAA,oBADC,gBAKD;AAAA,sCACI;AAAI,gBAAA,SAAS,EAAG,aAAY,KAAKL,KAAL,CAAWO,OAAX,CAAmBC,QAAS,EAAxD;AAAA,0BAA4D,KAAKR,KAAL,CAAWO,OAAX,CAAmBF;AAA/E;AAAA;AAAA;AAAA;AAAA,sBADJ,eAC6F;AAAA;AAAA;AAAA;AAAA,sBAD7F;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA,kBAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cADC,gBAuBD;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAI,UAAA,SAAS,EAAG,aAAY,KAAKL,KAAL,CAAWO,OAAX,CAAmBC,QAAS,EAAxD;AAAA,oBAA6D,KAAKR,KAAL,CAAWO,OAAX,CAAmBF;AAAhF;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAzBJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAoCH;;AA1LuB;;AA6L5B,eAAeZ,IAAf","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Card.css\"\n\n\n\nclass Card extends Component{\n    constructor(props) {\n        super(props)\n        this.state = {\n            checked: false,\n            task: '',\n            team: '',\n            content: '',\n            turn: true, // true = blue turn && false = red turn\n            redteamid: '',\n            blueteamid: '',\n\n            // WebSocket\n            ws: null,\n            number: 0, // Need to get number of card from props, can just pass it in from the game page when calling Row\n            // So all checkboxes should check with one check for right now\n        }\n        //this.socketSend = this.socketSend.bind(this);\n    }\n\n    // socketSend = () => {\n    //     var data = {\n    //         \"number\": this.state.number,\n    //         \"checked\": true //this.state.checked // Hard coded to true, it'll never be false ?\n    //     }\n    //     this.state.ws.send(JSON.stringify(data)) // Testing send\n    //     console.log(data)\n    // }\n    \n    componentDidMount = () => {\n        this.setState({\n            task: this.props.task,\n            team: this.state.team,\n            turn: this.state.turn,\n            number: this.props.number            \n        })\n        // if (this.props.task === \"O\") {\n        //     this.connect();\n        // }\n    }\n\n    /**\n     * @function connect\n     * This function establishes the connect with the websocket and also ensures \n     * constant reconnection if connection closes\n    */\n    // connect = () => {\n    //     var ws = new WebSocket('ws://localhost:8000/ws2/game/');\n    //     let that = this; // cache the this\n    //     var connectInterval;\n\n    //     // websocket onopen event listener\n    //     ws.onopen = () => {\n    //         console.log(\"connected websocket main component\");\n    //         this.setState({ ws: ws });\n\n    //         that.timeout = 250; // reset timer to 250 on open of websocket connection \n    //         clearTimeout(connectInterval); // clear Interval on on open of websocket connection\n    //     };\n\n    //     // websocket onclose event listener\n    //     ws.onclose = e => {\n    //         console.log(\n    //             `Socket is closed. Reconnect will be attempted in ${Math.min(\n    //                 10000 / 1000,\n    //                 (that.timeout + that.timeout) / 1000\n    //             )} second.`,\n    //             e.reason\n    //         );\n\n    //         that.timeout = that.timeout + that.timeout; //increment retry interval\n    //         connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\n    //     };\n\n    //     // websocket onerror event listener\n    //     ws.onerror = err => {\n    //         console.error(\n    //             \"Socket encountered error: \",\n    //             err.message,\n    //             \"Closing socket\"\n    //         );\n\n    //         ws.close();\n    //     };\n\n    //     ws.onmessage = evt => {\n    //         // listen to data sent from the websocket server\n    //         const data = JSON.parse(evt.data)\n    //         console.log(data)\n    //         console.log(\"received check!\")\n    //         let number = data.number\n    //         let checked = data.checked\n    //         if (number === this.state.number) {\n    //             this.setState(prevState => {\n    //                 return {\n    //                     checked: checked\n    //                 }\n    //             })\n    //         }\n    //     };\n    //     this.setState(prevState => {\n    //         return {\n    //             ws: ws\n    //         }\n    //     })\n    // };\n\n    // /**\n    //  * utilited by the @function connect to check if the connection is close, if so attempts to reconnect\n    //  */\n    // check = () => {\n    //     const { ws } = this.state.ws;\n    //     if (!ws || ws.readyState === WebSocket.CLOSED) this.connect(); //check if websocket instance is closed, if so call `connect` function.\n    // };\n\n    componentDidUpdate = (event) => {\n        if (event.word !== this.props.word) {\n            this.setState(prevState => {\n                return {\n                    content: this.props.word,\n                }\n            })\n\n            if(this.props.word.category === 'A' || this.props.word.category === 'R' || this.props.word.category === 'B') {\n                let wordGuessed = localStorage.getItem(this.props.word.word_id);\n                this.setState({\n                    checked: wordGuessed\n                })\n            }\n        }\n    }\n\n    handleChange = () => {\n\n        if(!this.state.checked) {\n            this.setState({\n                checked: true,\n                turn: !this.state.turn            \n            })\n            console.log(this.state.checked)\n            this.props.increaseTeamPoints(this.state.content.category, this.state.content.word_id)\n            localStorage.setItem(this.state.content.word_id, JSON.stringify(true))\n            //this.socketSend() \n        }\n\n    }\n\n    \n\n    render(){\n        return(\n            <div>\n\n                {(this.state.task === 'O') ?\n                <div>\n                <div className=\"card-deck\">\n                <div className=\"card-style\"></div>    \n                <input  className = \"checkboxStructure\"\n                        id = \"checkbox\"\n                        type = \"checkbox\"\n\t\t\t\t\t\tchecked = {this.state.checked}\n                        onChange={this.handleChange}/><br/> {/* onChange */}\n                <div>\n                {(!this.state.checked) ?\n                <div>\n                    <h5 className=\"card-text\">{this.state.content.word}</h5><br/>\n                </div>\n                :\n                <div>\n                    <h5 className={`card-text-${this.state.content.category}`}>{this.state.content.word}</h5><br/>\n                </div>\n                }\n                </div>\n                </div>\n                </div>\n                :\n                <div>\n                    <br/>\n                    <h5 className={`card-deck-${this.state.content.category}`} >{this.state.content.word}</h5>\n                    <br/>\n                </div>\n                }\n                \n\n            </div>\n        )\n    }\n}\n\nexport default Card"]},"metadata":{},"sourceType":"module"}