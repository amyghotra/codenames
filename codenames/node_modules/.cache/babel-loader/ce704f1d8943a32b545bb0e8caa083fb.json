{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/micha/Codenames/codenames/codenames/src/Components/UserInfo/UserInfo.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { Redirect } from 'react-router-dom';\nimport './UserInfo.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass UserInfo extends Component {\n  constructor() {\n    super();\n\n    this.componentDidMount = () => {\n      //for when the user is joining a room that already exist   \n      this.setState({\n        room_key: this.props.location.state.room_key,\n        roomid: this.props.location.state.roomid\n      }); //set all the existing games to state\n\n      axios.get('http://127.0.0.1:8000/codenames/games').then(res => {\n        this.setState({\n          gamesData: res.data\n        });\n        this.renderGameId(this.props.location.state.roomid);\n      });\n\n      if (this.state.userinfoWS === null) {\n        this.connectUserInfo();\n      }\n    };\n\n    this.renderGameId = roomid => {\n      let roomidexist = false;\n      axios.get('http://127.0.0.1:8000/codenames/games').then(res => {\n        for (let i = 0; i < res.data.length; i++) {\n          if (res.data[i].connected_room_key === roomid) {\n            roomidexist = true;\n            this.setState({\n              gameid: res.data[i].game_id,\n              gameWords: res.data[i].gameWords\n            });\n            this.renderTeamId(res.data[i].game_id);\n          }\n        }\n\n        if (roomidexist === false) {\n          axios.post('http://127.0.0.1:8000/codenames/games', {\n            connected_room_key: roomid\n          }).then(res => {\n            console.log('this is the game data: ', res.data);\n            this.setState({\n              gameid: res.data.game_id,\n              gameData: res.data,\n              gameWords: res.data.gameWords,\n              connected_room_key: res.data.connected_room_key\n            });\n            console.log('WE JUST MADE THIS GAME ID: ', res.data.game_id);\n            this.renderTeamId(res.data.game_id);\n          });\n        }\n\n        axios.get('http://127.0.0.1:8000/codenames/players').then(response => {\n          for (let i = 0; i < response.data.length; i++) {\n            if (response.data[i].game_id === this.state.gameid) {\n              console.log(response.data[i]);\n\n              if (response.data[i].team === \"R\" && response.data[i].role === \"S\") {\n                this.setState({\n                  redTeamSpyMaster: true\n                });\n              }\n\n              if (response.data[i].team === \"B\" && response.data[i].role === \"S\") {\n                this.setState({\n                  blueTeamSpyMaster: true\n                });\n              }\n            }\n          }\n        });\n      });\n    };\n\n    this.renderTeamId = gameid => {\n      // console.log('double checking ', gameid);\n      axios.get('http://127.0.0.1:8000/codenames/redTeam').then(res => {\n        for (let i = 0; i < res.data.length; i++) {\n          if (res.data[i].game_id === gameid) {\n            // console.log(res.data[i].game_id, ' COMPARED TO ', gameid)\n            this.setState({\n              redteamid: res.data[i].red_team_id,\n              redTeamExist: true\n            });\n          }\n        }\n      });\n      axios.get('http://127.0.0.1:8000/codenames/blueTeam').then(res => {\n        for (let i = 0; i < res.data.length; i++) {\n          if (res.data[i].game_id === gameid) {\n            this.setState({\n              blueteamid: res.data[i].blue_team_id,\n              blueTeamExist: true\n            });\n          }\n        }\n      });\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.setRed = () => {\n      this.setState({\n        team: 'R'\n      });\n    };\n\n    this.setBlue = () => {\n      this.setState({\n        team: 'B'\n      });\n    };\n\n    this.submitUserInfo = () => {\n      if (this.state.room_key !== null && this.state.nickname.length > 0 && this.state.team !== null && this.state.task !== null) {\n        if (this.state.team === 'R' && this.state.task === 'S' && this.state.redTeamSpyMaster === false || this.state.team === 'B' && this.state.task === 'S' && this.state.blueTeamSpyMaster === false || this.state.task === 'O') {\n          // Socket send here if task is S \n          if (this.state.task === 'S') {\n            if (this.state.team === 'R') {\n              this.setState(prevState => {\n                return {\n                  redTeamSpyMaster: true\n                };\n              });\n            } else if (this.state.team === 'B') {\n              this.setState(prevState => {\n                return {\n                  blueTeamSpyMaster: true\n                };\n              });\n            }\n\n            var data = {\n              \"spymasterTeam\": this.state.team,\n              \"exists\": true\n            }; // this.state.userinfoWS.send(JSON.stringify(data)) // send to channel\n\n            console.log(data);\n          }\n\n          axios.post('http://127.0.0.1:8000/codenames/userInfo', {\n            connected_room_key: this.props.location.state.room_key,\n            nickname: this.state.nickname,\n            team: this.state.team,\n            task: this.state.task\n          }).then(response => {\n            this.setState({\n              playerid: response.data.id\n            });\n            this.createGame();\n          }).catch(error => {\n            console.log(error);\n          });\n        }\n      }\n    };\n\n    this.createGame = async () => {\n      if (this.state.redTeamExist === false) {\n        await axios.post('http://127.0.0.1:8000/codenames/redTeam', {\n          game_id: this.state.gameid,\n          connected_room_key: this.state.roomid\n        }).then(response => {\n          this.setState({\n            redteamid: response.data.red_team_id\n          });\n        }).catch(error => {\n          console.log(error);\n        });\n      }\n\n      if (this.state.blueTeamExist === false) {\n        await axios.post('http://127.0.0.1:8000/codenames/blueTeam', {\n          game_id: this.state.gameid,\n          connected_room_key: this.state.roomid\n        }).then(response => {\n          this.setState({\n            blueteamid: response.data.blue_team_id\n          });\n        }).catch(error => {\n          console.log(error);\n        });\n      }\n\n      this.setState({\n        redirect: true\n      });\n    };\n\n    this.renderRedirect = () => {\n      if (this.state.redirect) {\n        return /*#__PURE__*/_jsxDEV(Redirect, {\n          to: {\n            pathname: '/game',\n            state: {\n              room_key: this.state.room_key,\n              roomid: this.state.roomid,\n              nickname: this.state.nickname,\n              team: this.state.team,\n              task: this.state.task,\n              gameid: this.state.gameid,\n              gameData: this.state.gameData,\n              gameWords: this.state.gameWords,\n              playerid: this.state.playerid,\n              redteamid: this.state.redteamid,\n              blueteamid: this.state.blueteamid\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 20\n        }, this);\n      }\n    };\n\n    this.setSpy = () => {\n      this.setState({\n        task: 'S'\n      });\n    };\n\n    this.setOper = () => {\n      this.setState({\n        task: 'O'\n      });\n    };\n\n    this.connectUserInfo = () => {\n      // Using roomid instead of game id because that doesn't exist yet\n      var ws = new WebSocket('ws://localhost:8000/userinfo/userinfo/' + this.props.location.state.roomid + '/');\n      let that = this; // cache the this\n\n      var connectInterval; // websocket onopen event listener\n\n      ws.onopen = () => {\n        console.log(\"connected websocket main component\");\n        this.setState({\n          userinfoWS: ws\n        });\n        that.timeout = 250; // reset timer to 250 on open of websocket connection \n\n        clearTimeout(connectInterval); // clear Interval on on open of websocket connection\n      }; // websocket onclose event listener\n\n\n      ws.onclose = e => {\n        console.log(`Socket is closed. Reconnect will be attempted in ${Math.min(10000 / 1000, (that.timeout + that.timeout) / 1000)} second.`, e.reason);\n        that.timeout = that.timeout + that.timeout; //increment retry interval\n\n        connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\n      }; // websocket onerror event listener\n\n\n      ws.onerror = err => {\n        console.error(\"Socket encountered error: \", err.message, \"Closing socket\");\n        ws.close();\n      };\n\n      ws.onmessage = evt => {\n        // listen to data sent from the websocket server\n        const data = JSON.parse(evt.data);\n        console.log(data);\n        console.log(\"received clue!\");\n        let spymasterTeam = data.spymasterTeam;\n        let exists = data.exists;\n\n        if (spymasterTeam === 'R' && this.state.redTeamSpyMaster !== exists) {\n          if (this.state.team === spymasterTeam) {\n            this.setState(prevState => {\n              return {\n                redTeamSpyMaster: exists,\n                task: 'O' // Another gameview claimed S on this team already\n\n              };\n            });\n          } else {\n            this.setState(prevState => {\n              return {\n                redTeamSpyMaster: exists\n              };\n            });\n          }\n        } else if (spymasterTeam === 'B' && this.state.blueTeamSpyMaster !== exists) {\n          if (this.state.team === spymasterTeam) {\n            this.setState(prevState => {\n              return {\n                blueTeamSpyMaster: exists,\n                task: 'O'\n              };\n            });\n          } else {\n            this.setState(prevState => {\n              return {\n                blueTeamSpyMaster: exists\n              };\n            });\n          }\n        }\n      };\n\n      this.setState(prevState => {\n        return {\n          userinfoWS: ws\n        };\n      });\n    };\n\n    this.checkUserInfo = () => {\n      const {\n        ws\n      } = this.state.ws;\n      if (!ws || ws.readyState === WebSocket.CLOSED) this.connectUserInfo(); //check if websocket instance is closed, if so call `connect` function.\n    };\n\n    this.state = {\n      room_key: '',\n      roomid: '',\n      nickname: '',\n      playerid: '',\n      team: '',\n      redteamid: '',\n      blueteamid: '',\n      task: '',\n      redirect: false,\n      gameData: '',\n      gameWords: '',\n      gameid: 0,\n      connected_room_key: '',\n      redTeamExist: false,\n      blueTeamExist: false,\n      redTeamSpyMaster: false,\n      blueTeamSpyMaster: false,\n      userinfoWS: null\n    };\n  }\n\n  render() {\n    // const text = this.state.blue_team ? \"blue team\" : \"red Team\"\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"userInfo\",\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n        className: \"gameCode\",\n        children: [\" Game Code: \", this.state.room_key, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"box-userInfo-left\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"prompt\",\n            children: \"Enter nickname\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 73\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 78\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"nickname\",\n            value: this.state.nickname,\n            name: \"nickname\",\n            type: \"text\",\n            placeholder: \"Nickname\",\n            spellCheck: \"false\",\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 55\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"prompt\",\n            children: \"Select task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 70\n          }, this), this.state.team === 'R' && this.state.redTeamSpyMaster === false || this.state.team === 'B' && this.state.blueTeamSpyMaster === false ? /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"task\",\n            type: \"button\",\n            onClick: this.setSpy,\n            children: \"spymaster\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 29\n          }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"task\",\n            type: \"button\",\n            onClick: this.setOper,\n            children: \"operator\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"box-userInfo-right\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"prompt\",\n            children: \"Choose a team\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 72\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"red\",\n            type: \"button\",\n            onClick: this.setRed\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 92\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"blue\",\n            type: \"button\",\n            onClick: this.setBlue\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 94\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 21\n        }, this), this.renderRedirect(), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"startBtn\",\n          type: \"button\",\n          onClick: this.submitUserInfo,\n          children: \"Start!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default UserInfo;","map":{"version":3,"sources":["/mnt/c/Users/micha/Codenames/codenames/codenames/src/Components/UserInfo/UserInfo.js"],"names":["React","Component","axios","Redirect","UserInfo","constructor","componentDidMount","setState","room_key","props","location","state","roomid","get","then","res","gamesData","data","renderGameId","userinfoWS","connectUserInfo","roomidexist","i","length","connected_room_key","gameid","game_id","gameWords","renderTeamId","post","console","log","gameData","response","team","role","redTeamSpyMaster","blueTeamSpyMaster","redteamid","red_team_id","redTeamExist","blueteamid","blue_team_id","blueTeamExist","handleChange","event","target","name","value","setRed","setBlue","submitUserInfo","nickname","task","prevState","playerid","id","createGame","catch","error","redirect","renderRedirect","pathname","setSpy","setOper","ws","WebSocket","that","connectInterval","onopen","timeout","clearTimeout","onclose","e","Math","min","reason","setTimeout","check","onerror","err","message","close","onmessage","evt","JSON","parse","spymasterTeam","exists","checkUserInfo","readyState","CLOSED","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport axios from 'axios'\nimport {Redirect} from 'react-router-dom'\nimport './UserInfo.css'\n\n\nclass UserInfo extends Component {\n    constructor() {\n        super()\n        this.state = {\n            room_key: '',\n            roomid: '',\n            nickname: '',\n            playerid: '',\n            team: '',\n            redteamid: '',\n            blueteamid: '',\n            task: '',\n            redirect: false,\n            gameData: '',\n            gameWords: '',\n            gameid: 0,\n            connected_room_key: '',\n            redTeamExist: false,\n            blueTeamExist: false,\n\n            redTeamSpyMaster: false,\n            blueTeamSpyMaster: false,\n            userinfoWS: null,\n        }\n    }\n\n    componentDidMount = () => {\n        //for when the user is joining a room that already exist   \n        this.setState({\n            room_key: this.props.location.state.room_key,\n            roomid: this.props.location.state.roomid\n        })\n\n        //set all the existing games to state\n        axios.get('http://127.0.0.1:8000/codenames/games').then(res => {\n            this.setState({\n                gamesData: res.data\n            })\n            this.renderGameId(this.props.location.state.roomid)\n        })\n        if (this.state.userinfoWS === null) {\n            this.connectUserInfo()\n        }\n    }\n\n    //make the game as long as the roomid exist and if there isnt a game that matches the roomid already\n    renderGameId = (roomid) => {\n\n        let roomidexist = false;\n\n        axios.get('http://127.0.0.1:8000/codenames/games').then(res => {\n            for(let i = 0; i < res.data.length; i++) {\n                if(res.data[i].connected_room_key === roomid) {\n                    roomidexist = true;\n                    this.setState({\n                        gameid: res.data[i].game_id,\n                        gameWords: res.data[i].gameWords\n                    })\n                    this.renderTeamId(res.data[i].game_id)\n                }\n            }\n            if(roomidexist === false) {\n                axios.post('http://127.0.0.1:8000/codenames/games', {\n                    connected_room_key: roomid\n                }).then(res => {\n                    console.log('this is the game data: ', res.data);\n                    this.setState({\n                        gameid: res.data.game_id,\n                        gameData: res.data,\n                        gameWords: res.data.gameWords,\n                        connected_room_key: res.data.connected_room_key\n                    })\n                    console.log('WE JUST MADE THIS GAME ID: ', res.data.game_id);\n                    this.renderTeamId(res.data.game_id)\n                })\n            }\n            axios.get('http://127.0.0.1:8000/codenames/players').then(response => {\n                for(let i = 0; i < response.data.length; i++) {\n                    if(response.data[i].game_id === this.state.gameid) {\n                        console.log(response.data[i]);\n                        if(response.data[i].team === \"R\" && response.data[i].role === \"S\") {\n                            this.setState({redTeamSpyMaster: true})\n                        }\n                        if(response.data[i].team === \"B\" && response.data[i].role === \"S\") {\n                            this.setState({blueTeamSpyMaster: true})\n                        }\n                    }\n                }\n            })\n        })\n    }\n\n    renderTeamId = (gameid) => {\n        // console.log('double checking ', gameid);\n\n        axios.get('http://127.0.0.1:8000/codenames/redTeam').then(res => {\n            for(let i = 0; i < res.data.length; i++) {\n                if(res.data[i].game_id === gameid) {\n                    // console.log(res.data[i].game_id, ' COMPARED TO ', gameid)\n                    this.setState({\n                        redteamid: res.data[i].red_team_id,\n                        redTeamExist: true,\n                        \n                    })\n                }\n            }\n        })\n\n        axios.get('http://127.0.0.1:8000/codenames/blueTeam').then(res => {\n            for(let i = 0; i < res.data.length; i++) {\n                if(res.data[i].game_id === gameid) {\n                    this.setState({\n                        blueteamid: res.data[i].blue_team_id,\n                        blueTeamExist: true,\n                        \n                    })\n                }\n            }\n        })\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    setRed = () => {\n        this.setState({\n            team: 'R'\n        })\n    }\n\n    setBlue = () => {\n        this.setState({\n            team: 'B'\n        })\n    }\n \n    submitUserInfo = () => {        \n        if(this.state.room_key !== null && this.state.nickname.length > 0 && this.state.team !== null && this.state.task !== null) {\n            if((this.state.team === 'R' && this.state.task === 'S' && this.state.redTeamSpyMaster === false) || \n               (this.state.team === 'B' && this.state.task === 'S' && this.state.blueTeamSpyMaster === false) || \n               (this.state.task === 'O')) {\n                // Socket send here if task is S \n                if (this.state.task === 'S') {\n                    if (this.state.team === 'R') {\n                        this.setState(prevState => {\n                            return {\n                                redTeamSpyMaster: true\n                            }\n                        })\n                    }\n                    else if (this.state.team === 'B') {\n                        this.setState(prevState => {\n                            return {\n                                blueTeamSpyMaster: true\n                            }\n                        })\n                    }\n                    var data = {\n                        \"spymasterTeam\": this.state.team,\n                        \"exists\": true\n                    }\n                    // this.state.userinfoWS.send(JSON.stringify(data)) // send to channel\n                    console.log(data)\n                }\n                axios.post('http://127.0.0.1:8000/codenames/userInfo', {\n                    connected_room_key:this.props.location.state.room_key,\n                    nickname: this.state.nickname, \n                    team: this.state.team,\n                    task: this.state.task\n                })\n                .then(response => {\n                    this.setState({\n                        playerid: response.data.id\n                    })\n                    this.createGame()\n                })\n                .catch(error => {\n                    console.log(error)\n                })\n            }\n        }\n    }\n\n\n    createGame = async () => {\n        if (this.state.redTeamExist === false) {\n            await axios.post('http://127.0.0.1:8000/codenames/redTeam', {\n                game_id: this.state.gameid,\n                connected_room_key: this.state.roomid\n            }).then(response => {\n                this.setState({\n                    redteamid: response.data.red_team_id\n                })\n                \n            })\n            .catch(error => {\n                console.log(error)\n            }) \n        }\n        if (this.state.blueTeamExist === false) {\n            await axios.post('http://127.0.0.1:8000/codenames/blueTeam', {\n                game_id: this.state.gameid,\n                connected_room_key: this.state.roomid\n            }).then(response => {\n                this.setState({\n                    blueteamid: response.data.blue_team_id\n                })\n                \n            })\n            .catch(error => {\n                console.log(error)\n            })\n        }\n\n        this.setState({\n            redirect: true\n        })\n    }\n\n    renderRedirect = () => {\n        if(this.state.redirect){\n            return <Redirect to={{\n                pathname: '/game',\n                state: {\n                    room_key: this.state.room_key,\n                    roomid: this.state.roomid,\n                    nickname: this.state.nickname,\n                    team: this.state.team,\n                    task: this.state.task,\n                    gameid: this.state.gameid,\n                    gameData: this.state.gameData,\n                    gameWords: this.state.gameWords,\n                    playerid: this.state.playerid,\n                    redteamid: this.state.redteamid,\n                    blueteamid: this.state.blueteamid\n                    \n                }\n            }}/>\n        }\n    }\n\n    setSpy = () => {\n        this.setState({\n            task: 'S'\n        })\n    }\n\n    setOper = () => {\n        this.setState({\n            task: 'O'\n        })\n    }\n\n    /**\n     * @function connect\n     * This function establishes the connect with the websocket and also ensures \n     * constant reconnection if connection closes\n     */\n     connectUserInfo = () => {\n         // Using roomid instead of game id because that doesn't exist yet\n        var ws = new WebSocket('ws://localhost:8000/userinfo/userinfo/' + this.props.location.state.roomid + '/');\n        let that = this; // cache the this\n        var connectInterval;\n\n        // websocket onopen event listener\n        ws.onopen = () => {\n            console.log(\"connected websocket main component\");\n            this.setState({ userinfoWS: ws });\n\n            that.timeout = 250; // reset timer to 250 on open of websocket connection \n            clearTimeout(connectInterval); // clear Interval on on open of websocket connection\n        };\n\n        // websocket onclose event listener\n        ws.onclose = e => {\n            console.log(\n                `Socket is closed. Reconnect will be attempted in ${Math.min(\n                    10000 / 1000,\n                    (that.timeout + that.timeout) / 1000\n                )} second.`,\n                e.reason\n            );\n\n            that.timeout = that.timeout + that.timeout; //increment retry interval\n            connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\n        };\n\n        // websocket onerror event listener\n        ws.onerror = err => {\n            console.error(\n                \"Socket encountered error: \",\n                err.message,\n                \"Closing socket\"\n            );\n\n            ws.close();\n        };\n\n        ws.onmessage = evt => {\n            // listen to data sent from the websocket server\n            const data = JSON.parse(evt.data)\n            console.log(data)\n            console.log(\"received clue!\")\n            let spymasterTeam = data.spymasterTeam\n            let exists = data.exists\n            if (spymasterTeam === 'R' && this.state.redTeamSpyMaster !== exists) {\n                if (this.state.team === spymasterTeam) {\n                    this.setState(prevState => {\n                        return {\n                            redTeamSpyMaster: exists,\n                            task: 'O' // Another gameview claimed S on this team already\n                        }\n                    })\n                }\n                else {\n                    this.setState(prevState => {\n                        return {\n                            redTeamSpyMaster: exists\n                        }\n                    })\n                }\n            }\n            else if (spymasterTeam === 'B' && this.state.blueTeamSpyMaster !== exists) {\n                if (this.state.team === spymasterTeam) {\n                    this.setState(prevState => {\n                        return {\n                            blueTeamSpyMaster: exists,\n                            task: 'O'\n                        }\n                    })\n                }\n                else {\n                    this.setState(prevState => {\n                        return {\n                            blueTeamSpyMaster: exists\n                        }\n                    })\n                }\n            }\n        };\n        this.setState(prevState => {\n            return {\n                userinfoWS: ws\n            }\n        })\n    };\n\n    /**\n     * utilited by the @function connect to check if the connection is close, if so attempts to reconnect\n     */\n    checkUserInfo = () => {\n        const { ws } = this.state.ws;\n        if (!ws || ws.readyState === WebSocket.CLOSED) this.connectUserInfo(); //check if websocket instance is closed, if so call `connect` function.\n    };\n\n    \n    render() {\n\n        // const text = this.state.blue_team ? \"blue team\" : \"red Team\"\n        \n        return(\n            <div className=\"userInfo\">\n                <br />\n                <h6 className=\"gameCode\"> Game Code: {this.state.room_key} </h6>\n                <form className=\"container\">\n                    <div className=\"box-userInfo-left\">\n                        <label className=\"prompt\">Enter nickname</label><br/><br/>\n                        <input \n                        className=\"nickname\" \n                        value={this.state.nickname}\n                        name= \"nickname\"\n                        type=\"text\" \n                        placeholder=\"Nickname\" \n                        spellCheck=\"false\" \n                        onChange={this.handleChange}/><br/>\n                        <label className=\"prompt\">Select task</label><br/>\n                        {\n                            (((this.state.team === 'R') && (this.state.redTeamSpyMaster === false)) || ((this.state.team === 'B') && (this.state.blueTeamSpyMaster === false))) ? \n                            <button className=\"task\" type=\"button\" onClick={this.setSpy}>spymaster</button> : null\n                        }\n                        {/* <br/> */}\n                        <button className=\"task\" type=\"button\" onClick={this.setOper}>operator</button>\n\n                    </div>\n                    <div className=\"box-userInfo-right\">\n                        <label className=\"prompt\">Choose a team</label><br/>\n                        <input className=\"red\" type=\"button\" onClick={this.setRed}></input><br/>\n                        {/* <p>{text}</p> */}\n                        <input className=\"blue\" type=\"button\" onClick={this.setBlue}></input><br/>\n                        \n                    </div>\n                    {this.renderRedirect()}\n                    <button className=\"startBtn\" type=\"button\" onClick={this.submitUserInfo}>Start!</button>\n\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default UserInfo"]},"metadata":{},"sourceType":"module"}