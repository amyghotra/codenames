{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/micha/Codenames/codenames/codenames/src/Components/GamePage/Spymasters/SpymastersGame.js\";\nimport React, { Component } from 'react';\nimport Row from \"../Row/Row\";\nimport './SpymastersGame.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SpymastersGame extends Component {\n  // Still not 100% sure whether to change this to a class, or to just useState\n  constructor() {\n    super();\n\n    this.componentDidMount = () => {\n      this.connect();\n    };\n\n    this.socketSend = () => {\n      var data = {\n        \"count\": this.state.spymasterClueCount,\n        \"clue\": this.state.spymasterClueWord\n      };\n      this.state.ws.send(JSON.stringify(data)); // Testing send\n\n      console.log(data);\n    };\n\n    this.connect = () => {\n      var ws = new WebSocket('ws://localhost:8000/ws/game/');\n      let that = this; // cache the this\n\n      var connectInterval; // websocket onopen event listener\n\n      ws.onopen = () => {\n        console.log(\"connected websocket main component\");\n        this.setState({\n          ws: ws\n        });\n        that.timeout = 250; // reset timer to 250 on open of websocket connection \n\n        clearTimeout(connectInterval); // clear Interval on on open of websocket connection\n      }; // websocket onclose event listener\n\n\n      ws.onclose = e => {\n        console.log(`Socket is closed. Reconnect will be attempted in ${Math.min(10000 / 1000, (that.timeout + that.timeout) / 1000)} second.`, e.reason);\n        that.timeout = that.timeout + that.timeout; //increment retry interval\n\n        connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\n      }; // websocket onerror event listener\n\n\n      ws.onerror = err => {\n        console.error(\"Socket encountered error: \", err.message, \"Closing socket\");\n        ws.close();\n      };\n\n      ws.onmessage = evt => {\n        // listen to data sent from the websocket server\n        const data = JSON.parse(evt.data);\n        console.log(data);\n        console.log(\"received clue!\");\n        let count = data.count;\n        let clue = data.clue;\n        this.setState(prevState => {\n          return {\n            spymasterClueCount: count,\n            spymasterClueWord: clue\n          };\n        });\n      };\n\n      this.setState(prevState => {\n        return {\n          ws: ws\n        };\n      });\n    };\n\n    this.check = () => {\n      const {\n        ws\n      } = this.state.ws;\n      if (!ws || ws.readyState === WebSocket.CLOSED) this.connect(); //check if websocket instance is closed, if so call `connect` function.\n    };\n\n    this.componentDidUpdate = event => {\n      if (event.gameWords !== this.props.gameWords) {\n        this.setState(prevState => {\n          return {\n            gameWords: this.props.gameWords,\n            room_key: this.props.room_key,\n            gameid: this.props.gameid\n          };\n        });\n      }\n\n      if (event.playersdata !== this.props.playersdata) {\n        this.setState(prevState => {\n          return {\n            playersdata: this.props.playersdata\n          };\n        });\n      }\n    };\n\n    this.componentWillReceiveProps = players => {\n      this.setState({\n        playersdata: players.playersdata //renderPlayers: true,\n\n      }); //console.log(players)\n      // console.log(\"Checking how many times this will call the update players!\")\n\n      this.updatePlayers(players.playersdata);\n    };\n\n    this.handleGuessSubmit = () => {\n      console.log(this.state.spymasterClueWord, this.state.spymasterClueCount);\n    };\n\n    this.incrementClueCount = () => {\n      this.setState(prevState => {\n        // Update with inline function\n        return {\n          spymasterClueCount: prevState.spymasterClueCount + 1\n        };\n      });\n    };\n\n    this.decrementClueCount = () => {\n      this.setState(prevState => {\n        return {\n          spymasterClueCount: prevState.spymasterClueCount - 1\n        };\n      });\n    };\n\n    this.updatePlayers = players => {\n      //console.log('Update Players Called!');\n      let room_key = this.props.room_key; //let players = this.props.playersdata;\n      // console.log(\"Players data: \", players)\n      //if(this.state.renderPlayers === true){\n\n      for (let i = 0; i < players.length; i++) {\n        //console.log(\"Current Player: \", players[i])\n        if (players[i].room === room_key) {\n          if (players[i].role === \"S\") {\n            if (players[i].team === \"R\") {\n              //console.log(\"It went here [Red Spy]: \", players[i])\n              let redSpymasters = this.state.redSpymasters;\n              redSpymasters.push(players[i]);\n              this.setState({\n                redSpymasters\n              });\n            } else if (players[i].team === \"B\") {\n              //console.log(\"It went here [Blue Spy]: \", players[i])\n              let blueSpymasters = this.state.blueSpymasters;\n              blueSpymasters.push(players[i]);\n              this.setState({\n                blueSpymasters\n              });\n            }\n          } else if (players[i].role === \"O\") {\n            if (players[i].team === \"R\") {\n              //console.log(\"It went here [Red Op]: \", players[i])\n              let redOperatives = this.state.redOperatives;\n              redOperatives.push(players[i]);\n              this.setState({\n                redOperatives\n              });\n            } else if (players[i].team === \"B\") {\n              //console.log(\"It went here [Blue Op]: \", players[i])\n              let blueOperatives = this.state.blueOperatives;\n              blueOperatives.push(players[i]);\n              this.setState({\n                blueOperatives\n              });\n            }\n          }\n        }\n      } //}\n\n\n      this.deleteRepeated();\n    };\n\n    this.deleteRepeated = () => {\n      let redOperatives = this.state.redOperatives;\n      let redSpymasters = this.state.redSpymasters;\n      let blueOperatives = this.state.blueOperatives;\n      let blueSpymasters = this.state.blueSpymasters;\n      let showredOperatives = this.state.showredOperatives;\n      let showredSpymasters = this.state.showredSpymasters;\n      let showblueOperatives = this.state.showblueOperatives;\n      let showblueSpymasters = this.state.showblueSpymasters; //Red Operatives\n\n      for (let i = 0; i < redOperatives.length; i++) {\n        let repeated = false;\n\n        for (let j = 0; j < showredOperatives.length; j++) {\n          if (redOperatives[i].player_id === showredOperatives[j].player_id) {\n            repeated = true;\n          }\n        }\n\n        if (repeated === false) {\n          showredOperatives.push(redOperatives[i]);\n          this.setState({\n            showredOperatives\n          });\n        }\n      } //end of for loop\n      //Red Spymasters\n\n\n      for (let i = 0; i < redSpymasters.length; i++) {\n        let repeated = false;\n\n        for (let j = 0; j < showredSpymasters.length; j++) {\n          if (redSpymasters[i].player_id === showredSpymasters[j].player_id) {\n            repeated = true;\n          }\n        }\n\n        if (repeated === false) {\n          showredSpymasters.push(redSpymasters[i]);\n          this.setState({\n            showredSpymasters\n          });\n        }\n      } //Blue Operative\n\n\n      for (let i = 0; i < blueOperatives.length; i++) {\n        let repeated = false;\n\n        for (let j = 0; j < showblueOperatives.length; j++) {\n          if (blueOperatives[i].player_id === showblueOperatives[j].player_id) {\n            repeated = true;\n          }\n        }\n\n        if (repeated === false) {\n          showblueOperatives.push(blueOperatives[i]);\n          this.setState({\n            showblueOperatives\n          });\n        }\n      } //Blue Spymasters\n\n\n      for (let i = 0; i < blueSpymasters.length; i++) {\n        let repeated = false;\n\n        for (let j = 0; j < showblueSpymasters.length; j++) {\n          if (blueSpymasters[i].player_id === showblueSpymasters[j].player_id) {\n            repeated = true;\n          }\n        }\n\n        if (repeated === false) {\n          showblueSpymasters.push(blueSpymasters[i]);\n          this.setState({\n            showblueSpymasters\n          });\n        }\n      }\n    };\n\n    this.state = {\n      room_key: '',\n      task: 'S',\n      gameid: '',\n      gameWords: '',\n      playersdata: '',\n      spymasterClueWord: '',\n      spymasterClueCount: 0,\n      redScore: 0,\n      blueScore: 0,\n      redteamid: '',\n      blueteamid: '',\n      //Helper Variables\n      redOperatives: [],\n      redSpymasters: [],\n      blueOperatives: [],\n      blueSpymasters: [],\n      renderPlayers: false,\n      //Show Variables\n      showredOperatives: [],\n      showredSpymasters: [],\n      showblueOperatives: [],\n      showblueSpymasters: [],\n      //Websocket\n      ws: null\n    }; // Need these statements since they set state - or use xxx = () => {}\n\n    this.incrementClueCount = this.incrementClueCount.bind(this);\n    this.decrementClueCount = this.decrementClueCount.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.socketSend = this.socketSend.bind(this);\n  }\n\n  // For changing state when elements are changed on the page by user\n  handleChange(event) {\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = event.target; // if the type just grabbed from the event is a checkbox, set the name of the event, \n    // which is named after an element in the state - so the element in the state - to \n    // the boolean checked, otherwise set [name], in state, to the value grabbed. \n\n    type === \"checkbox\" ? this.setState({\n      [name]: checked\n    }) : this.setState({\n      [name]: value\n    });\n  } // For handling the players' submitting their guesses / word picks\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n        children: \"SPYMASTERS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n        className: \"gameCode\",\n        children: [\" Game Code: \", this.props.room_key, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container-fluid\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-12\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"row\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-md-4\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"gameScores\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"redTeam\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n                        className: \"teamTitle\",\n                        children: \"Red Team\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 363,\n                        columnNumber: 45\n                      }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                        className: \"teamScore\",\n                        children: this.props.redPoints\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 364,\n                        columnNumber: 45\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 361,\n                      columnNumber: 41\n                    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 366,\n                      columnNumber: 41\n                    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 367,\n                      columnNumber: 41\n                    }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                      className: \"teamContent\",\n                      children: \" Spymasters:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 368,\n                      columnNumber: 41\n                    }, this), this.state.showredSpymasters.map((player, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                      className: \"bulletContent\",\n                      children: player.operative_screen_name\n                    }, index, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 370,\n                      columnNumber: 49\n                    }, this)), this.showRedSpymasters, /*#__PURE__*/_jsxDEV(\"h6\", {\n                      className: \"teamContent\",\n                      children: \" Operatives:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 374,\n                      columnNumber: 41\n                    }, this), this.state.showredOperatives.map((player, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                      className: \"bulletContent\",\n                      children: player.operative_screen_name\n                    }, index, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 376,\n                      columnNumber: 49\n                    }, this))]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 360,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 379,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"blueTeam\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n                        className: \"teamTitle\",\n                        children: \"Blue Team\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 382,\n                        columnNumber: 45\n                      }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                        className: \"teamScore\",\n                        children: this.props.bluePoints\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 383,\n                        columnNumber: 45\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 381,\n                      columnNumber: 41\n                    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 385,\n                      columnNumber: 41\n                    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 386,\n                      columnNumber: 41\n                    }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                      className: \"teamContent\",\n                      children: \" Spymasters:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 387,\n                      columnNumber: 41\n                    }, this), this.state.showblueSpymasters.map((player, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                      className: \"bulletContent\",\n                      children: player.operative_screen_name\n                    }, index, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 389,\n                      columnNumber: 49\n                    }, this)), /*#__PURE__*/_jsxDEV(\"h6\", {\n                      className: \"teamContent\",\n                      children: \" Operatives:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 391,\n                      columnNumber: 41\n                    }, this), this.state.showblueOperatives.map((player, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                      className: \"bulletContent\",\n                      children: player.operative_screen_name\n                    }, index, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 393,\n                      columnNumber: 49\n                    }, this))]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 380,\n                    columnNumber: 37\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 359,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 358,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-md-7\",\n                children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"row\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"col-md-12\",\n                    children: [/*#__PURE__*/_jsxDEV(Row, {\n                      task: this.state.task,\n                      rowWords: [this.state.gameWords[0], this.state.gameWords[1], this.state.gameWords[2], this.state.gameWords[3], this.state.gameWords[4]],\n                      cardNumbers: [0, 1, 2, 3, 4] // Add in card numbers to distinguish\n                      ,\n                      increaseTeamPoints: this.props.increaseTeamPoints\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 402,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Row, {\n                      task: this.state.task,\n                      rowWords: [this.state.gameWords[5], this.state.gameWords[6], this.state.gameWords[7], this.state.gameWords[8], this.state.gameWords[9]],\n                      cardNumbers: [5, 6, 7, 8, 9],\n                      increaseTeamPoints: this.props.increaseTeamPoints\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 410,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Row, {\n                      task: this.state.task,\n                      rowWords: [this.state.gameWords[10], this.state.gameWords[11], this.state.gameWords[12], this.state.gameWords[13], this.state.gameWords[14]],\n                      cardNumbers: [10, 11, 12, 13, 14],\n                      increaseTeamPoints: this.props.increaseTeamPoints\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 418,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Row, {\n                      task: this.state.task,\n                      rowWords: [this.state.gameWords[15], this.state.gameWords[16], this.state.gameWords[17], this.state.gameWords[18], this.state.gameWords[19]],\n                      cardNumbers: [15, 16, 17, 18, 19],\n                      increaseTeamPoints: this.props.increaseTeamPoints\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 426,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Row, {\n                      task: this.state.task,\n                      rowWords: [this.state.gameWords[20], this.state.gameWords[21], this.state.gameWords[22], this.state.gameWords[23], this.state.gameWords[24]],\n                      cardNumbers: [20, 21, 22, 23, 24],\n                      increaseTeamPoints: this.props.increaseTeamPoints\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 434,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 400,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 399,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"row\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"col-md-12\",\n                    children: /*#__PURE__*/_jsxDEV(\"form\", {\n                      children: /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"spymasterClue\",\n                        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                          type: \"text\",\n                          value: this.state.spymasterClueWord,\n                          name: \"spymasterClueWord\" // Must be same name as state!\n                          ,\n                          placeholder: \"Type clue here\",\n                          onChange: this.handleChange\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 449,\n                          columnNumber: 53\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"counter\",\n                          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                            type: \"button\",\n                            onClick: this.incrementClueCount,\n                            children: \"+\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 458,\n                            columnNumber: 57\n                          }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                            children: this.state.spymasterClueCount\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 459,\n                            columnNumber: 57\n                          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                            type: \"button\",\n                            onClick: this.decrementClueCount,\n                            children: \"-\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 460,\n                            columnNumber: 57\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 456,\n                          columnNumber: 53\n                        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                          type: \"button\",\n                          onClick: this.socketSend\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 464,\n                          columnNumber: 53\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 448,\n                        columnNumber: 49\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 447,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 446,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 445,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 398,\n                columnNumber: 33\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default SpymastersGame;","map":{"version":3,"sources":["/mnt/c/Users/micha/Codenames/codenames/codenames/src/Components/GamePage/Spymasters/SpymastersGame.js"],"names":["React","Component","Row","SpymastersGame","constructor","componentDidMount","connect","socketSend","data","state","spymasterClueCount","spymasterClueWord","ws","send","JSON","stringify","console","log","WebSocket","that","connectInterval","onopen","setState","timeout","clearTimeout","onclose","e","Math","min","reason","setTimeout","check","onerror","err","error","message","close","onmessage","evt","parse","count","clue","prevState","readyState","CLOSED","componentDidUpdate","event","gameWords","props","room_key","gameid","playersdata","componentWillReceiveProps","players","updatePlayers","handleGuessSubmit","incrementClueCount","decrementClueCount","i","length","room","role","team","redSpymasters","push","blueSpymasters","redOperatives","blueOperatives","deleteRepeated","showredOperatives","showredSpymasters","showblueOperatives","showblueSpymasters","repeated","j","player_id","task","redScore","blueScore","redteamid","blueteamid","renderPlayers","bind","handleChange","name","value","type","checked","target","render","redPoints","map","player","index","operative_screen_name","showRedSpymasters","bluePoints","increaseTeamPoints"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Row from \"../Row/Row\"\nimport './SpymastersGame.css'\n\n\nclass SpymastersGame extends Component{ // Still not 100% sure whether to change this to a class, or to just useState\n    constructor() {\n        super()\n        this.state = {\n            room_key: '',\n            task: 'S',\n            gameid: '',\n            gameWords: '',\n            playersdata: '',\n            spymasterClueWord: '',\n            spymasterClueCount: 0,\n\n            redScore: 0,\n            blueScore: 0,\n\n            redteamid: '',\n            blueteamid: '',\n\n            //Helper Variables\n            redOperatives: [],\n            redSpymasters: [],\n            blueOperatives: [],\n            blueSpymasters: [],\n            renderPlayers: false,\n\n            //Show Variables\n            showredOperatives: [],\n            showredSpymasters: [],\n            showblueOperatives: [],\n            showblueSpymasters: [],\n\n            //Websocket\n            ws: null\n        }\n        // Need these statements since they set state - or use xxx = () => {}\n        this.incrementClueCount = this.incrementClueCount.bind(this);\n        this.decrementClueCount = this.decrementClueCount.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.socketSend = this.socketSend.bind(this);\n    }\n\n    componentDidMount = () => {\n        this.connect();\n    }\n\n    socketSend = () => {\n        var data = {\n            \"count\": this.state.spymasterClueCount,\n            \"clue\": this.state.spymasterClueWord\n        }\n        this.state.ws.send(JSON.stringify(data)) // Testing send\n        console.log(data)\n    }\n\n    /**\n     * @function connect\n     * This function establishes the connect with the websocket and also ensures \n     * constant reconnection if connection closes\n     */\n     connect = () => {\n        var ws = new WebSocket('ws://localhost:8000/ws/game/');\n        let that = this; // cache the this\n        var connectInterval;\n\n        // websocket onopen event listener\n        ws.onopen = () => {\n            console.log(\"connected websocket main component\");\n            this.setState({ ws: ws });\n\n            that.timeout = 250; // reset timer to 250 on open of websocket connection \n            clearTimeout(connectInterval); // clear Interval on on open of websocket connection\n        };\n\n        // websocket onclose event listener\n        ws.onclose = e => {\n            console.log(\n                `Socket is closed. Reconnect will be attempted in ${Math.min(\n                    10000 / 1000,\n                    (that.timeout + that.timeout) / 1000\n                )} second.`,\n                e.reason\n            );\n\n            that.timeout = that.timeout + that.timeout; //increment retry interval\n            connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\n        };\n\n        // websocket onerror event listener\n        ws.onerror = err => {\n            console.error(\n                \"Socket encountered error: \",\n                err.message,\n                \"Closing socket\"\n            );\n\n            ws.close();\n        };\n\n        ws.onmessage = evt => {\n            // listen to data sent from the websocket server\n            const data = JSON.parse(evt.data)\n            console.log(data)\n            console.log(\"received clue!\")\n            let count = data.count\n            let clue = data.clue\n            this.setState(prevState => {\n                return {\n                    spymasterClueCount: count,\n                    spymasterClueWord: clue\n                }\n            })\n        };\n        this.setState(prevState => {\n            return {\n                ws: ws\n            }\n        })\n    };\n\n    /**\n     * utilited by the @function connect to check if the connection is close, if so attempts to reconnect\n     */\n    check = () => {\n        const { ws } = this.state.ws;\n        if (!ws || ws.readyState === WebSocket.CLOSED) this.connect(); //check if websocket instance is closed, if so call `connect` function.\n    };\n\n\n    /*\n        states affected: \n            gameWords\n        what it does: \n            The first parameter for this method is gameWords before the update; so, testing \n            whether it has changed is done here. If it has changed then it will update the \n            gameWords to how the game component has them. \n    */\n    componentDidUpdate = (event) => {\n\n        if (event.gameWords !== this.props.gameWords) {\n            this.setState(prevState => {\n                return {\n                    gameWords: this.props.gameWords,\n                    room_key: this.props.room_key,\n                    gameid: this.props.gameid\n                }\n            })\n        }\n\n        if(event.playersdata !== this.props.playersdata){\n            this.setState(prevState =>{\n                return{\n                    playersdata: this.props.playersdata\n                }\n            })\n        }\n    }\n\n    /*This one will call updatePlayers twice therefore adds it twice but will show normal when refreshed. \n        =>Fixed with the deleteRepeated() function    \n    */\n    componentWillReceiveProps = (players) => {\n        this.setState({\n            playersdata: players.playersdata,\n            //renderPlayers: true,\n        })\n        //console.log(players)\n\n        // console.log(\"Checking how many times this will call the update players!\")\n        this.updatePlayers(players.playersdata)\n    }\n\n    // For changing state when elements are changed on the page by user\n\n    handleChange(event) {\n        const {name, value, type, checked} = event.target\n        // if the type just grabbed from the event is a checkbox, set the name of the event, \n        // which is named after an element in the state - so the element in the state - to \n        // the boolean checked, otherwise set [name], in state, to the value grabbed. \n        type === \"checkbox\" ? this.setState({ [name]: checked }) : this.setState({ [name]: value })\n\n    }\n    \n    // For handling the players' submitting their guesses / word picks\n    handleGuessSubmit = () => {\n        console.log(this.state.spymasterClueWord, this.state.spymasterClueCount)\n    }\n    incrementClueCount = () => {\n        this.setState(prevState => { // Update with inline function\n            return {\n                spymasterClueCount: prevState.spymasterClueCount + 1\n            }\n        })\n    }\n    decrementClueCount = () => {\n        this.setState(prevState => {\n            return {\n                spymasterClueCount: prevState.spymasterClueCount - 1\n            }\n        })\n    }\n\n    /*Issues: Being called twice so it adds double the amount until you refresh the page.\n        =>Fixed with the deleteRepeated() function    \n    */\n    updatePlayers = (players) => {\n        //console.log('Update Players Called!');\n        let room_key = this.props.room_key;\n        //let players = this.props.playersdata;\n        // console.log(\"Players data: \", players)\n        //if(this.state.renderPlayers === true){\n\n        for(let i = 0; i < players.length; i++){\n            //console.log(\"Current Player: \", players[i])\n            if(players[i].room === room_key){\n                if(players[i].role === \"S\" ){\n                    if(players[i].team === \"R\"){\n                        //console.log(\"It went here [Red Spy]: \", players[i])\n                        let redSpymasters = this.state.redSpymasters\n                        redSpymasters.push(players[i])\n                        this.setState({\n                            redSpymasters,\n                        })\n                        \n                    }\n                    else if(players[i].team === \"B\"){\n                        //console.log(\"It went here [Blue Spy]: \", players[i])\n                        let blueSpymasters = this.state.blueSpymasters\n                        blueSpymasters.push(players[i])\n                        this.setState({\n                            blueSpymasters\n                        })\n                        \n                    }\n                }\n                else if(players[i].role === \"O\"){\n                    if(players[i].team === \"R\"){\n                        //console.log(\"It went here [Red Op]: \", players[i])\n                        let redOperatives = this.state.redOperatives\n                        redOperatives.push(players[i])\n                        this.setState({\n                            redOperatives\n                        })\n                        \n                    }\n                    else if(players[i].team === \"B\"){\n                        //console.log(\"It went here [Blue Op]: \", players[i])\n                        let blueOperatives = this.state.blueOperatives\n                        blueOperatives.push(players[i])\n                        this.setState({\n                            blueOperatives\n                        })\n                        \n                    }\n                    \n                }\n            \n            }\n        }\n        //}\n\n        this.deleteRepeated()\n    }\n\n    //This fixes the issue of having repeated players on intial load. \n    deleteRepeated = ()=> {\n        let redOperatives = this.state.redOperatives\n        let redSpymasters = this.state.redSpymasters\n        let blueOperatives = this.state.blueOperatives\n        let blueSpymasters = this.state.blueSpymasters\n        let showredOperatives = this.state.showredOperatives\n        let showredSpymasters = this.state.showredSpymasters\n        let showblueOperatives = this.state.showblueOperatives\n        let showblueSpymasters = this.state.showblueSpymasters\n\n        //Red Operatives\n        for (let i = 0; i < redOperatives.length; i++){\n            let repeated = false;\n            for (let j = 0; j < showredOperatives.length; j++){\n                if(redOperatives[i].player_id === showredOperatives[j].player_id){\n                    repeated = true\n                }\n            }\n            if (repeated === false){\n                showredOperatives.push(redOperatives[i])\n                this.setState({\n                    showredOperatives\n                })\n            }\n        }//end of for loop\n\n        //Red Spymasters\n        for (let i = 0; i < redSpymasters.length; i++){\n            let repeated = false;\n            for (let j = 0; j < showredSpymasters.length; j++){\n                if(redSpymasters[i].player_id === showredSpymasters[j].player_id){\n                    repeated = true\n                }\n            }\n            if (repeated === false){\n                showredSpymasters.push(redSpymasters[i])\n                this.setState({\n                    showredSpymasters\n                })\n            }\n        }\n\n        //Blue Operative\n        for (let i = 0; i < blueOperatives.length; i++){\n            let repeated = false;\n            for (let j = 0; j < showblueOperatives.length; j++){\n                if(blueOperatives[i].player_id === showblueOperatives[j].player_id){\n                    repeated = true\n                }\n            }\n            if (repeated === false){\n                showblueOperatives.push(blueOperatives[i])\n                this.setState({\n                    showblueOperatives\n                })\n            }\n        }\n\n        //Blue Spymasters\n        for (let i = 0; i < blueSpymasters.length; i++){\n            let repeated = false;\n            for (let j = 0; j < showblueSpymasters.length; j++){\n                if(blueSpymasters[i].player_id === showblueSpymasters[j].player_id){\n                    repeated = true\n                }\n            }\n            if (repeated === false){\n                showblueSpymasters.push(blueSpymasters[i])\n                this.setState({\n                    showblueSpymasters\n                })\n            }\n        }\n\n    }\n\n    render() {\n\n\n    return(\n        <div className=\"game\">\n            <br />\n            <h6>SPYMASTERS</h6>\n            <h6 className=\"gameCode\"> Game Code: {this.props.room_key} </h6>\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <div className=\"row\">\n                            <div className=\"col-md-4\">\n                                <div className=\"gameScores\">\n                                    <div className=\"redTeam\">\n                                        <div>\n                                    \n                                            <h6 className=\"teamTitle\">Red Team</h6>\n                                            <h6 className=\"teamScore\">{this.props.redPoints}</h6>\n                                        </div>\n                                        <br />\n                                        <br />\n                                        <h6 className=\"teamContent\"> Spymasters:</h6>\n                                            {this.state.showredSpymasters.map((player, index) => (\n                                                <li className=\"bulletContent\" key={index}>{player.operative_screen_name}</li>\n                                            ))}\n                                            {this.showRedSpymasters}\n                                        \n                                        <h6 className=\"teamContent\"> Operatives:</h6>\n                                            {this.state.showredOperatives.map((player, index )=> (\n                                                <li className=\"bulletContent\" key={index}>{player.operative_screen_name}</li>\n                                            ))}\n                                    </div>\n                                    <br />\n                                    <div className=\"blueTeam\">\n                                        <div>\n                                            <h6 className=\"teamTitle\">Blue Team</h6>\n                                            <h6 className=\"teamScore\">{this.props.bluePoints}</h6>\n                                        </div>\n                                        <br />\n                                        <br />\n                                        <h6 className=\"teamContent\"> Spymasters:</h6>\n                                            {this.state.showblueSpymasters.map((player, index) => (\n                                                <li className=\"bulletContent\" key={index}>{player.operative_screen_name}</li>\n                                            ))}\n                                        <h6 className=\"teamContent\"> Operatives:</h6>\n                                            {this.state.showblueOperatives.map((player, index)=> (\n                                                <li className=\"bulletContent\" key={index}>{player.operative_screen_name}</li>\n                                            ))}\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"col-md-7\"> {/* Changed back to div from a form */}\n                                    <div className=\"row\">\n                                        <div className=\"col-md-12\">\n\n                                            <Row task={this.state.task}\n                                                rowWords={[this.state.gameWords[0],\n                                                this.state.gameWords[1],\n                                                this.state.gameWords[2],\n                                                this.state.gameWords[3],\n                                                this.state.gameWords[4]]}\n                                                cardNumbers={[0,1,2,3,4]} // Add in card numbers to distinguish\n                                                increaseTeamPoints={this.props.increaseTeamPoints} />\n                                            <Row task={this.state.task}\n                                                rowWords={[this.state.gameWords[5],\n                                                this.state.gameWords[6],\n                                                this.state.gameWords[7],\n                                                this.state.gameWords[8],\n                                                this.state.gameWords[9]]}\n                                                cardNumbers={[5,6,7,8,9]}\n                                                increaseTeamPoints={this.props.increaseTeamPoints} />\n                                            <Row task={this.state.task}\n                                                rowWords={[this.state.gameWords[10],\n                                                this.state.gameWords[11],\n                                                this.state.gameWords[12],\n                                                this.state.gameWords[13],\n                                                this.state.gameWords[14]]}\n                                                cardNumbers={[10,11,12,13,14]}\n                                                increaseTeamPoints={this.props.increaseTeamPoints} />\n                                            <Row task={this.state.task}\n                                                rowWords={[this.state.gameWords[15],\n                                                this.state.gameWords[16],\n                                                this.state.gameWords[17],\n                                                this.state.gameWords[18],\n                                                this.state.gameWords[19]]}\n                                                cardNumbers={[15,16,17,18,19]}\n                                                increaseTeamPoints={this.props.increaseTeamPoints} />\n                                            <Row task={this.state.task}\n                                                rowWords={[this.state.gameWords[20],\n                                                this.state.gameWords[21],\n                                                this.state.gameWords[22],\n                                                this.state.gameWords[23],\n                                                this.state.gameWords[24]]}\n                                                cardNumbers={[20,21,22,23,24]}\n                                                increaseTeamPoints={this.props.increaseTeamPoints} />\n\n                                        </div>\n                                    </div>\n                                    <div className=\"row\">\n                                        <div className=\"col-md-12\">\n                                            <form>\n                                                <div className=\"spymasterClue\">\n                                                    <input\n                                                        type=\"text\"\n                                                        value={this.state.spymasterClueWord}\n                                                        name=\"spymasterClueWord\" // Must be same name as state!\n                                                        placeholder=\"Type clue here\"\n                                                        onChange={this.handleChange}\n                                                    />\n                                                    <div className=\"counter\">\n                                                        {/* type = \"button\" to NOT make it submit the form */}\n                                                        <button type=\"button\" onClick={this.incrementClueCount}>+</button>\n                                                        <h6>{this.state.spymasterClueCount}</h6>\n                                                        <button type=\"button\" onClick={this.decrementClueCount}>-</button>\n                                                    </div>\n\n                                                    {/* <input type=\"button\" onClick={this.socketSend}>Submit Clue</input> */}\n                                                    <input type=\"button\" onClick={this.socketSend}/>\n\n                                                </div>\n                                            </form>\n                                        </div>\n                                    </div>\n                                </div> {/* Changed back to div from a form */}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default SpymastersGame\n"]},"metadata":{},"sourceType":"module"}