{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/micha/Codenames/codenames/codenames/src/Components/GamePage/Card/Card.js\";\nimport React, { Component } from \"react\";\nimport \"./Card.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Card extends Component {\n  constructor(props) {\n    super(props);\n\n    this.socketSend = () => {\n      var data = {\n        \"number\": this.props.number,\n        // used props instead of state, states not setting\n        \"checked\": true //this.state.checked // Hard coded to true, it'll never be false ?\n\n      };\n      this.state.ws.send(JSON.stringify(data)); // Testing send\n\n      console.log(data);\n    };\n\n    this.componentDidMount = () => {};\n\n    this.componentDidUpdate = event => {\n      if (event.word !== this.props.word) {\n        this.setState(prevState => {\n          return {\n            content: this.props.word,\n            task: this.props.task,\n            team: this.state.team,\n            turn: this.state.turn,\n            number: this.props.number,\n            // Not setting number ?\n            gameid: this.props.gameid\n          };\n        });\n\n        if (this.props.word.category === 'A' || this.props.word.category === 'R' || this.props.word.category === 'B' || this.props.word.category === 'C') {\n          let wordGuessed = localStorage.getItem(this.props.word.word_id);\n          this.setState({\n            checked: wordGuessed\n          });\n        } //Deleted this.props.task === \"O\" && so that the spymasters could also get the websocket of the words taht were checked.\n\n\n        if (this.state.ws === null) {\n          this.connect();\n        }\n      }\n    };\n\n    this.connect = () => {\n      var ws = new WebSocket('ws://localhost:8000/checkbox/checkbox/' + this.props.number + '/' + this.props.gameid + '/');\n      let that = this; // cache the this\n\n      var connectInterval; // websocket onopen event listener\n\n      ws.onopen = () => {\n        console.log(\"connected websocket main component\");\n        this.setState({\n          ws: ws\n        });\n        that.timeout = 250; // reset timer to 250 on open of websocket connection \n\n        clearTimeout(connectInterval); // clear Interval on on open of websocket connection\n      }; // websocket onclose event listener\n\n\n      ws.onclose = e => {\n        console.log(`Socket is closed. Reconnect will be attempted in ${Math.min(10000 / 1000, (that.timeout + that.timeout) / 1000)} second.`, e.reason);\n        that.timeout = that.timeout + that.timeout; // increment retry interval\n\n        connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); // call check function after timeout\n      }; // websocket onerror event listener\n\n\n      ws.onerror = err => {\n        console.error(\"Socket encountered error: \", err.message, \"Closing socket\");\n        ws.close();\n      };\n\n      ws.onmessage = evt => {\n        // listen to data sent from the websocket server\n        const data = JSON.parse(evt.data);\n        console.log(data);\n        console.log(\"received check!\");\n        let number = data.number;\n        let checked = data.checked;\n\n        if (number === this.props.number && this.state.checked !== true) {\n          // Using props instead of state again\n          this.setState(prevState => {\n            return {\n              checked: checked\n            };\n          });\n        }\n      };\n\n      this.setState(prevState => {\n        return {\n          ws: ws\n        };\n      });\n    };\n\n    this.check = () => {\n      const {\n        ws\n      } = this.state.ws;\n      if (!ws || ws.readyState === WebSocket.CLOSED) this.connect(); // Check if websocket instance is closed, if so call `connect` function.\n    };\n\n    this.handleChange = e => {\n      if (this.props.currentAllowedPlayer !== null && this.props.currentAllowedPlayer.user_id !== null) {\n        if (!this.state.checked && this.props.currentAllowedPlayer.user_id === this.props.thisPlayer) {\n          this.setState({\n            checked: true,\n            turn: !this.state.turn\n          });\n          console.log(this.state.checked);\n          this.props.increaseTeamPoints(this.state.content.category, this.state.content.word_id); // Moved to Socket's onmessage\n\n          localStorage.setItem(this.state.content.word_id, JSON.stringify(true));\n          this.socketSend();\n        }\n      } else {\n        e.target.checked = false;\n        this.setState({\n          checked: false\n        });\n      }\n    };\n\n    this.state = {\n      checked: false,\n      task: '',\n      team: '',\n      content: '',\n      turn: true,\n      // true = blue turn && false = red turn\n      redteamid: '',\n      blueteamid: '',\n      gameid: '',\n      // WebSocket\n      ws: null,\n      number: 0,\n      // Need to get number of card from props, can just pass it in from the game page when calling Row\n      // So all checkboxes should check with one check for right now\n      winningTeam: ''\n    };\n    this.socketSend = this.socketSend.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.state.task === 'O' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-deck\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-style\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"checkboxStructure\",\n            id: \"checkbox\",\n            type: \"checkbox\",\n            checked: this.state.checked,\n            disabled: this.props.currentAllowedPlayer && this.props.thisPlayer !== this.props.currentAllowedPlayer.user_id || this.props.currentAllowedPlayer && this.props.thisPlayer === this.props.currentAllowedPlayer.user_id && this.props.spymasterClueWord === 'WAITING FOR CLUE...' // disabled = {false}\n            ,\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 59\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n            children: !this.state.checked ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                className: \"card-text\",\n                children: this.state.content.word\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 89\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 29\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                className: `card-text-${this.state.content.category}`,\n                children: this.state.content.word\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 122\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          className: `card-deck-${this.state.content.category}`,\n          children: this.state.content.word\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }, this), this.state.task === 'O' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: !this.state.checked ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-deck\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"checkboxStructure\",\n            id: \"checkbox\",\n            type: \"checkbox\",\n            name: \"checkbox\",\n            checked: this.state.checked,\n            disabled: this.props.currentAllowedPlayer && this.props.thisPlayer !== this.props.currentAllowedPlayer.user_id || this.props.currentAllowedPlayer && this.props.thisPlayer === this.props.currentAllowedPlayer.user_id && this.props.spymasterClueWord === 'WAITING FOR CLUE...',\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"card-text\",\n            children: this.state.content.word\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 82\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `card-deck-${this.state.content.category}`,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"checkboxStructure\",\n            id: \"checkbox\",\n            type: \"checkbox\",\n            name: \"checkbox-checked\",\n            checked: this.state.checked,\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n            className: `card-text-${this.state.content.category}`,\n            children: this.state.content.word\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 115\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: !this.state.checked ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `card-deck-${this.state.content.category}`,\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n            children: this.state.content.word\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `card-deck-revealed-${this.state.content.category}`,\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n            children: this.state.content.word\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Card;","map":{"version":3,"sources":["/mnt/c/Users/micha/Codenames/codenames/codenames/src/Components/GamePage/Card/Card.js"],"names":["React","Component","Card","constructor","props","socketSend","data","number","state","ws","send","JSON","stringify","console","log","componentDidMount","componentDidUpdate","event","word","setState","prevState","content","task","team","turn","gameid","category","wordGuessed","localStorage","getItem","word_id","checked","connect","WebSocket","that","connectInterval","onopen","timeout","clearTimeout","onclose","e","Math","min","reason","setTimeout","check","onerror","err","error","message","close","onmessage","evt","parse","readyState","CLOSED","handleChange","currentAllowedPlayer","user_id","thisPlayer","increaseTeamPoints","setItem","target","redteamid","blueteamid","winningTeam","bind","render","spymasterClueWord"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Card.css\"\n\n\n\nclass Card extends Component{\n    constructor(props) {\n        super(props)\n        this.state = {\n            checked: false,\n            task: '',\n            team: '',\n            content: '',\n            turn: true, // true = blue turn && false = red turn\n            redteamid: '',\n            blueteamid: '',\n            gameid: '',\n\n            // WebSocket\n            ws: null,\n            number: 0, // Need to get number of card from props, can just pass it in from the game page when calling Row\n            // So all checkboxes should check with one check for right now\n\n            winningTeam: '',\n        }\n        this.socketSend = this.socketSend.bind(this);\n    }\n\n    socketSend = () => {\n        var data = {\n            \"number\": this.props.number, // used props instead of state, states not setting\n            \"checked\": true //this.state.checked // Hard coded to true, it'll never be false ?\n        }\n        this.state.ws.send(JSON.stringify(data)) // Testing send\n        console.log(data)\n    }\n    \n    componentDidMount = () => {\n    }\n\n    componentDidUpdate = (event) => {\n        if (event.word !== this.props.word) {\n            this.setState(prevState => {\n                return {\n                    content: this.props.word,\n                    task: this.props.task,\n                    team: this.state.team,\n                    turn: this.state.turn,\n                    number: this.props.number, // Not setting number ?\n                    gameid: this.props.gameid\n                }\n            })\n\n            if(this.props.word.category === 'A' || this.props.word.category === 'R' || this.props.word.category === 'B'|| this.props.word.category === 'C') {\n                let wordGuessed = localStorage.getItem(this.props.word.word_id);\n                this.setState({\n                    checked: wordGuessed\n                })\n            }\n            //Deleted this.props.task === \"O\" && so that the spymasters could also get the websocket of the words taht were checked.\n            if (this.state.ws === null) {\n                this.connect();\n            }\n        }\n    }\n\n    /*\n     * @function connect\n     * This function establishes the connect with the websocket and also ensures \n     * constant reconnection if connection closes\n    */\n    connect = () => {\n        var ws = new WebSocket('ws://localhost:8000/checkbox/checkbox/' \n                                + this.props.number + '/' + this.props.gameid + '/'); \n        let that = this; // cache the this\n        var connectInterval;\n\n        // websocket onopen event listener\n        ws.onopen = () => {\n            console.log(\"connected websocket main component\");\n            this.setState({ ws: ws });\n\n            that.timeout = 250; // reset timer to 250 on open of websocket connection \n            clearTimeout(connectInterval); // clear Interval on on open of websocket connection\n        };\n\n        // websocket onclose event listener\n        ws.onclose = e => {\n            console.log(\n                `Socket is closed. Reconnect will be attempted in ${Math.min(\n                    10000 / 1000,\n                    (that.timeout + that.timeout) / 1000\n                )} second.`,\n                e.reason\n            );\n\n            that.timeout = that.timeout + that.timeout; // increment retry interval\n            connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); // call check function after timeout\n        };\n\n        // websocket onerror event listener\n        ws.onerror = err => {\n            console.error(\n                \"Socket encountered error: \",\n                err.message,\n                \"Closing socket\"\n            );\n\n            ws.close();\n        };\n\n        ws.onmessage = evt => {\n            // listen to data sent from the websocket server\n            const data = JSON.parse(evt.data)\n            console.log(data)\n            console.log(\"received check!\")\n            let number = data.number\n            let checked = data.checked\n            if (number === this.props.number && this.state.checked !== true) { // Using props instead of state again\n                this.setState(prevState => {\n                    return {\n                        checked: checked\n                    }\n                })\n            }\n        };\n        this.setState(prevState => {\n            return {\n                ws: ws\n            }\n        })\n    };\n\n    /**\n     * utilited by the @function connect to check if the connection is close, if so attempts to reconnect\n     */\n    check = () => {\n        const { ws } = this.state.ws;\n        if (!ws || ws.readyState === WebSocket.CLOSED) this.connect(); \n        // Check if websocket instance is closed, if so call `connect` function.\n    };\n\n    handleChange = (e) => {\n\n        if(this.props.currentAllowedPlayer !== null && this.props.currentAllowedPlayer.user_id !== null) {\n            if(!this.state.checked && this.props.currentAllowedPlayer.user_id === this.props.thisPlayer) {\n                this.setState({\n                    checked: true,\n                    turn: !this.state.turn            \n                })\n                console.log(this.state.checked)\n                this.props.increaseTeamPoints(this.state.content.category, this.state.content.word_id) // Moved to Socket's onmessage\n                localStorage.setItem(this.state.content.word_id, JSON.stringify(true))\n                this.socketSend() \n            }\n        } else { \n            e.target.checked = false\n            this.setState({\n                checked: false      \n            })\n        }\n\n    }\n    \n\n    render(){\n        return(\n            <div>\n\n                {(this.state.task === 'O') ?\n                <div>\n                    <div className=\"card-deck\">\n                        <div className=\"card-style\"></div>    \n                        <input  className = \"checkboxStructure\"\n                            id = \"checkbox\"\n                            type = \"checkbox\"\n                            checked = {this.state.checked}\n                            disabled = {(this.props.currentAllowedPlayer && \n                                this.props.thisPlayer !== this.props.currentAllowedPlayer.user_id) || \n                                (this.props.currentAllowedPlayer && \n                                this.props.thisPlayer === this.props.currentAllowedPlayer.user_id && \n                                this.props.spymasterClueWord === 'WAITING FOR CLUE...')}\n                            // disabled = {false}\n                            onChange={this.handleChange}/><br/> {/* onChange */}\n                        <div>\n                            {(!this.state.checked) ?\n                            <div>\n                                <h5 className=\"card-text\">{this.state.content.word}</h5><br/>\n                            </div>\n                            :\n                            <div>\n                                <h5 className={`card-text-${this.state.content.category}`}>{this.state.content.word}</h5><br/>\n                            </div>\n                            }\n                        </div>\n                    </div>\n                </div>\n                :\n                <div>\n                    <br/>\n                    <h5 className={`card-deck-${this.state.content.category}`} >{this.state.content.word}</h5>\n                    <br/>\n                </div>\n                }\n\n                {/* dfjhgkjdfhgkjdhgkjhdkjghdkfjhgk */}\n\n                {(this.state.task === 'O') ?\n                <div>\n                    {(!this.state.checked) ?\n                    <div className=\"card-deck\">\n                        <input  className = \"checkboxStructure\"\n                                id = \"checkbox\"\n                                type = \"checkbox\"\n                                name = \"checkbox\"\n                                checked = {this.state.checked}\n                                disabled = {(this.props.currentAllowedPlayer && \n                                    this.props.thisPlayer !== this.props.currentAllowedPlayer.user_id) || \n                                    (this.props.currentAllowedPlayer && \n                                    this.props.thisPlayer === this.props.currentAllowedPlayer.user_id && \n                                    this.props.spymasterClueWord === 'WAITING FOR CLUE...')}\n                                onChange={this.handleChange}/>\n                                <br/> \n                        <h5 className=\"card-text\" >{this.state.content.word}</h5><br/>\n                    </div>\n                    :\n                    <div className={`card-deck-${this.state.content.category}`}>\n                        <input  className = \"checkboxStructure\"\n                                id = \"checkbox\"\n                                type = \"checkbox\"\n                                name=\"checkbox-checked\"\n                                checked = {this.state.checked}\n                                onChange={this.handleChange}/>\n                                <br/> \n\n                        <h5 className={`card-text-${this.state.content.category}`} >{this.state.content.word}</h5><br/>\n                    </div>\n                    }\n\n                </div>\n\n                :\n                \n                <div>\n                {(!this.state.checked) ?\n                <div className={`card-deck-${this.state.content.category}`}>\n                    <br/>\n                    <h5>{this.state.content.word}</h5>\n                    <br/>\n                </div>\n                :\n                <div className={`card-deck-revealed-${this.state.content.category}`}>\n                    <br/>\n                    <h5>{this.state.content.word}</h5>\n                    <br/>\n                </div>\n                }\n                </div>\n                }\n                \n\n            </div>\n        )\n    }\n}\n\nexport default Card"]},"metadata":{},"sourceType":"module"}