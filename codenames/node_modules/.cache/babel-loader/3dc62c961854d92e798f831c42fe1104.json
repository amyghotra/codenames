{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/micha/Codenames/codenames/codenames/src/Components/GamePage/Spymasters/SpymastersGame.js\";\nimport React, { Component } from 'react';\nimport Row from \"../Row/Row\";\nimport './SpymastersGame.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SpymastersGame extends Component {\n  // Still not 100% sure whether to change this to a class, or to just useState\n  constructor() {\n    super();\n\n    this.componentDidMount = () => {};\n\n    this.socketSend = () => {\n      var data = {\n        \"count\": this.state.spymasterClueCount,\n        \"clue\": this.state.spymasterClueWord\n      };\n      this.state.ws.send(JSON.stringify(data)); // send to channel\n\n      console.log(data);\n    };\n\n    this.connect = () => {\n      var ws = new WebSocket('ws://localhost:8000/cluebox/cluebox/' + this.props.gameid + '/');\n      let that = this; // cache the this\n\n      var connectInterval; // websocket onopen event listener\n\n      ws.onopen = () => {\n        console.log(\"connected websocket main component\");\n        this.setState({\n          ws: ws\n        });\n        that.timeout = 250; // reset timer to 250 on open of websocket connection \n\n        clearTimeout(connectInterval); // clear Interval on on open of websocket connection\n      }; // websocket onclose event listener\n\n\n      ws.onclose = e => {\n        console.log(`Socket is closed. Reconnect will be attempted in ${Math.min(10000 / 1000, (that.timeout + that.timeout) / 1000)} second.`, e.reason);\n        that.timeout = that.timeout + that.timeout; //increment retry interval\n\n        connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\n      }; // websocket onerror event listener\n\n\n      ws.onerror = err => {\n        console.error(\"Socket encountered error: \", err.message, \"Closing socket\");\n        ws.close();\n      };\n\n      ws.onmessage = evt => {\n        // listen to data sent from the websocket server\n        const data = JSON.parse(evt.data);\n        console.log(data);\n        console.log(\"received clue!\");\n        let count = data.count;\n        let clue = data.clue;\n        this.setState(prevState => {\n          return {\n            spymasterClueCount: count,\n            spymasterClueWord: clue\n          };\n        });\n      };\n\n      this.setState(prevState => {\n        return {\n          ws: ws\n        };\n      });\n    };\n\n    this.check = () => {\n      const {\n        ws\n      } = this.state.ws;\n      if (!ws || ws.readyState === WebSocket.CLOSED) this.connect(); //check if websocket instance is closed, if so call `connect` function.\n    };\n\n    this.componentDidUpdate = event => {\n      if (event.gameWords !== this.props.gameWords) {\n        this.setState(prevState => {\n          return {\n            gameWords: this.props.gameWords,\n            room_key: this.props.room_key,\n            gameid: this.props.gameid\n          };\n        });\n\n        if (this.state.ws === null) {\n          this.connect();\n        }\n      }\n\n      if (event.playersdata !== this.props.playersdata) {\n        this.setState(prevState => {\n          return {\n            playersdata: this.props.playersdata\n          };\n        });\n      } //Trigger Game Ready state\n\n\n      if (this.state.showredOperatives.length >= 1 && this.state.showblueOperatives.length >= 1 && this.state.showredSpymasters.length === 1 && this.state.showblueSpymasters.length === 1 && (this.props.agentClicked === true || this.props.gameWords[this.props.doubleAgentIndex].category !== 'D')) {\n        this.props.handleGameState(true);\n      }\n    };\n\n    this.componentWillReceiveProps = players => {\n      this.setState({\n        playersdata: players.playersdata //renderPlayers: true,\n\n      }); //console.log(players)\n\n      console.log(\"Checking how many times this will call the update players!\");\n      this.updatePlayers(players.playersdata);\n    };\n\n    this.handleGuessSubmit = () => {\n      console.log(this.state.spymasterClueWord, this.state.spymasterClueCount);\n    };\n\n    this.incrementClueCount = () => {\n      if (this.props.team === 'R') {\n        if (this.state.spymasterClueCount + 1 <= 8 - this.props.redPoints + (this.state.gameWords[this.props.doubleAgentIndex].category === 'R')) {\n          this.setState(prevState => {\n            // Update with inline function\n            return {\n              spymasterClueCount: prevState.spymasterClueCount + 1\n            };\n          });\n        }\n      } else if (this.props.team === 'B') {\n        if (this.state.spymasterClueCount + 1 <= 8 - this.props.bluePoints + (this.state.gameWords[this.props.doubleAgentIndex].category === 'B')) {\n          this.setState(prevState => {\n            // Update with inline function\n            return {\n              spymasterClueCount: prevState.spymasterClueCount + 1\n            };\n          });\n        }\n      }\n    };\n\n    this.decrementClueCount = () => {\n      if (this.state.spymasterClueCount - 1 >= 0) {\n        this.setState(prevState => {\n          return {\n            spymasterClueCount: prevState.spymasterClueCount - 1\n          };\n        });\n      }\n    };\n\n    this.updatePlayers = players => {\n      //console.log('Update Players Called!');\n      let room_key = this.props.room_key; //let players = this.props.playersdata;\n\n      console.log(\"Players data: \", players); //if(this.state.renderPlayers === true){\n\n      for (let i = 0; i < players.length; i++) {\n        //console.log(\"Current Player: \", players[i])\n        if (players[i].room === room_key) {\n          if (players[i].role === \"S\") {\n            if (players[i].team === \"R\") {\n              //console.log(\"It went here [Red Spy]: \", players[i])\n              let redSpymasters = this.state.redSpymasters;\n              redSpymasters.push(players[i]);\n              this.setState({\n                redSpymasters\n              });\n            } else if (players[i].team === \"B\") {\n              //console.log(\"It went here [Blue Spy]: \", players[i])\n              let blueSpymasters = this.state.blueSpymasters;\n              blueSpymasters.push(players[i]);\n              this.setState({\n                blueSpymasters\n              });\n            }\n          } else if (players[i].role === \"O\") {\n            if (players[i].team === \"R\") {\n              //console.log(\"It went here [Red Op]: \", players[i])\n              let redOperatives = this.state.redOperatives;\n              redOperatives.push(players[i]);\n              this.setState({\n                redOperatives\n              });\n            } else if (players[i].team === \"B\") {\n              //console.log(\"It went here [Blue Op]: \", players[i])\n              let blueOperatives = this.state.blueOperatives;\n              blueOperatives.push(players[i]);\n              this.setState({\n                blueOperatives\n              });\n            }\n          }\n        }\n      } //}\n\n\n      this.deleteRepeated();\n    };\n\n    this.deleteRepeated = () => {\n      let redOperatives = this.state.redOperatives;\n      let redSpymasters = this.state.redSpymasters;\n      let blueOperatives = this.state.blueOperatives;\n      let blueSpymasters = this.state.blueSpymasters;\n      let showredOperatives = this.state.showredOperatives;\n      let showredSpymasters = this.state.showredSpymasters;\n      let showblueOperatives = this.state.showblueOperatives;\n      let showblueSpymasters = this.state.showblueSpymasters; //Red Operatives\n\n      for (let i = 0; i < redOperatives.length; i++) {\n        let repeated = false;\n\n        for (let j = 0; j < showredOperatives.length; j++) {\n          if (redOperatives[i].player_id === showredOperatives[j].player_id) {\n            repeated = true;\n          }\n        }\n\n        if (repeated === false) {\n          showredOperatives.push(redOperatives[i]);\n          this.setState({\n            showredOperatives\n          });\n        }\n      } //end of for loop\n      //Red Spymasters\n\n\n      for (let i = 0; i < redSpymasters.length; i++) {\n        let repeated = false;\n\n        for (let j = 0; j < showredSpymasters.length; j++) {\n          if (redSpymasters[i].player_id === showredSpymasters[j].player_id) {\n            repeated = true;\n          }\n        }\n\n        if (repeated === false) {\n          showredSpymasters.push(redSpymasters[i]);\n          this.setState({\n            showredSpymasters\n          });\n        }\n      } //Blue Operative\n\n\n      for (let i = 0; i < blueOperatives.length; i++) {\n        let repeated = false;\n\n        for (let j = 0; j < showblueOperatives.length; j++) {\n          if (blueOperatives[i].player_id === showblueOperatives[j].player_id) {\n            repeated = true;\n          }\n        }\n\n        if (repeated === false) {\n          showblueOperatives.push(blueOperatives[i]);\n          this.setState({\n            showblueOperatives\n          });\n        }\n      } //Blue Spymasters\n\n\n      for (let i = 0; i < blueSpymasters.length; i++) {\n        let repeated = false;\n\n        for (let j = 0; j < showblueSpymasters.length; j++) {\n          if (blueSpymasters[i].player_id === showblueSpymasters[j].player_id) {\n            repeated = true;\n          }\n        }\n\n        if (repeated === false) {\n          showblueSpymasters.push(blueSpymasters[i]);\n          this.setState({\n            showblueSpymasters\n          });\n        }\n      }\n    };\n\n    this.state = {\n      room_key: '',\n      task: 'S',\n      gameid: '',\n      gameWords: '',\n      playersdata: '',\n      spymasterClueWord: '',\n      spymasterClueCount: 0,\n      redScore: 0,\n      blueScore: 0,\n      redteamid: '',\n      blueteamid: '',\n      //Helper Variables\n      redOperatives: [],\n      redSpymasters: [],\n      blueOperatives: [],\n      blueSpymasters: [],\n      renderPlayers: false,\n      //Show Variables\n      showredOperatives: [],\n      showredSpymasters: [],\n      showblueOperatives: [],\n      showblueSpymasters: [],\n      //Websocket\n      ws: null\n    }; // Need these statements since they set state - or use xxx = () => {}\n\n    this.incrementClueCount = this.incrementClueCount.bind(this);\n    this.decrementClueCount = this.decrementClueCount.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.socketSend = this.socketSend.bind(this);\n  }\n\n  // For changing state when elements are changed on the page by user\n  handleChange(event) {\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = event.target; // if the type just grabbed from the event is a checkbox, set the name of the event, \n    // which is named after an element in the state - so the element in the state - to \n    // the boolean checked, otherwise set [name], in state, to the value grabbed. \n\n    type === \"checkbox\" ? this.setState({\n      [name]: checked\n    }) : this.setState({\n      [name]: value\n    });\n  } // For handling the players' submitting their guesses / word picks\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.state.showredOperatives.length >= 1 && this.state.showblueOperatives.length >= 1 && this.state.showredSpymasters.length === 1 && this.state.showblueSpymasters.length === 1 && (this.props.agentClicked === true || this.props.gameWords[this.props.doubleAgentIndex].category !== 'D') ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game\",\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n          children: \"SPYMASTERS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n          className: \"gameCode\",\n          children: [\" Game Code: \", this.props.room_key, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container-fluid\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-12\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"row\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-md-4\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"gameScores\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"redTeam\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n                          className: \"teamTitle\",\n                          children: \"Red Team\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 395,\n                          columnNumber: 57\n                        }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                          className: \"teamScore\",\n                          children: this.props.redPoints\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 396,\n                          columnNumber: 57\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 393,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 398,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 399,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                        className: \"teamContent\",\n                        children: \" Spymasters:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 400,\n                        columnNumber: 53\n                      }, this), this.state.showredSpymasters.map((player, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                        className: \"bulletContent\",\n                        children: player.operative_screen_name\n                      }, index, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 402,\n                        columnNumber: 61\n                      }, this)), this.showRedSpymasters, /*#__PURE__*/_jsxDEV(\"h6\", {\n                        className: \"teamContent\",\n                        children: \" Operatives:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 406,\n                        columnNumber: 53\n                      }, this), this.state.showredOperatives.map((player, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                        className: \"bulletContent\",\n                        children: player.operative_screen_name\n                      }, index, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 408,\n                        columnNumber: 61\n                      }, this))]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 392,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 411,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"blueTeam\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n                          className: \"teamTitle\",\n                          children: \"Blue Team\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 414,\n                          columnNumber: 57\n                        }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                          className: \"teamScore\",\n                          children: this.props.bluePoints\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 415,\n                          columnNumber: 57\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 413,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 417,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 418,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                        className: \"teamContent\",\n                        children: \" Spymasters:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 419,\n                        columnNumber: 53\n                      }, this), this.state.showblueSpymasters.map((player, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                        className: \"bulletContent\",\n                        children: player.operative_screen_name\n                      }, index, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 421,\n                        columnNumber: 61\n                      }, this)), /*#__PURE__*/_jsxDEV(\"h6\", {\n                        className: \"teamContent\",\n                        children: \" Operatives:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 423,\n                        columnNumber: 53\n                      }, this), this.state.showblueOperatives.map((player, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                        className: \"bulletContent\",\n                        children: player.operative_screen_name\n                      }, index, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 425,\n                        columnNumber: 61\n                      }, this))]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 412,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 391,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 390,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-md-7\",\n                  children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"row\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"col-md-12\",\n                      children: [/*#__PURE__*/_jsxDEV(Row, {\n                        task: this.state.task,\n                        rowWords: [this.state.gameWords[0], this.state.gameWords[1], this.state.gameWords[2], this.state.gameWords[3], this.state.gameWords[4]],\n                        cardNumbers: [0, 1, 2, 3, 4] // Add in card numbers to distinguish\n                        ,\n                        gameid: this.state.gameid // Add in gameid for card websocket\n                        ,\n                        increaseTeamPoints: this.props.increaseTeamPoints\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 434,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(Row, {\n                        task: this.state.task,\n                        rowWords: [this.state.gameWords[5], this.state.gameWords[6], this.state.gameWords[7], this.state.gameWords[8], this.state.gameWords[9]],\n                        cardNumbers: [5, 6, 7, 8, 9],\n                        gameid: this.state.gameid // Add in gameid for card websocket\n                        ,\n                        increaseTeamPoints: this.props.increaseTeamPoints\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 443,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(Row, {\n                        task: this.state.task,\n                        rowWords: [this.state.gameWords[10], this.state.gameWords[11], this.state.gameWords[12], this.state.gameWords[13], this.state.gameWords[14]],\n                        cardNumbers: [10, 11, 12, 13, 14],\n                        gameid: this.state.gameid // Add in gameid for card websocket\n                        ,\n                        increaseTeamPoints: this.props.increaseTeamPoints\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 452,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(Row, {\n                        task: this.state.task,\n                        rowWords: [this.state.gameWords[15], this.state.gameWords[16], this.state.gameWords[17], this.state.gameWords[18], this.state.gameWords[19]],\n                        cardNumbers: [15, 16, 17, 18, 19],\n                        gameid: this.state.gameid // Add in gameid for card websocket\n                        ,\n                        increaseTeamPoints: this.props.increaseTeamPoints\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 461,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(Row, {\n                        task: this.state.task,\n                        rowWords: [this.state.gameWords[20], this.state.gameWords[21], this.state.gameWords[22], this.state.gameWords[23], this.state.gameWords[24]],\n                        cardNumbers: [20, 21, 22, 23, 24],\n                        gameid: this.state.gameid // Add in gameid for card websocket\n                        ,\n                        increaseTeamPoints: this.props.increaseTeamPoints\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 470,\n                        columnNumber: 57\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 432,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 431,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"row\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"col-md-12\",\n                      children: !this.props.winningScreenIsOpen ? /*#__PURE__*/_jsxDEV(\"form\", {\n                        children: /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"spymasterClue\",\n                          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                            type: \"text\",\n                            value: this.state.spymasterClueWord,\n                            name: \"spymasterClueWord\" // Must be same name as state!\n                            ,\n                            placeholder: \"Type clue here\",\n                            onChange: this.handleChange\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 487,\n                            columnNumber: 65\n                          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                            className: \"counter\",\n                            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                              type: \"button\",\n                              onClick: this.incrementClueCount,\n                              children: \"+\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 496,\n                              columnNumber: 69\n                            }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                              children: this.state.spymasterClueCount\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 497,\n                              columnNumber: 69\n                            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                              type: \"button\",\n                              onClick: this.decrementClueCount,\n                              children: \"-\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 498,\n                              columnNumber: 69\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 494,\n                            columnNumber: 65\n                          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                            type: \"button\",\n                            onClick: this.socketSend\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 502,\n                            columnNumber: 65\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 486,\n                          columnNumber: 61\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 485,\n                        columnNumber: 57\n                      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"popUp\",\n                        children: this.props.team === this.props.winningTeam ? /*#__PURE__*/_jsxDEV(\"h4\", {\n                          className: \"Status\",\n                          children: \"CONGRATS! YOUR TEAM WON!\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 509,\n                          columnNumber: 57\n                        }, this) : /*#__PURE__*/_jsxDEV(\"h4\", {\n                          className: \"Status\",\n                          children: \"SORRY! YOUR TEAM LOST!\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 511,\n                          columnNumber: 57\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 507,\n                        columnNumber: 57\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 483,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 482,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 430,\n                  columnNumber: 45\n                }, this), \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 389,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.props.setDoubleAgent,\n          children: \"I want first\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Waiting for players!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default SpymastersGame;","map":{"version":3,"sources":["/mnt/c/Users/micha/Codenames/codenames/codenames/src/Components/GamePage/Spymasters/SpymastersGame.js"],"names":["React","Component","Row","SpymastersGame","constructor","componentDidMount","socketSend","data","state","spymasterClueCount","spymasterClueWord","ws","send","JSON","stringify","console","log","connect","WebSocket","props","gameid","that","connectInterval","onopen","setState","timeout","clearTimeout","onclose","e","Math","min","reason","setTimeout","check","onerror","err","error","message","close","onmessage","evt","parse","count","clue","prevState","readyState","CLOSED","componentDidUpdate","event","gameWords","room_key","playersdata","showredOperatives","length","showblueOperatives","showredSpymasters","showblueSpymasters","agentClicked","doubleAgentIndex","category","handleGameState","componentWillReceiveProps","players","updatePlayers","handleGuessSubmit","incrementClueCount","team","redPoints","bluePoints","decrementClueCount","i","room","role","redSpymasters","push","blueSpymasters","redOperatives","blueOperatives","deleteRepeated","repeated","j","player_id","task","redScore","blueScore","redteamid","blueteamid","renderPlayers","bind","handleChange","name","value","type","checked","target","render","map","player","index","operative_screen_name","showRedSpymasters","increaseTeamPoints","winningScreenIsOpen","winningTeam","setDoubleAgent"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Row from \"../Row/Row\"\nimport './SpymastersGame.css'\n\n\nclass SpymastersGame extends Component{ // Still not 100% sure whether to change this to a class, or to just useState\n    constructor() {\n        super()\n        this.state = {\n            room_key: '',\n            task: 'S',\n            gameid: '',\n            gameWords: '',\n            playersdata: '',\n            spymasterClueWord: '',\n            spymasterClueCount: 0,\n\n            redScore: 0,\n            blueScore: 0,\n\n            redteamid: '',\n            blueteamid: '',\n\n            //Helper Variables\n            redOperatives: [],\n            redSpymasters: [],\n            blueOperatives: [],\n            blueSpymasters: [],\n            renderPlayers: false,\n\n            //Show Variables\n            showredOperatives: [],\n            showredSpymasters: [],\n            showblueOperatives: [],\n            showblueSpymasters: [],\n\n            //Websocket\n            ws: null\n        }\n        // Need these statements since they set state - or use xxx = () => {}\n        this.incrementClueCount = this.incrementClueCount.bind(this);\n        this.decrementClueCount = this.decrementClueCount.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.socketSend = this.socketSend.bind(this);\n    }\n\n    componentDidMount = () => {\n    } // Don't add this.connect()\n\n    socketSend = () => {\n        var data = {\n            \"count\": this.state.spymasterClueCount,\n            \"clue\": this.state.spymasterClueWord\n        }\n        this.state.ws.send(JSON.stringify(data)) // send to channel\n        console.log(data)\n    }\n\n    /**\n     * @function connect\n     * This function establishes the connect with the websocket and also ensures \n     * constant reconnection if connection closes\n     */\n     connect = () => {\n        var ws = new WebSocket('ws://localhost:8000/cluebox/cluebox/' + this.props.gameid + '/');\n        let that = this; // cache the this\n        var connectInterval;\n\n        // websocket onopen event listener\n        ws.onopen = () => {\n            console.log(\"connected websocket main component\");\n            this.setState({ ws: ws });\n\n            that.timeout = 250; // reset timer to 250 on open of websocket connection \n            clearTimeout(connectInterval); // clear Interval on on open of websocket connection\n        };\n\n        // websocket onclose event listener\n        ws.onclose = e => {\n            console.log(\n                `Socket is closed. Reconnect will be attempted in ${Math.min(\n                    10000 / 1000,\n                    (that.timeout + that.timeout) / 1000\n                )} second.`,\n                e.reason\n            );\n\n            that.timeout = that.timeout + that.timeout; //increment retry interval\n            connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\n        };\n\n        // websocket onerror event listener\n        ws.onerror = err => {\n            console.error(\n                \"Socket encountered error: \",\n                err.message,\n                \"Closing socket\"\n            );\n\n            ws.close();\n        };\n\n        ws.onmessage = evt => {\n            // listen to data sent from the websocket server\n            const data = JSON.parse(evt.data)\n            console.log(data)\n            console.log(\"received clue!\")\n            let count = data.count\n            let clue = data.clue\n            this.setState(prevState => {\n                return {\n                    spymasterClueCount: count,\n                    spymasterClueWord: clue\n                }\n            })\n        };\n        this.setState(prevState => {\n            return {\n                ws: ws\n            }\n        })\n    };\n\n    /**\n     * utilited by the @function connect to check if the connection is close, if so attempts to reconnect\n     */\n    check = () => {\n        const { ws } = this.state.ws;\n        if (!ws || ws.readyState === WebSocket.CLOSED) this.connect(); //check if websocket instance is closed, if so call `connect` function.\n    };\n\n\n    /*\n        states affected: \n            gameWords\n        what it does: \n            The first parameter for this method is gameWords before the update; so, testing \n            whether it has changed is done here. If it has changed then it will update the \n            gameWords to how the game component has them. \n    */\n    componentDidUpdate = (event) => {\n\n        if (event.gameWords !== this.props.gameWords) {\n            this.setState(prevState => {\n                return {\n                    gameWords: this.props.gameWords,\n                    room_key: this.props.room_key,\n                    gameid: this.props.gameid,\n                    \n                }\n            })\n            if (this.state.ws === null) {\n                this.connect();\n            }\n        }\n\n        if(event.playersdata !== this.props.playersdata){\n            this.setState(prevState =>{\n                return{\n                    playersdata: this.props.playersdata\n                }\n            })\n        }\n\n        //Trigger Game Ready state\n        if((this.state.showredOperatives.length >= 1 && this.state.showblueOperatives.length >=1 && this.state.showredSpymasters.length === 1 && this.state.showblueSpymasters.length === 1) && (this.props.agentClicked === true || this.props.gameWords[this.props.doubleAgentIndex].category !== 'D')) {\n            this.props.handleGameState(true);\n        }\n    }\n\n    /*This one will call updatePlayers twice therefore adds it twice but will show normal when refreshed. \n        =>Fixed with the deleteRepeated() function    \n    */\n    componentWillReceiveProps = (players) => {\n        this.setState({\n            playersdata: players.playersdata,\n            //renderPlayers: true,\n        })\n        //console.log(players)\n\n        console.log(\"Checking how many times this will call the update players!\")\n        this.updatePlayers(players.playersdata)\n    }\n\n    // For changing state when elements are changed on the page by user\n\n    handleChange(event) {\n        const {name, value, type, checked} = event.target\n        // if the type just grabbed from the event is a checkbox, set the name of the event, \n        // which is named after an element in the state - so the element in the state - to \n        // the boolean checked, otherwise set [name], in state, to the value grabbed. \n        type === \"checkbox\" ? this.setState({ [name]: checked }) : this.setState({ [name]: value })\n\n    }\n    \n    // For handling the players' submitting their guesses / word picks\n    handleGuessSubmit = () => {\n        console.log(this.state.spymasterClueWord, this.state.spymasterClueCount)\n    }\n    incrementClueCount = () => {\n        if (this.props.team === 'R') {\n            if (this.state.spymasterClueCount + 1 <= 8 - (this.props.redPoints) + \n               (this.state.gameWords[this.props.doubleAgentIndex].category === 'R')) {\n                this.setState(prevState => { // Update with inline function\n                    return {\n                        spymasterClueCount: prevState.spymasterClueCount + 1\n                    }\n                })\n            }\n        }\n        else if (this.props.team === 'B') {\n            if (this.state.spymasterClueCount + 1 <= 8 - (this.props.bluePoints) + \n               (this.state.gameWords[this.props.doubleAgentIndex].category === 'B')) {\n                this.setState(prevState => { // Update with inline function\n                    return {\n                        spymasterClueCount: prevState.spymasterClueCount + 1\n                    }\n                })\n            }\n        }\n    }\n    decrementClueCount = () => {\n        if (this.state.spymasterClueCount - 1 >= 0) {\n            this.setState(prevState => {\n                return {\n                    spymasterClueCount: prevState.spymasterClueCount - 1\n                }\n            })\n        }\n    }\n\n    /*Issues: Being called twice so it adds double the amount until you refresh the page.\n        =>Fixed with the deleteRepeated() function    \n    */\n    updatePlayers = (players) => {\n        //console.log('Update Players Called!');\n        let room_key = this.props.room_key;\n        //let players = this.props.playersdata;\n        console.log(\"Players data: \", players)\n        //if(this.state.renderPlayers === true){\n\n        for(let i = 0; i < players.length; i++){\n            //console.log(\"Current Player: \", players[i])\n            if(players[i].room === room_key){\n                if(players[i].role === \"S\" ){\n                    if(players[i].team === \"R\"){\n                        //console.log(\"It went here [Red Spy]: \", players[i])\n                        let redSpymasters = this.state.redSpymasters\n                        redSpymasters.push(players[i])\n                        this.setState({\n                            redSpymasters,\n                        })\n                        \n                    }\n                    else if(players[i].team === \"B\"){\n                        //console.log(\"It went here [Blue Spy]: \", players[i])\n                        let blueSpymasters = this.state.blueSpymasters\n                        blueSpymasters.push(players[i])\n                        this.setState({\n                            blueSpymasters\n                        })\n                        \n                    }\n                }\n                else if(players[i].role === \"O\"){\n                    if(players[i].team === \"R\"){\n                        //console.log(\"It went here [Red Op]: \", players[i])\n                        let redOperatives = this.state.redOperatives\n                        redOperatives.push(players[i])\n                        this.setState({\n                            redOperatives\n                        })\n                        \n                    }\n                    else if(players[i].team === \"B\"){\n                        //console.log(\"It went here [Blue Op]: \", players[i])\n                        let blueOperatives = this.state.blueOperatives\n                        blueOperatives.push(players[i])\n                        this.setState({\n                            blueOperatives\n                        })\n                        \n                    }\n                    \n                }\n            \n            }\n        }\n        //}\n\n        this.deleteRepeated()\n    }\n\n    //This fixes the issue of having repeated players on intial load. \n    deleteRepeated = ()=> {\n        let redOperatives = this.state.redOperatives\n        let redSpymasters = this.state.redSpymasters\n        let blueOperatives = this.state.blueOperatives\n        let blueSpymasters = this.state.blueSpymasters\n        let showredOperatives = this.state.showredOperatives\n        let showredSpymasters = this.state.showredSpymasters\n        let showblueOperatives = this.state.showblueOperatives\n        let showblueSpymasters = this.state.showblueSpymasters\n        \n\n        //Red Operatives\n        for (let i = 0; i < redOperatives.length; i++){\n            let repeated = false;\n            for (let j = 0; j < showredOperatives.length; j++){\n                if(redOperatives[i].player_id === showredOperatives[j].player_id){\n                    repeated = true\n                }\n            }\n            if (repeated === false){\n                showredOperatives.push(redOperatives[i])\n                this.setState({\n                    showredOperatives\n                })\n            }\n        }//end of for loop\n\n        //Red Spymasters\n        for (let i = 0; i < redSpymasters.length; i++){\n            let repeated = false;\n            for (let j = 0; j < showredSpymasters.length; j++){\n                if(redSpymasters[i].player_id === showredSpymasters[j].player_id){\n                    repeated = true\n                }\n            }\n            if (repeated === false){\n                showredSpymasters.push(redSpymasters[i])\n                this.setState({\n                    showredSpymasters\n                })\n            }\n        }\n\n        //Blue Operative\n        for (let i = 0; i < blueOperatives.length; i++){\n            let repeated = false;\n            for (let j = 0; j < showblueOperatives.length; j++){\n                if(blueOperatives[i].player_id === showblueOperatives[j].player_id){\n                    repeated = true\n                }\n            }\n            if (repeated === false){\n                showblueOperatives.push(blueOperatives[i])\n                this.setState({\n                    showblueOperatives\n                })\n            }\n        }\n\n        //Blue Spymasters\n        for (let i = 0; i < blueSpymasters.length; i++){\n            let repeated = false;\n            for (let j = 0; j < showblueSpymasters.length; j++){\n                if(blueSpymasters[i].player_id === showblueSpymasters[j].player_id){\n                    repeated = true\n                }\n            }\n            if (repeated === false){\n                showblueSpymasters.push(blueSpymasters[i])\n                this.setState({\n                    showblueSpymasters\n                })\n            }\n        }\n\n    }\n\n   \n\n    render() {\n        \n        \n        return(\n            <div>\n                {(this.state.showredOperatives.length >= 1 && this.state.showblueOperatives.length >=1 && \n                  this.state.showredSpymasters.length === 1 && this.state.showblueSpymasters.length === 1) && \n                  (this.props.agentClicked === true || this.props.gameWords[this.props.doubleAgentIndex].category !== 'D') ?\n                    <div className=\"game\" >\n                        <br />\n                        <h6>SPYMASTERS</h6>\n                        <h6 className=\"gameCode\"> Game Code: {this.props.room_key} </h6>\n                        <div className=\"container-fluid\">\n                            <div className=\"row\">\n                                <div className=\"col-md-12\">\n                                    <div className=\"row\">\n                                        <div className=\"col-md-4\">\n                                            <div className=\"gameScores\">\n                                                <div className=\"redTeam\">\n                                                    <div>\n                                                \n                                                        <h6 className=\"teamTitle\">Red Team</h6>\n                                                        <h6 className=\"teamScore\">{this.props.redPoints}</h6>\n                                                    </div>\n                                                    <br />\n                                                    <br />\n                                                    <h6 className=\"teamContent\"> Spymasters:</h6>\n                                                        {this.state.showredSpymasters.map((player, index) => (\n                                                            <li className=\"bulletContent\" key={index}>{player.operative_screen_name}</li>\n                                                        ))}\n                                                        {this.showRedSpymasters}\n                                                    \n                                                    <h6 className=\"teamContent\"> Operatives:</h6>\n                                                        {this.state.showredOperatives.map((player, index )=> (\n                                                            <li className=\"bulletContent\" key={index}>{player.operative_screen_name}</li>\n                                                        ))}\n                                                </div>\n                                                <br />\n                                                <div className=\"blueTeam\">\n                                                    <div>\n                                                        <h6 className=\"teamTitle\">Blue Team</h6>\n                                                        <h6 className=\"teamScore\">{this.props.bluePoints}</h6>\n                                                    </div>\n                                                    <br />\n                                                    <br />\n                                                    <h6 className=\"teamContent\"> Spymasters:</h6>\n                                                        {this.state.showblueSpymasters.map((player, index) => (\n                                                            <li className=\"bulletContent\" key={index}>{player.operative_screen_name}</li>\n                                                        ))}\n                                                    <h6 className=\"teamContent\"> Operatives:</h6>\n                                                        {this.state.showblueOperatives.map((player, index)=> (\n                                                            <li className=\"bulletContent\" key={index}>{player.operative_screen_name}</li>\n                                                        ))}\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div className=\"col-md-7\"> {/* Changed back to div from a form */}\n                                                <div className=\"row\">\n                                                    <div className=\"col-md-12\">\n    \n                                                        <Row task={this.state.task}\n                                                            rowWords={[this.state.gameWords[0],\n                                                            this.state.gameWords[1],\n                                                            this.state.gameWords[2],\n                                                            this.state.gameWords[3],\n                                                            this.state.gameWords[4]]}\n                                                            cardNumbers={[0,1,2,3,4]} // Add in card numbers to distinguish\n                                                            gameid={this.state.gameid} // Add in gameid for card websocket\n                                                            increaseTeamPoints={this.props.increaseTeamPoints} />\n                                                        <Row task={this.state.task}\n                                                            rowWords={[this.state.gameWords[5],\n                                                            this.state.gameWords[6],\n                                                            this.state.gameWords[7],\n                                                            this.state.gameWords[8],\n                                                            this.state.gameWords[9]]}\n                                                            cardNumbers={[5,6,7,8,9]}\n                                                            gameid={this.state.gameid} // Add in gameid for card websocket\n                                                            increaseTeamPoints={this.props.increaseTeamPoints} />\n                                                        <Row task={this.state.task}\n                                                            rowWords={[this.state.gameWords[10],\n                                                            this.state.gameWords[11],\n                                                            this.state.gameWords[12],\n                                                            this.state.gameWords[13],\n                                                            this.state.gameWords[14]]}\n                                                            cardNumbers={[10,11,12,13,14]}\n                                                            gameid={this.state.gameid} // Add in gameid for card websocket\n                                                            increaseTeamPoints={this.props.increaseTeamPoints} />\n                                                        <Row task={this.state.task}\n                                                            rowWords={[this.state.gameWords[15],\n                                                            this.state.gameWords[16],\n                                                            this.state.gameWords[17],\n                                                            this.state.gameWords[18],\n                                                            this.state.gameWords[19]]}\n                                                            cardNumbers={[15,16,17,18,19]}\n                                                            gameid={this.state.gameid} // Add in gameid for card websocket\n                                                            increaseTeamPoints={this.props.increaseTeamPoints} />\n                                                        <Row task={this.state.task}\n                                                            rowWords={[this.state.gameWords[20],\n                                                            this.state.gameWords[21],\n                                                            this.state.gameWords[22],\n                                                            this.state.gameWords[23],\n                                                            this.state.gameWords[24]]}\n                                                            cardNumbers={[20,21,22,23,24]}\n                                                            gameid={this.state.gameid} // Add in gameid for card websocket\n                                                            increaseTeamPoints={this.props.increaseTeamPoints} />\n    \n                                                    </div>\n                                                </div>\n                                                <div className=\"row\">\n                                                    <div className=\"col-md-12\">\n                                                        {!this.props.winningScreenIsOpen ? \n                                                        <form>\n                                                            <div className=\"spymasterClue\">\n                                                                <input\n                                                                    type=\"text\"\n                                                                    value={this.state.spymasterClueWord}\n                                                                    name=\"spymasterClueWord\" // Must be same name as state!\n                                                                    placeholder=\"Type clue here\"\n                                                                    onChange={this.handleChange}\n                                                                />\n                                                                <div className=\"counter\">\n                                                                    {/* type = \"button\" to NOT make it submit the form */}\n                                                                    <button type=\"button\" onClick={this.incrementClueCount}>+</button>\n                                                                    <h6>{this.state.spymasterClueCount}</h6>\n                                                                    <button type=\"button\" onClick={this.decrementClueCount}>-</button>\n                                                                </div>\n    \n                                                                {/* <input type=\"button\" onClick={this.socketSend}>Submit Clue</input> */}\n                                                                <input type=\"button\" onClick={this.socketSend}/>\n    \n                                                            </div>\n                                                        </form>\n                                                        :\n                                                        <div className=\"popUp\" >\n                                                        {this.props.team === this.props.winningTeam ? \n                                                        <h4 className=\"Status\">CONGRATS! YOUR TEAM WON!</h4>\n                                                        :\n                                                        <h4 className=\"Status\">SORRY! YOUR TEAM LOST!</h4>\n                                                        }\n                                                        </div>\n                                                        }\n                                                    </div>\n                                                </div>\n                                            </div> {/* Changed back to div from a form */}\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                    </div> \n                    :\n                    <div>\n                    <button onClick={this.props.setDoubleAgent}>I want first</button>\n                    <div>Waiting for players!</div>\n                    </div>\n                } \n\n            </div>\n\n        \n\n        )\n    }\n}\n\nexport default SpymastersGame"]},"metadata":{},"sourceType":"module"}