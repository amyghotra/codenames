{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/micha/Codenames/codenames/codenames/src/Components/GamePage/Game.js\";\nimport React, { Component } from 'react';\nimport './Game.css';\nimport axios from 'axios';\nimport SpymastersGame from './Spymasters/SpymastersGame.js';\nimport OperativesGame from './Operatives/OperativesGame.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Game extends Component {\n  constructor() {\n    super();\n\n    this.componentDidMount = async () => {\n      let gameWords = this.props.location.state.gameWords;\n\n      for (let i = 0; i < gameWords.length; i++) {\n        if (gameWords[i].category === 'D') {\n          this.setState({\n            doubleAgent: gameWords[i],\n            doubleAgentIndex: i\n          });\n        }\n      }\n\n      await axios.get('http://127.0.0.1:8000/codenames/players').then(res => {\n        this.setState({\n          playersdata: res.data\n        });\n        let playerExist = false;\n\n        for (let i = 0; i < res.data.length; i++) {\n          if (res.data[i].game_id === this.props.location.state.gameid && res.data[i].room === this.props.location.state.room_key && res.data[i].user_id === this.props.location.state.playerid) {\n            playerExist = true;\n          }\n        }\n\n        if (playerExist === false) {\n          axios.post('http://127.0.0.1:8000/codenames/players', {\n            operative_screen_name: this.props.location.state.nickname,\n            team: this.props.location.state.team,\n            role: this.props.location.state.task,\n            room: this.props.location.state.room_key,\n            game_id: this.props.location.state.gameid,\n            user_id: this.props.location.state.playerid\n          }).then(response => {\n            if (this.props.location.state.team === 'B' && this.props.location.state.task === 'O') {\n              this.setState({\n                blueOperatives: [...this.state.blueOperatives, response.data]\n              });\n            } else if (this.props.location.state.team === 'R' && this.props.location.state.task === 'O') {\n              this.setState({\n                redOperatives: [...this.state.redOperatives, response.data]\n              });\n            }\n\n            this.setState({\n              playersdata: [...this.state.playersdata, response.data]\n            });\n          });\n        }\n      });\n      this.setState({\n        room_key: this.props.location.state.room_key,\n        roomid: this.props.location.state.roomid,\n        nickname: this.props.location.state.nickname,\n        team: this.props.location.state.team,\n        task: this.props.location.state.task,\n        gameid: this.props.location.state.gameid,\n        gameData: this.props.location.state.gameData,\n        gameWords: this.props.location.state.gameWords,\n        playerid: this.props.location.state.playerid,\n        redteamid: this.props.location.state.redteamid,\n        blueteamid: this.props.location.state.blueteamid\n      });\n      this.updateGameWords(this.props.location.state.gameid);\n      this.connectTurns();\n      await axios.get(`http://127.0.0.1:8000/codenames/redTeam/${this.state.redteamid}`).then(response => {\n        this.setState({\n          red_score: response.data.red_team_score\n        });\n      });\n      await axios.get(`http://127.0.0.1:8000/codenames/blueTeam/${this.state.blueteamid}`).then(response => {\n        this.setState({\n          blue_score: response.data.blue_team_score\n        });\n      });\n      const localRedTeamId = localStorage.getItem(this.state.redteamid);\n      const localBlueTeamId = localStorage.getItem(this.state.blueteamid);\n\n      if (localRedTeamId && localBlueTeamId) {\n        // console.log(localRedTeamId, localBlueTeamId);\n        this.setState({\n          red_score: Number(localRedTeamId),\n          blue_score: Number(localBlueTeamId)\n        });\n      }\n\n      this.connectTeamPoints();\n      this.connectPlayers();\n      this.connectDoubleAgent(); // if(this.state.currentPlayer === null) {this.setIntial()}\n      // this.setIntial()\n    };\n\n    this.componentDidUpdate = (prevProps, prevState) => {\n      // if(this.state.currentPlayer === null) {\n      //     this.connectTeamPoints();\n      //     this.setIntial()\n      // }\n      // if(this.state.currentPlayer === null) {\n      //     console.log(\"attempt to select initial player\")\n      //     this.setIntial()\n      // } else if(this.state.currentPlayer !== null) {\n      //     console.log(\"player was already set\")\n      //     console.log(this.state.currentPlayer)\n      // } else {\n      //     console.log(\"compdidupdate else stmnt\")\n      // }\n      if (this.state.wsp && this.state.wsp.readyState === 1 && this.state.loadedPlayers === false) {\n        console.log('the ready state is working', this.state.playersdata[this.state.playersdata.length - 1]);\n        this.socketSendPlayers(this.state.playersdata[this.state.playersdata.length - 1]);\n        this.setState({\n          loadedPlayers: true\n        });\n      }\n    };\n\n    this.setIntial = () => {\n      console.log(this.state.redOperatives.length);\n      var player;\n      var team;\n\n      if (this.state.wantedFirst === 'B' && this.state.blueOperatives.length > 0) {\n        player = this.state.blueOperatives[this.state.bIndex].player_id;\n        team = 'B';\n        var bIdx = this.state.bIndex + 1;\n        this.setState({\n          bIndex: bIdx\n        });\n      } else if (this.state.wantedFirst === 'R' && this.state.redOperatives.length > 0) {\n        player = this.state.redOperatives[this.state.rIndex].player_id;\n        team = 'R';\n        var rIdx = this.state.rIndex + 1;\n        this.setState({\n          rIndex: rIdx\n        });\n      }\n\n      this.updateRoundPlayer(team, player, this.state.rIndex, this.state.bIndex);\n      this.setState({\n        currentPlayer: player,\n        currentTeam: team\n      });\n    };\n\n    this.connectTurns = () => {\n      var ws_turn = new WebSocket('ws://localhost:8000/turns/turns/' + this.state.gameid + '/');\n      let that = this; //cache the this\n\n      var connectInterval; //websocket onopen event listener\n\n      ws_turn.onopen = () => {\n        // console.log('connect team points component');\n        this.setState({\n          ws_turn: ws_turn\n        });\n        that.timeout = 250;\n        clearTimeout(connectInterval);\n      };\n\n      ws_turn.onclose = e => {\n        console.log(`Socket is closed. Reconnect will be attempted in ${Math.min(10000 / 1000, (that.timeout + that.timeout) / 1000)} second.`, e.reason);\n        that.timeout = that.timeout + that.timeout; //increment retry interval\n\n        connectInterval = setTimeout(this.checkTurns, Math.min(1000, that.timeout));\n      }; // websocket onerror event listener\n\n\n      ws_turn.onerror = err => {\n        console.error(\"Socket encountered error: \", err.message, \"Closing socket\");\n        ws_turn.close();\n      };\n\n      ws_turn.onmessage = evt => {\n        // listen to data sent from the websocket server\n        const data = JSON.parse(evt.data);\n        console.log(data);\n        console.log(\"tryeng to print event out\");\n        console.log(evt); // console.log(\"received clue!\")\n\n        let nextPlayingTeam = data.nextTeam;\n        let nextUser = data.nextPlayer;\n        this.setState(prevState => {\n          return {\n            nextTeam: nextPlayingTeam,\n            nextPlayer: nextUser\n          };\n        });\n      };\n\n      this.setState(prevState => {\n        return {\n          ws_turn: ws_turn\n        };\n      });\n    };\n\n    this.setDoubleAgent = () => {\n      let doubleAgent = { ...this.state.doubleAgent\n      };\n      doubleAgent.category = this.state.team;\n      let agentClicked = this.state.agentClicked;\n      agentClicked = true;\n      this.setState({\n        doubleAgent,\n        agentClicked\n      });\n      axios.put(`http://127.0.0.1:8000/codenames/games/word/${this.state.doubleAgent.word_id}`, doubleAgent).then(res => {\n        console.log(res);\n        this.updateGameWords(this.state.gameid);\n      });\n      var data = {\n        \"number\": this.state.doubleAgentIndex,\n        \"team\": this.state.team\n      };\n      this.state.doubleAgentWS.send(JSON.stringify(data)); // send to channel\n\n      console.log(data);\n    };\n\n    this.updateGameWords = gameid => {\n      axios.get(`http://127.0.0.1:8000/codenames/games/${gameid}`).then(res => {\n        this.setState({\n          gameWords: res.data.gameWords\n        });\n      });\n    };\n\n    this.increaseTeamPoints = (team, word) => {\n      let redPoints = this.state.red_score;\n      let bluePoints = this.state.blue_score;\n\n      if (team === 'R') {\n        let wordObj = this.state.gameWords.find(w => w.word_id === word);\n\n        if (wordObj.guessed === false) {\n          this.setState(prevState => {\n            return {\n              red_score: prevState.red_score + 1\n            };\n          });\n          redPoints += 1;\n          localStorage.setItem(this.state.redteamid, JSON.stringify(redPoints));\n          axios.patch(`http://127.0.0.1:8000/codenames/games/word/${word}`, {\n            guessed: true\n          }).then(response => {\n            console.log(response.data);\n          });\n          axios.patch(`http://127.0.0.1:8000/codenames/redTeam/${this.state.redteamid}`, {\n            red_team_score: redPoints\n          }).then(response => {\n            console.log(response.data);\n          });\n        }\n\n        this.socketSendTeamPoints(redPoints, bluePoints); // this.socketSendPlayers(this.state.playersdata[this.state.playersdata.length-1]);\n      } else if (team === 'B') {\n        let wordObj = this.state.gameWords.find(w => w.word_id === word);\n\n        if (wordObj.guessed === false) {\n          this.setState(prevState => {\n            return {\n              blue_score: prevState.blue_score + 1\n            };\n          });\n          bluePoints += 1;\n          localStorage.setItem(this.state.blueteamid, JSON.stringify(bluePoints));\n          axios.patch(`http://127.0.0.1:8000/codenames/games/word/${word}`, {\n            guessed: true\n          }).then(response => {\n            console.log(response.data);\n          });\n          axios.patch(`http://127.0.0.1:8000/codenames/blueTeam/${this.state.blueteamid}`, {\n            blue_team_score: bluePoints\n          }).then(response => {\n            console.log(response.data);\n          });\n        }\n\n        this.socketSendTeamPoints(redPoints, bluePoints);\n      }\n    };\n\n    this.socketSendTeamPoints = (red_team_points, blue_team_points) => {\n      var data = {\n        \"red_team_points\": red_team_points,\n        \"blue_team_points\": blue_team_points\n      };\n      this.state.wstp.send(JSON.stringify(data)); // console.log(data)\n    };\n\n    this.connectTeamPoints = () => {\n      var wstp = new WebSocket('ws://localhost:8000/teampoints/teampoints/' + this.state.gameid + '/');\n      let that = this; //cache the this\n\n      var connectInterval; //websocket onopen event listener\n\n      wstp.onopen = () => {\n        // console.log('connect team points component');\n        this.setState({\n          wstp: wstp\n        });\n        that.timeout = 250;\n        clearTimeout(connectInterval);\n      };\n\n      wstp.onclose = e => {\n        console.log(`Socket is closed. Reconnect will be attempted in ${Math.min(10000 / 1000, (that.timeout + that.timeout) / 1000)} second.`, e.reason);\n        that.timeout = that.timeout + that.timeout; //increment retry interval\n\n        connectInterval = setTimeout(this.checkTeamPoints, Math.min(1000, that.timeout));\n      }; // websocket onerror event listener\n\n\n      wstp.onerror = err => {\n        console.error(\"Socket encountered error: \", err.message, \"Closing socket\");\n        wstp.close();\n      };\n\n      wstp.onmessage = evt => {\n        // listen to data sent from the websocket server\n        const data = JSON.parse(evt.data);\n        console.log(data); // console.log(\"received clue!\")\n\n        let red_team_points = data.red_team_points;\n        let blue_team_points = data.blue_team_points;\n        this.setState(prevState => {\n          return {\n            red_score: red_team_points,\n            blue_score: blue_team_points\n          };\n        });\n      };\n\n      this.setState(prevState => {\n        return {\n          wstp: wstp\n        };\n      });\n    };\n\n    this.checkTeamPoints = () => {\n      const {\n        wstp\n      } = this.state.wstp;\n      if (!wstp || wstp.readyState === WebSocket.CLOSED) this.connectTeamPoints(); //check if websocket instance is closed, if so call `connect` function.\n    };\n\n    this.checkTurns = () => {\n      const {\n        ws_turn\n      } = this.state.ws_turn;\n      if (!ws_turn || ws_turn.readyState === WebSocket.CLOSED) this.connectTurns(); //check if websocket instance is closed, if so call `connect` function.\n    };\n\n    this.sendTurns = (team, player) => {\n      if (player !== null) {\n        this.state.ws_turn.send(JSON.stringify({\n          'nextTeam': team,\n          'nextPlayer': player\n        }));\n      } // console.log('this is the incoming players data', data);\n\n    };\n\n    this.updateRoundPlayer = (team, player, redIndex, blueIndex) => {\n      this.setState({\n        currentPlayer: player,\n        currentTeam: team,\n        rIndex: redIndex,\n        bIndex: blueIndex\n      });\n      this.sendTurns(team, player);\n    };\n\n    this.socketSendPlayers = player => {\n      var data = {\n        \"new_players\": player\n      };\n      this.state.wsp.send(JSON.stringify(data)); // console.log('this is the incoming players data', data);\n    };\n\n    this.connectPlayers = () => {\n      var wsp = new WebSocket('ws://localhost:8000/players/players/' + this.state.gameid + '/');\n      let that = this;\n      var connectInterval;\n\n      wsp.onopen = () => {\n        this.setState({\n          wsp: wsp\n        });\n        that.timeout = 250;\n        clearTimeout(connectInterval);\n      };\n\n      wsp.onclose = e => {\n        console.log(`Socket is closed. Reconnect will be attempted in ${Math.min(10000 / 1000, (that.timeout + that.timeout) / 1000)} second.`, e.reason);\n        that.timeout = that.timeout + that.timeout; //increment retry interval\n\n        connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\n      };\n\n      wsp.onerror = err => {\n        console.error(\"Socket encountered error: \", err.message, \"Closing socket\");\n        wsp.close();\n      };\n\n      wsp.onmessage = evt => {\n        const data = JSON.parse(evt.data);\n        let new_players = data.new_players;\n\n        if (!this.state.playersdata.includes(new_players)) {\n          let playersData = this.state.playersdata;\n          playersData.push(new_players);\n          this.setState({\n            playersdata: playersData\n          });\n        } // console.log('THIS IS THE NEWEST PLAYERS ,PLEASE SHOW ', new_players)\n\n      };\n\n      this.setState(prevState => {\n        return {\n          wsp: wsp\n        };\n      });\n    };\n\n    this.checkPlayers = () => {\n      const {\n        wsp\n      } = this.state.wsp;\n      if (!wsp || wsp.readyState === WebSocket.CLOSED) this.connectPlayers();\n    };\n\n    this.connectDoubleAgent = () => {\n      var ws = new WebSocket('ws://localhost:8000/doubleagent/doubleagent/' + this.state.gameid + '/');\n      let that = this; // cache the this\n\n      var connectInterval; // websocket onopen event listener\n\n      ws.onopen = () => {\n        console.log(\"connected websocket main component\");\n        this.setState({\n          doubleAgentWS: ws\n        });\n        that.timeout = 250; // reset timer to 250 on open of websocket connection \n\n        clearTimeout(connectInterval); // clear Interval on on open of websocket connection\n      }; // websocket onclose event listener\n\n\n      ws.onclose = e => {\n        console.log(`Socket is closed. Reconnect will be attempted in ${Math.min(10000 / 1000, (that.timeout + that.timeout) / 1000)} second.`, e.reason);\n        that.timeout = that.timeout + that.timeout; //increment retry interval\n\n        connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\n      }; // websocket onerror event listener\n\n\n      ws.onerror = err => {\n        console.error(\"Socket encountered error: \", err.message, \"Closing socket\");\n        ws.close();\n      };\n\n      ws.onmessage = evt => {\n        // listen to data sent from the websocket server\n        const data = JSON.parse(evt.data);\n        console.log(data);\n        console.log(\"received clue!\");\n        let team = data.team;\n        let doubleAgent = { ...this.state.doubleAgent\n        };\n        doubleAgent.category = team;\n        this.setState(prevState => {\n          return {\n            // Add\n            agentClicked: true,\n            // Make it so the I WANT FIRST goes away\n            doubleAgent: doubleAgent\n          };\n        });\n        this.updateGameWords(this.state.gameid);\n      };\n\n      this.setState(prevState => {\n        return {\n          doubleAgentWS: ws\n        };\n      });\n    };\n\n    this.state = {\n      room_key: '',\n      roomid: '',\n      nickname: '',\n      team: '',\n      playerid: '',\n      task: '',\n      red_score: 0,\n      blue_score: 0,\n      gameid: '',\n      gameData: '',\n      gameWords: '',\n      doubleAgent: '',\n      doubleAgentIndex: '',\n      playersdata: '',\n      agentClicked: false,\n      redteamid: '',\n      blueteamid: '',\n      loadedPlayers: false,\n      //Websocket Team Points\n      wstp: null,\n      //Websocket Players\n      wsp: null,\n      //WebSocket Double Agent\n      doubleAgentWS: '',\n      ws_turn: null,\n      currentTeam: 'R',\n      currentPlayer: null,\n      blueOperatives: [],\n      bIndex: 0,\n      redOperatives: [],\n      rIndex: 0,\n      wantedFirst: 'R'\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.state.task === 'S' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.agentClicked === false ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.setDoubleAgent,\n            children: \"I WANT FIRST\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 624,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(SpymastersGame, {\n            room_key: this.state.room_key,\n            gameWords: this.state.gameWords,\n            increaseTeamPoints: this.increaseTeamPoints,\n            redPoints: this.state.red_score,\n            bluePoints: this.state.blue_score,\n            playersdata: this.state.playersdata,\n            gameid: this.state.gameid\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 625,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 623,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(SpymastersGame, {\n            room_key: this.state.room_key,\n            gameWords: this.state.gameWords,\n            increaseTeamPoints: this.increaseTeamPoints,\n            redPoints: this.state.red_score,\n            bluePoints: this.state.blue_score,\n            playersdata: this.state.playersdata,\n            gameid: this.state.gameid,\n            currentTeam: this.state.currentTeam,\n            currentPlayer: this.state.currentPlayer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 639,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 638,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 620,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(OperativesGame, {\n        room_key: this.state.room_key,\n        gameWords: this.state.gameWords,\n        gameid: this.state.gameid,\n        increaseTeamPoints: this.increaseTeamPoints,\n        redPoints: this.state.red_score,\n        bluePoints: this.state.blue_score,\n        playersdata: this.state.playersdata,\n        currentTeam: this.state.currentTeam,\n        currentPlayer: this.state.currentPlayer,\n        updateRoundPlayer: this.updateRoundPlayer,\n        playerid: this.state.playerid,\n        bIndex: this.state.bIndex,\n        rIndex: this.state.rIndex\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 655,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 615,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/mnt/c/Users/micha/Codenames/codenames/codenames/src/Components/GamePage/Game.js"],"names":["React","Component","axios","SpymastersGame","OperativesGame","Game","constructor","componentDidMount","gameWords","props","location","state","i","length","category","setState","doubleAgent","doubleAgentIndex","get","then","res","playersdata","data","playerExist","game_id","gameid","room","room_key","user_id","playerid","post","operative_screen_name","nickname","team","role","task","response","blueOperatives","redOperatives","roomid","gameData","redteamid","blueteamid","updateGameWords","connectTurns","red_score","red_team_score","blue_score","blue_team_score","localRedTeamId","localStorage","getItem","localBlueTeamId","Number","connectTeamPoints","connectPlayers","connectDoubleAgent","componentDidUpdate","prevProps","prevState","wsp","readyState","loadedPlayers","console","log","socketSendPlayers","setIntial","player","wantedFirst","bIndex","player_id","bIdx","rIndex","rIdx","updateRoundPlayer","currentPlayer","currentTeam","ws_turn","WebSocket","that","connectInterval","onopen","timeout","clearTimeout","onclose","e","Math","min","reason","setTimeout","checkTurns","onerror","err","error","message","close","onmessage","evt","JSON","parse","nextPlayingTeam","nextTeam","nextUser","nextPlayer","setDoubleAgent","agentClicked","put","word_id","doubleAgentWS","send","stringify","increaseTeamPoints","word","redPoints","bluePoints","wordObj","find","w","guessed","setItem","patch","socketSendTeamPoints","red_team_points","blue_team_points","wstp","checkTeamPoints","CLOSED","sendTurns","redIndex","blueIndex","check","new_players","includes","playersData","push","checkPlayers","ws","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport './Game.css'\nimport axios from 'axios'\nimport SpymastersGame from './Spymasters/SpymastersGame.js'\nimport OperativesGame from './Operatives/OperativesGame.js'\n\n\nclass Game extends Component {\n    constructor() {\n        super()\n        this.state = {\n            room_key: '',\n            roomid: '',\n            nickname: '',\n            team: '',\n            playerid: '',\n            task: '',\n            red_score: 0,\n            blue_score: 0,\n            gameid: '',\n            gameData: '', \n            gameWords: '',\n            doubleAgent: '',\n            doubleAgentIndex: '',\n            playersdata: '',\n            agentClicked: false,\n\n            redteamid: '',\n            blueteamid: '',\n            \n            loadedPlayers: false,\n            //Websocket Team Points\n            wstp: null,\n            //Websocket Players\n            wsp: null,\n            //WebSocket Double Agent\n            doubleAgentWS: '',\n\n            ws_turn: null,\n            currentTeam: 'R',\n            currentPlayer: null,\n\n            blueOperatives: [],\n            bIndex: 0,\n            redOperatives: [],\n            rIndex: 0,\n\n            wantedFirst: 'R'\n        }\n    }\n\n    componentDidMount = async () => {\n\n        let gameWords = this.props.location.state.gameWords;\n        for(let i = 0; i < gameWords.length; i++) {\n            if(gameWords[i].category === 'D') {\n                this.setState({\n                    doubleAgent: gameWords[i],\n                    doubleAgentIndex: i\n                })\n            }\n        }\n\n        await axios.get('http://127.0.0.1:8000/codenames/players').then(res => {\n            this.setState({\n                playersdata: res.data\n            })\n            let playerExist = false;\n            for(let i = 0; i < res.data.length; i++) {\n                if(res.data[i].game_id === this.props.location.state.gameid && res.data[i].room === this.props.location.state.room_key && res.data[i].user_id === this.props.location.state.playerid) {\n                    playerExist = true;\n                }\n            }\n\n            if(playerExist === false) {\n                axios.post('http://127.0.0.1:8000/codenames/players', {\n                    operative_screen_name: this.props.location.state.nickname,\n                    team: this.props.location.state.team,\n                    role: this.props.location.state.task,\n                    room: this.props.location.state.room_key,\n                    game_id: this.props.location.state.gameid,\n                    user_id: this.props.location.state.playerid\n                }).then(response => {\n\n                    if(this.props.location.state.team === 'B' && this.props.location.state.task === 'O') {\n                        this.setState({\n                            blueOperatives: [...this.state.blueOperatives, response.data]\n                        })\n                    } else if(this.props.location.state.team === 'R' && this.props.location.state.task === 'O') {\n                        this.setState({\n                            redOperatives: [...this.state.redOperatives, response.data]\n                        })\n                    }\n\n                    this.setState({\n                        playersdata: [...this.state.playersdata, response.data],\n                    })\n                })\n            }\n        })\n        \n        this.setState({\n            room_key: this.props.location.state.room_key,\n            roomid: this.props.location.state.roomid,\n            nickname: this.props.location.state.nickname,\n            team: this.props.location.state.team,\n            task: this.props.location.state.task,\n            gameid: this.props.location.state.gameid,\n            gameData: this.props.location.state.gameData,\n            gameWords: this.props.location.state.gameWords,\n            playerid: this.props.location.state.playerid,\n            redteamid: this.props.location.state.redteamid,\n            blueteamid: this.props.location.state.blueteamid,\n        })\n\n        this.updateGameWords(this.props.location.state.gameid)\n        this.connectTurns()\n\n        await axios.get(`http://127.0.0.1:8000/codenames/redTeam/${this.state.redteamid}`)\n        .then(response => {\n            this.setState({\n                red_score:response.data.red_team_score\n            })\n        })\n        await axios.get(`http://127.0.0.1:8000/codenames/blueTeam/${this.state.blueteamid}`)\n        .then(response => {\n            this.setState({\n                blue_score:response.data.blue_team_score\n            })\n        })\n\n        const localRedTeamId = localStorage.getItem(this.state.redteamid);\n        const localBlueTeamId = localStorage.getItem(this.state.blueteamid);\n\n        if(localRedTeamId && localBlueTeamId) {\n            // console.log(localRedTeamId, localBlueTeamId);\n            this.setState({\n                red_score: Number(localRedTeamId),\n                blue_score: Number(localBlueTeamId)\n            })\n        }\n\n        this.connectTeamPoints();\n        this.connectPlayers();  \n        this.connectDoubleAgent();\n        // if(this.state.currentPlayer === null) {this.setIntial()}\n        // this.setIntial()\n\n    }\n\n    componentDidUpdate = (prevProps, prevState) => {\n\n        // if(this.state.currentPlayer === null) {\n        //     this.connectTeamPoints();\n        //     this.setIntial()\n        // }\n\n        // if(this.state.currentPlayer === null) {\n        //     console.log(\"attempt to select initial player\")\n        //     this.setIntial()\n        // } else if(this.state.currentPlayer !== null) {\n        //     console.log(\"player was already set\")\n        //     console.log(this.state.currentPlayer)\n        // } else {\n        //     console.log(\"compdidupdate else stmnt\")\n        // }\n\n        if(this.state.wsp && this.state.wsp.readyState === 1 && this.state.loadedPlayers === false) {\n            console.log('the ready state is working', this.state.playersdata[this.state.playersdata.length-1])\n            this.socketSendPlayers(this.state.playersdata[this.state.playersdata.length-1]);\n            this.setState({\n                loadedPlayers: true\n            })\n        }\n    }\n\n    setIntial = () => {\n\n        console.log(this.state.redOperatives.length)\n\n        var player;\n        var team;\n        \n        if(this.state.wantedFirst === 'B' && this.state.blueOperatives.length > 0) {\n            player = this.state.blueOperatives[this.state.bIndex].player_id\n            team = 'B'\n            var bIdx = this.state.bIndex + 1\n            this.setState({bIndex: bIdx})\n        } else if(this.state.wantedFirst === 'R' && this.state.redOperatives.length > 0) {\n            player = this.state.redOperatives[this.state.rIndex].player_id\n            team = 'R'\n            var rIdx = this.state.rIndex + 1\n            this.setState({rIndex: rIdx})\n        }\n        this.updateRoundPlayer(team, player, this.state.rIndex, this.state.bIndex)\n        this.setState({\n            currentPlayer: player,\n            currentTeam: team\n        })\n\n    }\n\n    connectTurns = () => {\n        var ws_turn = new WebSocket('ws://localhost:8000/turns/turns/' + this.state.gameid + '/');\n        let that = this; //cache the this\n        var connectInterval;\n\n        //websocket onopen event listener\n        ws_turn.onopen = () => {\n            // console.log('connect team points component');\n            this.setState({ ws_turn: ws_turn });\n\n            that.timeout = 250;\n            clearTimeout(connectInterval);\n        }\n\n        ws_turn.onclose = e => {\n            console.log(\n                `Socket is closed. Reconnect will be attempted in ${Math.min(\n                    10000 / 1000,\n                    (that.timeout + that.timeout) / 1000\n                )} second.`,\n                e.reason\n            );\n\n            that.timeout = that.timeout + that.timeout; //increment retry interval\n            connectInterval = setTimeout(this.checkTurns, Math.min(1000, that.timeout));\n        }\n\n        // websocket onerror event listener\n        ws_turn.onerror = err => {\n            console.error(\n                \"Socket encountered error: \",\n                err.message,\n                \"Closing socket\"\n            );\n\n            ws_turn.close();\n        };\n\n        ws_turn.onmessage = evt => {\n            // listen to data sent from the websocket server\n            const data = JSON.parse(evt.data)\n            console.log(data)\n            console.log(\"tryeng to print event out\")\n            console.log(evt)\n            // console.log(\"received clue!\")\n            let nextPlayingTeam = data.nextTeam\n            let nextUser= data.nextPlayer\n            this.setState(prevState => {\n                return {\n                    nextTeam: nextPlayingTeam,\n                    nextPlayer: nextUser\n                }\n            })\n        };\n        this.setState(prevState => {\n            return {\n                ws_turn: ws_turn\n            }\n        })\n    }\n\n    \n    setDoubleAgent = () => {\n        let doubleAgent = { ...this.state.doubleAgent}; \n        doubleAgent.category = this.state.team;\n        let agentClicked = this.state.agentClicked;\n        agentClicked = true;\n        this.setState({\n            doubleAgent,\n            agentClicked\n        })\n\n        axios.put(`http://127.0.0.1:8000/codenames/games/word/${this.state.doubleAgent.word_id}`, doubleAgent)\n            .then(res => {\n                console.log(res)\n                this.updateGameWords(this.state.gameid)\n            })\n\n        var data = {\n            \"number\": this.state.doubleAgentIndex,\n            \"team\": this.state.team\n        }\n        this.state.doubleAgentWS.send(JSON.stringify(data)) // send to channel\n        console.log(data)\n    }\n\n    updateGameWords = (gameid) => {\n        axios.get(`http://127.0.0.1:8000/codenames/games/${gameid}`).then(res => {\n            this.setState({ \n                gameWords: res.data.gameWords \n            })\n        \n        })\n    }\n\n    //from the card component, the words id and its corresponding team will be sent here to increase the points and change the guess to true accordingly\n    increaseTeamPoints = (team, word) => {\n        let redPoints = this.state.red_score\n        let bluePoints = this.state.blue_score\n        if(team === 'R'){\n            let wordObj = this.state.gameWords.find(w => w.word_id === word);\n            if(wordObj.guessed === false) {\n                this.setState(prevState => {\n                    return {\n                        red_score: prevState.red_score+1,\n                    }\n                })\n                redPoints += 1\n    \n                localStorage.setItem(this.state.redteamid, JSON.stringify(redPoints));\n\n                axios.patch(`http://127.0.0.1:8000/codenames/games/word/${word}`, {guessed:true}).then(response => {\n                    console.log(response.data)\n                })\n                axios.patch(`http://127.0.0.1:8000/codenames/redTeam/${this.state.redteamid}`, {red_team_score: redPoints}).then(response => {\n                    console.log(response.data)\n                })\n            }\n            \n            this.socketSendTeamPoints(redPoints, bluePoints);\n            // this.socketSendPlayers(this.state.playersdata[this.state.playersdata.length-1]);\n        }\n        else if(team === 'B'){\n            let wordObj = this.state.gameWords.find(w => w.word_id === word);\n            if(wordObj.guessed === false) {\n                this.setState(prevState => {\n                    return {\n                        blue_score: prevState.blue_score+1,\n                    }\n                })\n                bluePoints += 1\n\n                localStorage.setItem(this.state.blueteamid, JSON.stringify(bluePoints));\n\n                axios.patch(`http://127.0.0.1:8000/codenames/games/word/${word}`, {guessed:true}).then(response => {\n                    console.log(response.data)\n                })\n                axios.patch(`http://127.0.0.1:8000/codenames/blueTeam/${this.state.blueteamid}`, {blue_team_score: bluePoints}).then(response => {\n                    console.log(response.data)\n                })\n\n            }\n            this.socketSendTeamPoints(redPoints, bluePoints);\n        }\n\n    }\n\n    socketSendTeamPoints = (red_team_points, blue_team_points) => {\n        var data = {\n            \"red_team_points\": red_team_points,\n            \"blue_team_points\": blue_team_points\n        }\n\n        this.state.wstp.send(JSON.stringify(data))\n        // console.log(data)\n    }\n\n    connectTeamPoints = () => {\n        var wstp = new WebSocket('ws://localhost:8000/teampoints/teampoints/' + this.state.gameid + '/');\n        let that = this; //cache the this\n        var connectInterval;\n\n        //websocket onopen event listener\n        wstp.onopen = () => {\n            // console.log('connect team points component');\n            this.setState({ wstp: wstp });\n\n            that.timeout = 250;\n            clearTimeout(connectInterval);\n        }\n\n        wstp.onclose = e => {\n            console.log(\n                `Socket is closed. Reconnect will be attempted in ${Math.min(\n                    10000 / 1000,\n                    (that.timeout + that.timeout) / 1000\n                )} second.`,\n                e.reason\n            );\n\n            that.timeout = that.timeout + that.timeout; //increment retry interval\n            connectInterval = setTimeout(this.checkTeamPoints, Math.min(1000, that.timeout));\n        }\n\n        // websocket onerror event listener\n        wstp.onerror = err => {\n            console.error(\n                \"Socket encountered error: \",\n                err.message,\n                \"Closing socket\"\n            );\n\n            wstp.close();\n        };\n\n        wstp.onmessage = evt => {\n            // listen to data sent from the websocket server\n            const data = JSON.parse(evt.data)\n            console.log(data)\n            // console.log(\"received clue!\")\n            let red_team_points = data.red_team_points\n            let blue_team_points = data.blue_team_points\n            this.setState(prevState => {\n                return {\n                    red_score: red_team_points,\n                    blue_score: blue_team_points\n                }\n            })\n        };\n        this.setState(prevState => {\n            return {\n                wstp: wstp\n            }\n        })\n    };\n\n    /**\n     * utilited by the @function connect to check if the connection is close, if so attempts to reconnect\n     */\n    checkTeamPoints = () => {\n        const { wstp } = this.state.wstp;\n        if (!wstp || wstp.readyState === WebSocket.CLOSED) this.connectTeamPoints(); //check if websocket instance is closed, if so call `connect` function.\n    };\n\n    checkTurns = () => {\n        const { ws_turn } = this.state.ws_turn;\n        if (!ws_turn || ws_turn.readyState === WebSocket.CLOSED) this.connectTurns(); //check if websocket instance is closed, if so call `connect` function.\n    };\n\n    // sendTurns = (team, player) => {\n    //     if(team !== null && player !== null ) {\n    //         console.log(\"in sendturns\")\n    //         console.log(team)\n    //         console.log(player)\n    //         console.log(\"in sendturns\")\n    //         if(player !== null && team !== null && this.state.ws_turn !== null) {\n    //             while(WebSocket.CONNECTING){}\n    //             if(WebSocket.OPEN){\n    //             this.state.ws_turn.send(JSON.stringify({\n    //                 'nextTeam': team,\n    //                 'nextPlayer': player\n    //             }))}\n    //         }\n    //     }\n    // }\n\n    sendTurns = (team, player) => {\n        if(player !== null){\n            this.state.ws_turn.send(JSON.stringify({\n                'nextTeam': team,\n                'nextPlayer': player\n            }))\n        }\n        \n        // console.log('this is the incoming players data', data);\n    }\n\n    updateRoundPlayer = (team, player, redIndex, blueIndex) => {\n        this.setState({\n            currentPlayer: player,\n            currentTeam: team,\n            rIndex: redIndex,\n            bIndex: blueIndex\n        })\n        this.sendTurns(team, player)\n    }\n    \n    socketSendPlayers = (player) => {\n        var data = {\n            \"new_players\": player\n        }\n        this.state.wsp.send(JSON.stringify(data))\n        \n        // console.log('this is the incoming players data', data);\n    }\n\n    connectPlayers = () => {\n        var wsp = new WebSocket('ws://localhost:8000/players/players/' + this.state.gameid + '/');\n        let that = this;\n        var connectInterval;\n\n        wsp.onopen = () => {\n            this.setState ({ wsp: wsp });\n\n            that.timeout = 250;\n            clearTimeout(connectInterval);\n        };\n\n        wsp.onclose = e => {\n            console.log(\n                `Socket is closed. Reconnect will be attempted in ${Math.min(\n                    10000 / 1000,\n                    (that.timeout + that.timeout) / 1000\n                )} second.`,\n                e.reason\n            );\n\n            that.timeout = that.timeout + that.timeout; //increment retry interval\n            connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\n        }\n\n        wsp.onerror = err => {\n            console.error(\n                \"Socket encountered error: \",\n                err.message,\n                \"Closing socket\"\n            );\n\n            wsp.close();\n        };\n\n        wsp.onmessage = evt => {\n            const data = JSON.parse(evt.data)\n            let new_players = data.new_players\n\n            if(!this.state.playersdata.includes(new_players)) {\n                let playersData = this.state.playersdata;\n                playersData.push(new_players);\n                this.setState({\n                    playersdata: playersData\n                })\n            }\n            \n            // console.log('THIS IS THE NEWEST PLAYERS ,PLEASE SHOW ', new_players)\n        };\n\n        this.setState(prevState => {\n            return {\n                wsp: wsp\n            }\n        })\n\n    };\n\n    checkPlayers = () => {\n        const { wsp } = this.state.wsp;\n        if(!wsp || wsp.readyState === WebSocket.CLOSED) this.connectPlayers();\n    }\n\n    /**\n     * @function connectDoubleAgent\n     * This function establishes the connect with the websocket and also ensures \n     * constant reconnection if connection closes\n     */\n     connectDoubleAgent = () => {\n        var ws = new WebSocket('ws://localhost:8000/doubleagent/doubleagent/' + this.state.gameid + '/');\n        let that = this; // cache the this\n        var connectInterval;\n\n        // websocket onopen event listener\n        ws.onopen = () => {\n            console.log(\"connected websocket main component\");\n            this.setState({ doubleAgentWS: ws });\n\n            that.timeout = 250; // reset timer to 250 on open of websocket connection \n            clearTimeout(connectInterval); // clear Interval on on open of websocket connection\n        };\n\n        // websocket onclose event listener\n        ws.onclose = e => {\n            console.log(\n                `Socket is closed. Reconnect will be attempted in ${Math.min(\n                    10000 / 1000,\n                    (that.timeout + that.timeout) / 1000\n                )} second.`,\n                e.reason\n            );\n\n            that.timeout = that.timeout + that.timeout; //increment retry interval\n            connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\n        };\n\n        // websocket onerror event listener\n        ws.onerror = err => {\n            console.error(\n                \"Socket encountered error: \",\n                err.message,\n                \"Closing socket\"\n            );\n\n            ws.close();\n        };\n        ws.onmessage = evt => {\n            // listen to data sent from the websocket server\n            const data = JSON.parse(evt.data)\n            console.log(data)\n            console.log(\"received clue!\")\n            let team = data.team\n\n            let doubleAgent = { ...this.state.doubleAgent}; \n            doubleAgent.category = team;\n\n            this.setState(prevState => {\n                return {\n                    // Add\n                    agentClicked: true, // Make it so the I WANT FIRST goes away\n                    doubleAgent: doubleAgent\n\n                }\n            })\n            this.updateGameWords(this.state.gameid)\n        };\n        this.setState(prevState => {\n            return {\n                doubleAgentWS: ws\n            }\n        })\n    };\n\n    render() {\n        \n        return(\n            <div>\n                {\n\n                    this.state.task === 'S' ?   \n                    \n                    <div>\n                        {\n                        this.state.agentClicked === false ?\n                        <div>\n                            <button onClick={this.setDoubleAgent}>I WANT FIRST</button> \n                            <SpymastersGame \n                                room_key = {this.state.room_key}\n                                gameWords = {this.state.gameWords}\n                                increaseTeamPoints = {this.increaseTeamPoints}\n                                redPoints = {this.state.red_score}\n                                bluePoints = {this.state.blue_score}\n                                playersdata = {this.state.playersdata}\n                                gameid = {this.state.gameid}\n                            />\n                        </div>\n\n                        :\n\n                        <div>\n                            <SpymastersGame \n                                    room_key = {this.state.room_key}\n                                    gameWords = {this.state.gameWords}\n                                    increaseTeamPoints = {this.increaseTeamPoints}\n                                    redPoints = {this.state.red_score}\n                                    bluePoints = {this.state.blue_score}\n                                    playersdata = {this.state.playersdata}\n                                    gameid = {this.state.gameid}\n                                    currentTeam = {this.state.currentTeam}\n                                    currentPlayer = {this.state.currentPlayer}\n                            />\n                        </div>\n                        }\n                    </div>\n                    : \n\n                    <OperativesGame \n                        room_key = {this.state.room_key}\n                        gameWords = {this.state.gameWords}\n                        gameid = {this.state.gameid}\n                        increaseTeamPoints = {this.increaseTeamPoints}\n                        redPoints = {this.state.red_score}\n                        bluePoints = {this.state.blue_score}\n                        playersdata = {this.state.playersdata}\n                        currentTeam = {this.state.currentTeam}\n                        currentPlayer = {this.state.currentPlayer}\n                        updateRoundPlayer = {this.updateRoundPlayer}\n                        playerid = {this.state.playerid}\n                        bIndex = {this.state.bIndex}\n                        rIndex = {this.state.rIndex}\n                    />\n                }\n            </div>\n        )\n    }\n}\n\nexport default Game"]},"metadata":{},"sourceType":"module"}