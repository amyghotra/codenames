{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/micha/Codenames/codenames/codenames/src/Components/GamePage/Game.js\";\nimport React, { Component } from 'react';\nimport './Game.css';\nimport axios from 'axios';\nimport SpymastersGame from './Spymasters/SpymastersGame.js';\nimport OperativesGame from './Operatives/OperativesGame.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Game extends Component {\n  constructor() {\n    super();\n\n    this.componentDidMount = async () => {\n      let gameWords = this.props.location.state.gameWords;\n\n      for (let i = 0; i < gameWords.length; i++) {\n        if (gameWords[i].category === 'D') {\n          this.setState({\n            doubleAgent: gameWords[i],\n            doubleAgentIndex: i\n          });\n        }\n      }\n\n      this.setTotalCards();\n      await axios.get('http://127.0.0.1:8000/codenames/players').then(res => {\n        this.setState({\n          playersdata: res.data\n        });\n        let playerExist = false;\n\n        for (let i = 0; i < res.data.length; i++) {\n          if (res.data[i].game_id === this.props.location.state.gameid && res.data[i].room === this.props.location.state.room_key && res.data[i].user_id === this.props.location.state.playerid) {\n            playerExist = true;\n          }\n        }\n\n        if (playerExist === false) {\n          axios.post('http://127.0.0.1:8000/codenames/players', {\n            operative_screen_name: this.props.location.state.nickname,\n            team: this.props.location.state.team,\n            role: this.props.location.state.task,\n            room: this.props.location.state.room_key,\n            game_id: this.props.location.state.gameid,\n            user_id: this.props.location.state.playerid\n          }).then(response => {\n            this.setState({\n              playersdata: [...this.state.playersdata, response.data]\n            });\n          });\n        }\n      });\n      this.setState({\n        room_key: this.props.location.state.room_key,\n        roomid: this.props.location.state.roomid,\n        nickname: this.props.location.state.nickname,\n        team: this.props.location.state.team,\n        task: this.props.location.state.task,\n        gameid: this.props.location.state.gameid,\n        gameData: this.props.location.state.gameData,\n        gameWords: this.props.location.state.gameWords,\n        playerid: this.props.location.state.playerid,\n        redteamid: this.props.location.state.redteamid,\n        blueteamid: this.props.location.state.blueteamid\n      });\n      this.updateGameWords(this.props.location.state.gameid);\n      await axios.get(`http://127.0.0.1:8000/codenames/redTeam/${this.state.redteamid}`).then(response => {\n        this.setState({\n          red_score: response.data.red_team_score\n        });\n      });\n      await axios.get(`http://127.0.0.1:8000/codenames/blueTeam/${this.state.blueteamid}`).then(response => {\n        this.setState({\n          blue_score: response.data.blue_team_score\n        });\n      });\n      const localRedTeamId = localStorage.getItem(this.state.redteamid);\n      const localBlueTeamId = localStorage.getItem(this.state.blueteamid);\n\n      if (localRedTeamId && localBlueTeamId) {\n        // console.log(localRedTeamId, localBlueTeamId);\n        this.setState({\n          red_score: Number(localRedTeamId),\n          blue_score: Number(localBlueTeamId)\n        });\n      }\n\n      this.connectTeamPoints();\n      this.connectPlayers(); // ATTEMP WS FOR WIN LOSE PROMPT\n\n      this.connectWinLose();\n      this.connectDoubleAgent();\n      /* Just in case of refresh */\n\n      let totalBlueCards = this.state.totalBlueCards;\n      let totalRedCards = this.state.totalRedCards;\n      let redPoints = this.state.red_score;\n      let bluePoints = this.state.blue_score;\n\n      if (redPoints === totalRedCards) {\n        this.setState({\n          winningTeam: \"R\",\n          losingTeam: \"B\"\n        });\n        let winningTeam = \"R\";\n        this.showPopUp(winningTeam);\n      } else if (bluePoints === totalBlueCards) {\n        this.setState({\n          winningTeam: \"B\",\n          losingTeam: \"R\"\n        });\n        let winningTeam = \"B\";\n        this.showPopUp(winningTeam);\n      }\n    };\n\n    this.componentDidUpdate = (prevProps, prevState) => {\n      if (this.state.wsp && this.state.wsp.readyState === 1 && this.state.loadedPlayers === false) {\n        console.log('the ready state is working', this.state.playersdata[this.state.playersdata.length - 1]);\n        this.socketSendPlayers(this.state.playersdata[this.state.playersdata.length - 1]);\n        this.setState({\n          loadedPlayers: true\n        });\n      }\n    };\n\n    this.setDoubleAgent = () => {\n      let doubleAgent = { ...this.state.doubleAgent\n      };\n      doubleAgent.category = this.state.team;\n      let agentClicked = this.state.agentClicked;\n      agentClicked = true;\n      this.setState({\n        doubleAgent,\n        agentClicked\n      }); // localStorage.setItem(this.state.gameid, agentClicked)\n\n      axios.put(`http://127.0.0.1:8000/codenames/games/word/${this.state.doubleAgent.word_id}`, doubleAgent).then(res => {\n        console.log(res);\n        this.updateGameWords(this.state.gameid);\n      });\n\n      if (doubleAgent.category === 'R') {\n        this.setState(prevState => {\n          return {\n            totalRedCards: prevState.totalRedCards + 1\n          };\n        });\n      } else if (doubleAgent.category === 'B') {\n        this.setState(prevState => {\n          return {\n            totalBlueCards: prevState.totalBlueCards + 1\n          };\n        });\n      }\n    };\n\n    this.updateGameWords = gameid => {\n      axios.get(`http://127.0.0.1:8000/codenames/games/${gameid}`).then(res => {\n        this.setState({\n          gameWords: res.data.gameWords\n        });\n      });\n    };\n\n    this.increaseTeamPoints = (team, word) => {\n      let totalBlueCards = this.state.totalBlueCards;\n      let totalRedCards = this.state.totalRedCards;\n      let win = this.state.winningTeam;\n      let lose = this.state.losingTeam;\n      let redPoints = this.state.red_score;\n      let bluePoints = this.state.blue_score;\n\n      if (team === 'R') {\n        let wordObj = this.state.gameWords.find(w => w.word_id === word);\n\n        if (wordObj.guessed === false) {\n          this.setState(prevState => {\n            return {\n              red_score: prevState.red_score + 1\n            };\n          });\n          redPoints += 1;\n          localStorage.setItem(this.state.redteamid, JSON.stringify(redPoints));\n          axios.patch(`http://127.0.0.1:8000/codenames/games/word/${word}`, {\n            guessed: true\n          }).then(response => {\n            console.log(response.data);\n          });\n          axios.patch(`http://127.0.0.1:8000/codenames/redTeam/${this.state.redteamid}`, {\n            red_team_score: redPoints\n          }).then(response => {\n            console.log(response.data);\n          });\n        }\n\n        this.socketSendTeamPoints(redPoints, bluePoints); // this.socketSendPlayers(this.state.playersdata[this.state.playersdata.length-1]);\n      } else if (team === 'B') {\n        let wordObj = this.state.gameWords.find(w => w.word_id === word);\n\n        if (wordObj.guessed === false) {\n          this.setState(prevState => {\n            return {\n              blue_score: prevState.blue_score + 1\n            };\n          });\n          bluePoints += 1;\n          localStorage.setItem(this.state.blueteamid, JSON.stringify(bluePoints));\n          axios.patch(`http://127.0.0.1:8000/codenames/games/word/${word}`, {\n            guessed: true\n          }).then(response => {\n            console.log(response.data);\n          });\n          axios.patch(`http://127.0.0.1:8000/codenames/blueTeam/${this.state.blueteamid}`, {\n            blue_team_score: bluePoints\n          }).then(response => {\n            console.log(response.data);\n          });\n        }\n\n        this.socketSendTeamPoints(redPoints, bluePoints);\n      } // if assassin card is guessed\n      else if (team === 'A') {\n        let wordObj = this.state.gameWords.find(w => w.word_id === word); // let currentTeam = this.state.currentTeam;\n        // console.log(currentTeam);\n\n        if (wordObj.guessed === false) {\n          // bluePoints += 1\n          this.setState({\n            assassinGuessed: true\n          });\n\n          if (this.state.team === 'R') {\n            this.setState({\n              winningTeam: \"B\",\n              losingTeam: \"R\"\n            });\n            let winningTeam = \"B\";\n            let win = 'B';\n            let lose = 'R';\n            this.socketSendWinLose(win, lose);\n            this.showPopUp(winningTeam);\n          } else if (this.state.team === 'B') {\n            this.setState({\n              winningTeam: \"R\",\n              losingTeam: \"B\"\n            });\n            let winningTeam = \"R\";\n            let win = 'R';\n            let lose = 'B';\n            this.socketSendWinLose(win, lose);\n            this.showPopUp(winningTeam);\n          } // localStorage.setItem(this.state.blueteamid, JSON.stringify(bluePoints));\n\n\n          axios.patch(`http://127.0.0.1:8000/codenames/games/word/${word}`, {\n            guessed: true\n          }).then(response => {\n            console.log(response.data);\n          });\n        }\n      }\n\n      if (redPoints === totalRedCards) {\n        this.setState({\n          winningTeam: \"R\",\n          losingTeam: \"B\"\n        });\n        let winningTeam = \"R\";\n        win = 'R';\n        lose = 'B'; // ATTEMPT\n\n        this.socketSendWinLose(win, lose);\n        console.log('RED WIN');\n        this.showPopUp(winningTeam);\n      } else if (bluePoints === totalBlueCards) {\n        this.setState({\n          winningTeam: \"B\",\n          losingTeam: \"R\"\n        });\n        win = 'B';\n        lose = 'R';\n        let winningTeam = \"B\"; // ATTEMPT\n\n        this.socketSendWinLose(win, lose);\n        console.log('BLUE WIN');\n        this.showPopUp(winningTeam);\n      }\n    };\n\n    this.socketSendWinLose = (winningTeam, losingTeam) => {\n      var data = {\n        \"winningTeam\": winningTeam,\n        \"losingTeam\": losingTeam\n      };\n      this.state.wswl.send(JSON.stringify(data));\n      console.log('SENT WIN LOSE TO OTHERS!!!!!!!!!');\n    };\n\n    this.setTotalCards = () => {\n      let gameWords = this.props.location.state.gameWords;\n\n      for (let i = 0; i < gameWords.length; i++) {\n        if (gameWords[i].category === 'R') {\n          // this.setState({\n          //     doubleAgent: gameWords[i],\n          //     doubleAgentIndex: i\n          // })\n          this.setState(prevState => {\n            return {\n              totalRedCards: prevState.totalRedCards + 1\n            };\n          });\n        } else if (gameWords[i].category === 'B') {\n          // this.setState({\n          //     doubleAgent: gameWords[i],\n          //     doubleAgentIndex: i\n          // })\n          this.setState(prevState => {\n            return {\n              totalBlueCards: prevState.totalBlueCards + 1\n            };\n          });\n        }\n      } //this.showPopUp()\n\n    };\n\n    this.showPopUp = winningTeam => {\n      //let winningScreenIsOpen = this.state.winningScreenIsOpen\n      let team = this.props.location.state.team;\n      console.log(winningTeam); //console.log(winningScreenIsOpen)\n      //if there is a winning team\n\n      if (winningTeam !== \"\") {\n        this.setState({\n          winningScreenIsOpen: true\n        }); //this works\n\n        if (winningTeam === \"R\") {\n          if (team === 'R') {\n            //console.log(\"winning team is R has been called!\")\n            //let statusMessage = 'CONGRATS! YOUR TEAM WON!'\n            this.setState({\n              statusMessage: 'CONGRATS! YOUR TEAM WON!'\n            });\n          } else {\n            //console.log(\"winning team is Blue has been called!\")\n            //let statusMessage = 'SORRY! YOUR TEAM LOST!'\n            this.setState({\n              statusMessage: 'SORRY! YOUR TEAM LOST!'\n            });\n          }\n        } else if (winningTeam === \"B\") {\n          //console.log(\"winning team is B has been called!\")\n          if (team === 'B') {\n            console.log(\"winning team is Blue has been called!\");\n            this.setState({\n              statusMessage: 'CONGRATS! YOUR TEAM WON!'\n            });\n          } else {\n            this.setState({\n              statusMessage: 'SORRY! YOUR TEAM LOST!'\n            });\n          }\n        }\n      }\n    };\n\n    this.socketSendTeamPoints = (red_team_points, blue_team_points) => {\n      var data = {\n        \"red_team_points\": red_team_points,\n        \"blue_team_points\": blue_team_points\n      };\n      this.state.wstp.send(JSON.stringify(data)); // console.log(data)\n    };\n\n    this.connectTeamPoints = () => {\n      var wstp = new WebSocket('ws://localhost:8000/teampoints/teampoints/' + this.state.gameid + '/');\n      let that = this; //cache the this\n\n      var connectInterval; //websocket onopen event listener\n\n      wstp.onopen = () => {\n        // console.log('connect team points component');\n        this.setState({\n          wstp: wstp\n        });\n        that.timeout = 250;\n        clearTimeout(connectInterval);\n      };\n\n      wstp.onclose = e => {\n        console.log(`Socket is closed. Reconnect will be attempted in ${Math.min(10000 / 1000, (that.timeout + that.timeout) / 1000)} second.`, e.reason);\n        that.timeout = that.timeout + that.timeout; //increment retry interval\n\n        connectInterval = setTimeout(this.checkTeamPoints, Math.min(1000, that.timeout));\n      }; // websocket onerror event listener\n\n\n      wstp.onerror = err => {\n        console.error(\"Socket encountered error: \", err.message, \"Closing socket\");\n        wstp.close();\n      };\n\n      wstp.onmessage = evt => {\n        // listen to data sent from the websocket server\n        const data = JSON.parse(evt.data);\n        console.log(data); // console.log(\"received clue!\")\n\n        let red_team_points = data.red_team_points;\n        let blue_team_points = data.blue_team_points;\n        this.setState(prevState => {\n          return {\n            red_score: red_team_points,\n            blue_score: blue_team_points\n          };\n        });\n      };\n\n      this.setState(prevState => {\n        return {\n          wstp: wstp\n        };\n      });\n    };\n\n    this.checkTeamPoints = () => {\n      const {\n        wstp\n      } = this.state.wstp;\n      if (!wstp || wstp.readyState === WebSocket.CLOSED) this.connectTeamPoints(); //check if websocket instance is closed, if so call `connect` function.\n    };\n\n    this.socketSendPlayers = player => {\n      var data = {\n        \"new_players\": player\n      };\n      this.state.wsp.send(JSON.stringify(data)); // console.log('this is the incoming players data', data);\n    };\n\n    this.connectPlayers = () => {\n      var wsp = new WebSocket('ws://localhost:8000/players/players/' + this.state.gameid + '/');\n      let that = this;\n      var connectInterval;\n\n      wsp.onopen = () => {\n        this.setState({\n          wsp: wsp\n        });\n        that.timeout = 250;\n        clearTimeout(connectInterval);\n      };\n\n      wsp.onclose = e => {\n        console.log(`Socket is closed. Reconnect will be attempted in ${Math.min(10000 / 1000, (that.timeout + that.timeout) / 1000)} second.`, e.reason);\n        that.timeout = that.timeout + that.timeout; //increment retry interval\n\n        connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\n      };\n\n      wsp.onerror = err => {\n        console.error(\"Socket encountered error: \", err.message, \"Closing socket\");\n        wsp.close();\n      };\n\n      wsp.onmessage = evt => {\n        const data = JSON.parse(evt.data);\n        let new_players = data.new_players;\n\n        if (!this.state.playersdata.includes(new_players)) {\n          let playersData = this.state.playersdata;\n          playersData.push(new_players);\n          this.setState({\n            playersdata: playersData\n          });\n        } // console.log('THIS IS THE NEWEST PLAYERS ,PLEASE SHOW ', new_players)\n\n      };\n\n      this.setState(prevState => {\n        return {\n          wsp: wsp\n        };\n      });\n    };\n\n    this.checkPlayers = () => {\n      const {\n        wsp\n      } = this.state.wsp;\n      if (!wsp || wsp.readyState === WebSocket.CLOSED) this.connectPlayers();\n    };\n\n    this.connectWinLose = () => {\n      var wswl = new WebSocket('ws://localhost:8000/winlose/winlose/' + this.state.gameid + '/');\n      let that = this;\n      var connectInterval;\n\n      wswl.onopen = () => {\n        this.setState({\n          wswl: wswl\n        });\n        that.timeout = 250;\n        clearTimeout(connectInterval);\n      };\n\n      wswl.onclose = e => {\n        console.log(`Socket is closed. Reconnect will be attempted in ${Math.min(10000 / 1000, (that.timeout + that.timeout) / 1000)} second.`, e.reason); // increment retry interval\n\n        that.timeout = that.timeout + that.timeout;\n        connectInterval = setTimeout(this.checkWinLose, Math.min(1000, that.timeout));\n      };\n\n      wswl.onerror = err => {\n        console.error(\"Socket encountered error: \", err.message, \"Closing socket\");\n        wswl.close();\n      };\n\n      wswl.onmessage = evt => {\n        const data = JSON.parse(evt.data);\n        console.log(data);\n        let winningTeam = data.winningTeam;\n        let losingTeam = data.losingTeam;\n        this.setState(prevState => {\n          return {\n            winningTeam: winningTeam,\n            losingTeam: losingTeam,\n            winningScreenIsOpen: true // statusMessage: statusMessage,\n\n          };\n        });\n      };\n\n      this.setState(prevState => {\n        return {\n          wswl: wswl\n        };\n      });\n    };\n\n    this.checkWinLose = () => {\n      const {\n        wswl\n      } = this.state.wswl;\n      if (!wswl || wswl.readyState === WebSocket.CLOSED) this.connectWinLose();\n    };\n\n    this.connectDoubleAgent = () => {\n      var ws = new WebSocket('ws://localhost:8000/doubleagent/doubleagent/' + this.state.gameid + '/');\n      let that = this; // cache the this\n\n      var connectInterval; // websocket onopen event listener\n\n      ws.onopen = () => {\n        console.log(\"connected websocket main component\");\n        this.setState({\n          doubleAgentWS: ws\n        });\n        that.timeout = 250; // reset timer to 250 on open of websocket connection \n\n        clearTimeout(connectInterval); // clear Interval on on open of websocket connection\n      }; // websocket onclose event listener\n\n\n      ws.onclose = e => {\n        console.log(`Socket is closed. Reconnect will be attempted in ${Math.min(10000 / 1000, (that.timeout + that.timeout) / 1000)} second.`, e.reason);\n        that.timeout = that.timeout + that.timeout; //increment retry interval\n\n        connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\n      }; // websocket onerror event listener\n\n\n      ws.onerror = err => {\n        console.error(\"Socket encountered error: \", err.message, \"Closing socket\");\n        ws.close();\n      };\n\n      ws.onmessage = evt => {\n        // listen to data sent from the websocket server\n        const data = JSON.parse(evt.data);\n        console.log(data);\n        console.log(\"received clue!\");\n        let team = data.team;\n        let doubleAgent = { ...this.state.doubleAgent\n        };\n        doubleAgent.category = team;\n        this.setState(prevState => {\n          return {\n            // Add\n            agentClicked: true,\n            // Make it so the I WANT FIRST goes away\n            doubleAgent: doubleAgent\n          };\n        });\n        this.updateGameWords(this.state.gameid);\n      };\n\n      this.setState(prevState => {\n        return {\n          doubleAgentWS: ws\n        };\n      });\n    };\n\n    this.state = {\n      room_key: '',\n      roomid: '',\n      nickname: '',\n      team: '',\n      playerid: '',\n      task: '',\n      red_score: 0,\n      blue_score: 0,\n      gameid: '',\n      gameData: '',\n      gameWords: '',\n      doubleAgent: '',\n      doubleAgentIndex: '',\n      playersdata: '',\n      agentClicked: false,\n      redteamid: '',\n      blueteamid: '',\n      loadedPlayers: false,\n      //Websocket Team Points\n      wstp: null,\n      //Websocket Players\n      wsp: null,\n      //Websocket Win Lose Prompt\n      wswl: null,\n      totalBlueCards: 0,\n      totalRedCards: 0,\n      winningTeam: '',\n      losingTeam: '',\n      winningScreenIsOpen: false,\n      statusMessage: '',\n      // currentTeam: '',\n      assassinGuessed: false,\n      //WebSocket Double Agent\n      doubleAgentWS: ''\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.state.task === 'S' ? /*#__PURE__*/_jsxDEV(SpymastersGame, {\n        doubleAgent: this.state.doubleAgent,\n        doubleAgentIndex: this.state.doubleAgentIndex,\n        setDoubleAgent: this.setDoubleAgent,\n        room_key: this.state.room_key,\n        gameWords: this.state.gameWords,\n        increaseTeamPoints: this.increaseTeamPoints,\n        redPoints: this.state.red_score,\n        bluePoints: this.state.blue_score,\n        playersdata: this.state.playersdata,\n        gameid: this.state.gameid,\n        winningScreenIsOpen: this.state.winningScreenIsOpen,\n        statusMessage: this.state.statusMessage,\n        team: this.state.team,\n        winningTeam: this.state.winningTeam,\n        showPopUp: this.showPopUp\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 731,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(OperativesGame, {\n        doubleAgent: this.state.doubleAgent,\n        doubleAgentIndex: this.state.doubleAgentIndex,\n        room_key: this.state.room_key,\n        gameWords: this.state.gameWords,\n        gameid: this.state.gameid,\n        increaseTeamPoints: this.increaseTeamPoints,\n        redPoints: this.state.red_score,\n        bluePoints: this.state.blue_score,\n        playersdata: this.state.playersdata,\n        winningScreenIsOpen: this.state.winningScreenIsOpen,\n        statusMessage: this.state.statusMessage,\n        team: this.state.team,\n        winningTeam: this.state.winningTeam,\n        showPopUp: this.showPopUp\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 750,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 725,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/mnt/c/Users/micha/Codenames/codenames/codenames/src/Components/GamePage/Game.js"],"names":["React","Component","axios","SpymastersGame","OperativesGame","Game","constructor","componentDidMount","gameWords","props","location","state","i","length","category","setState","doubleAgent","doubleAgentIndex","setTotalCards","get","then","res","playersdata","data","playerExist","game_id","gameid","room","room_key","user_id","playerid","post","operative_screen_name","nickname","team","role","task","response","roomid","gameData","redteamid","blueteamid","updateGameWords","red_score","red_team_score","blue_score","blue_team_score","localRedTeamId","localStorage","getItem","localBlueTeamId","Number","connectTeamPoints","connectPlayers","connectWinLose","connectDoubleAgent","totalBlueCards","totalRedCards","redPoints","bluePoints","winningTeam","losingTeam","showPopUp","componentDidUpdate","prevProps","prevState","wsp","readyState","loadedPlayers","console","log","socketSendPlayers","setDoubleAgent","agentClicked","put","word_id","increaseTeamPoints","word","win","lose","wordObj","find","w","guessed","setItem","JSON","stringify","patch","socketSendTeamPoints","assassinGuessed","socketSendWinLose","wswl","send","winningScreenIsOpen","statusMessage","red_team_points","blue_team_points","wstp","WebSocket","that","connectInterval","onopen","timeout","clearTimeout","onclose","e","Math","min","reason","setTimeout","checkTeamPoints","onerror","err","error","message","close","onmessage","evt","parse","CLOSED","player","check","new_players","includes","playersData","push","checkPlayers","checkWinLose","ws","doubleAgentWS","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport './Game.css'\nimport axios from 'axios'\nimport SpymastersGame from './Spymasters/SpymastersGame.js'\nimport OperativesGame from './Operatives/OperativesGame.js'\n\n\nclass Game extends Component {\n    constructor() {\n        super()\n        this.state = {\n            room_key: '',\n            roomid: '',\n            nickname: '',\n            team: '',\n            playerid: '',\n            task: '',\n            red_score: 0,\n            blue_score: 0,\n            gameid: '',\n            gameData: '', \n            gameWords: '',\n            doubleAgent: '',\n            doubleAgentIndex: '',\n            playersdata: '',\n            agentClicked: false,\n\n            redteamid: '',\n            blueteamid: '',\n            \n            loadedPlayers: false,\n            //Websocket Team Points\n            wstp: null,\n            //Websocket Players\n            wsp: null,\n\n            //Websocket Win Lose Prompt\n            wswl: null,\n\n            totalBlueCards: 0,\n            totalRedCards: 0,\n\n            winningTeam: '',\n            losingTeam: '',\n\n            winningScreenIsOpen: false,\n            statusMessage: '',\n\n            // currentTeam: '',\n            assassinGuessed: false,\n            \n            //WebSocket Double Agent\n            doubleAgentWS: ''\n        }\n    }\n\n    \n\n\n\n    componentDidMount = async () =>{\n        let gameWords = this.props.location.state.gameWords;\n        for(let i = 0; i < gameWords.length; i++) {\n            if(gameWords[i].category === 'D') {\n                this.setState({\n                    doubleAgent: gameWords[i],\n                    doubleAgentIndex: i\n                })\n            }\n        }\n        this.setTotalCards(); \n\n        await axios.get('http://127.0.0.1:8000/codenames/players').then(res => {\n            this.setState({\n                playersdata: res.data\n            })\n            let playerExist = false;\n            for(let i = 0; i < res.data.length; i++) {\n                if(res.data[i].game_id === this.props.location.state.gameid && res.data[i].room === this.props.location.state.room_key && res.data[i].user_id === this.props.location.state.playerid) {\n                    playerExist = true;\n                }\n            }\n\n            if(playerExist === false) {\n                axios.post('http://127.0.0.1:8000/codenames/players', {\n                    operative_screen_name: this.props.location.state.nickname,\n                    team: this.props.location.state.team,\n                    role: this.props.location.state.task,\n                    room: this.props.location.state.room_key,\n                    game_id: this.props.location.state.gameid,\n                    user_id: this.props.location.state.playerid\n                }).then(response =>{\n                    this.setState({\n                        playersdata: [...this.state.playersdata, response.data],\n                    })\n                })\n            }\n        })\n        \n        this.setState({\n            room_key: this.props.location.state.room_key,\n            roomid: this.props.location.state.roomid,\n            nickname: this.props.location.state.nickname,\n            team: this.props.location.state.team,\n            task: this.props.location.state.task,\n            gameid: this.props.location.state.gameid,\n            gameData: this.props.location.state.gameData,\n            gameWords: this.props.location.state.gameWords,\n            playerid: this.props.location.state.playerid,\n            redteamid: this.props.location.state.redteamid,\n            blueteamid: this.props.location.state.blueteamid,\n        })\n\n        this.updateGameWords(this.props.location.state.gameid)\n\n        await axios.get(`http://127.0.0.1:8000/codenames/redTeam/${this.state.redteamid}`)\n        .then(response => {\n            this.setState({\n                red_score:response.data.red_team_score\n            })\n        })\n        await axios.get(`http://127.0.0.1:8000/codenames/blueTeam/${this.state.blueteamid}`)\n        .then(response => {\n            this.setState({\n                blue_score:response.data.blue_team_score\n            })\n        })\n\n        const localRedTeamId = localStorage.getItem(this.state.redteamid);\n        const localBlueTeamId = localStorage.getItem(this.state.blueteamid);\n\n        if(localRedTeamId && localBlueTeamId) {\n            // console.log(localRedTeamId, localBlueTeamId);\n            this.setState({\n                red_score: Number(localRedTeamId),\n                blue_score: Number(localBlueTeamId)\n            })\n        }\n\n        this.connectTeamPoints();\n        this.connectPlayers(); \n\n        // ATTEMP WS FOR WIN LOSE PROMPT\n        this.connectWinLose(); \n        \n        this.connectDoubleAgent();\n        \n        /* Just in case of refresh */\n        let totalBlueCards = this.state.totalBlueCards\n        let totalRedCards = this.state.totalRedCards\n        let redPoints = this.state.red_score\n        let bluePoints = this.state.blue_score\n\n\n        if(redPoints === totalRedCards){\n            this.setState({\n                winningTeam: \"R\",\n                losingTeam: \"B\",\n            }) \n            let winningTeam = \"R\"\n            this.showPopUp(winningTeam)\n        }\n        else if(bluePoints === totalBlueCards){\n            this.setState({\n                winningTeam: \"B\",\n                losingTeam: \"R\",\n            })\n            let winningTeam = \"B\"\n            this.showPopUp(winningTeam)\n        }\n    }\n\n    componentDidUpdate = (prevProps, prevState) => {\n        if(this.state.wsp && this.state.wsp.readyState === 1 && this.state.loadedPlayers === false) {\n            console.log('the ready state is working', this.state.playersdata[this.state.playersdata.length-1])\n            this.socketSendPlayers(this.state.playersdata[this.state.playersdata.length-1]);\n            this.setState({\n                loadedPlayers: true\n            })\n        }\n    }    \n    \n    setDoubleAgent = () => {\n\n        let doubleAgent = { ...this.state.doubleAgent}; \n        doubleAgent.category = this.state.team;\n        let agentClicked = this.state.agentClicked;\n        agentClicked = true;\n        this.setState({\n            doubleAgent,\n            agentClicked\n        })\n\n        // localStorage.setItem(this.state.gameid, agentClicked)\n        \n\n        axios.put(`http://127.0.0.1:8000/codenames/games/word/${this.state.doubleAgent.word_id}`, doubleAgent)\n            .then(res => {\n                console.log(res)\n                this.updateGameWords(this.state.gameid)\n        })\n        if(doubleAgent.category === 'R'){\n            this.setState(prevState => {\n                return {\n                    totalRedCards: prevState.totalRedCards+1,\n                }\n            })\n        }\n        else if(doubleAgent.category === 'B'){\n            this.setState(prevState => {\n                return {\n                    totalBlueCards: prevState.totalBlueCards+1,\n                }\n            })\n        }\n\n\n    }\n\n    updateGameWords = (gameid) => {\n        axios.get(`http://127.0.0.1:8000/codenames/games/${gameid}`).then(res => {\n            this.setState({ \n                gameWords: res.data.gameWords \n            })\n        \n        })\n    }\n\n    //from the card component, the words id and its corresponding team will be sent here to increase the points and change the guess to true accordingly\n    increaseTeamPoints = (team, word) => {\n        let totalBlueCards = this.state.totalBlueCards\n        let totalRedCards = this.state.totalRedCards\n        let win = this.state.winningTeam\n        let lose = this.state.losingTeam\n\n        let redPoints = this.state.red_score\n        let bluePoints = this.state.blue_score\n        if(team === 'R'){\n            let wordObj = this.state.gameWords.find(w => w.word_id === word);\n            if(wordObj.guessed === false) {\n                this.setState(prevState => {\n                    return {\n                        red_score: prevState.red_score+1,\n                    }\n                })\n                redPoints += 1\n    \n                localStorage.setItem(this.state.redteamid, JSON.stringify(redPoints));\n\n                axios.patch(`http://127.0.0.1:8000/codenames/games/word/${word}`, {guessed:true}).then(response => {\n                    console.log(response.data)\n                })\n                axios.patch(`http://127.0.0.1:8000/codenames/redTeam/${this.state.redteamid}`, {red_team_score: redPoints}).then(response => {\n                    console.log(response.data)\n                })\n            }\n            \n            this.socketSendTeamPoints(redPoints, bluePoints);\n            // this.socketSendPlayers(this.state.playersdata[this.state.playersdata.length-1]);\n        }\n        else if(team === 'B'){\n            let wordObj = this.state.gameWords.find(w => w.word_id === word);\n            if(wordObj.guessed === false) {\n                this.setState(prevState => {\n                    return {\n                        blue_score: prevState.blue_score+1,\n                    }\n                })\n                bluePoints += 1\n\n                localStorage.setItem(this.state.blueteamid, JSON.stringify(bluePoints));\n\n                axios.patch(`http://127.0.0.1:8000/codenames/games/word/${word}`, {guessed:true}).then(response => {\n                    console.log(response.data)\n                })\n                axios.patch(`http://127.0.0.1:8000/codenames/blueTeam/${this.state.blueteamid}`, {blue_team_score: bluePoints}).then(response => {\n                    console.log(response.data)\n                })\n\n\n            }\n            this.socketSendTeamPoints(redPoints, bluePoints);\n        }\n        // if assassin card is guessed\n        else if( team === 'A'){\n            let wordObj = this.state.gameWords.find(w => w.word_id === word);\n            // let currentTeam = this.state.currentTeam;\n            // console.log(currentTeam);\n            if(wordObj.guessed === false) {\n                // bluePoints += 1\n                this.setState({\n                    assassinGuessed: true,\n                })\n\n                if (this.state.team === 'R'){\n                    this.setState({\n                        winningTeam: \"B\",\n                        losingTeam: \"R\",\n                    }) \n                    let winningTeam = \"B\"\n                    let win = 'B'\n                    let lose = 'R'\n                    this.socketSendWinLose(win, lose)\n                    this.showPopUp(winningTeam)\n                }\n                else if(this.state.team === 'B'){\n                    this.setState({\n                        winningTeam: \"R\",\n                        losingTeam: \"B\",\n                    })\n                    let winningTeam= \"R\"\n                    let win = 'R'\n                    let lose = 'B'\n                    this.socketSendWinLose(win, lose)\n                    this.showPopUp(winningTeam)\n                }\n\n                // localStorage.setItem(this.state.blueteamid, JSON.stringify(bluePoints));\n\n                axios.patch(`http://127.0.0.1:8000/codenames/games/word/${word}`, {guessed:true}).then(response => {\n                    console.log(response.data)\n                })\n            }\n        }\n\n        if(redPoints === totalRedCards){\n            this.setState({\n                winningTeam: \"R\",\n                losingTeam: \"B\",\n            }) \n            let winningTeam = \"R\"\n            win = 'R'\n            lose = 'B'\n            \n            // ATTEMPT\n            this.socketSendWinLose(win, lose)\n            console.log('RED WIN')\n\n            this.showPopUp(winningTeam)\n\n        }\n        else if(bluePoints === totalBlueCards){\n            this.setState({\n                winningTeam: \"B\",\n                losingTeam: \"R\",\n            })\n            win = 'B'\n            lose = 'R'\n            let winningTeam= \"B\"\n            // ATTEMPT\n            this.socketSendWinLose(win, lose)\n            console.log('BLUE WIN')\n\n            this.showPopUp(winningTeam)\n\n        }\n\n    }\n\n    // ATTEMPT\n    socketSendWinLose = (winningTeam, losingTeam) => {\n        var data = {\n            \"winningTeam\": winningTeam,\n            \"losingTeam\": losingTeam\n        }\n        this.state.wswl.send(JSON.stringify(data))\n        console.log('SENT WIN LOSE TO OTHERS!!!!!!!!!')\n        \n    }\n\n\n    setTotalCards = () => {\n        let gameWords = this.props.location.state.gameWords;\n        for(let i = 0; i < gameWords.length; i++) {\n            if(gameWords[i].category === 'R') {\n                // this.setState({\n                //     doubleAgent: gameWords[i],\n                //     doubleAgentIndex: i\n                // })\n                this.setState(prevState => {\n                    return {\n                        totalRedCards: prevState.totalRedCards+1,\n                    }\n                })\n            }\n            else if(gameWords[i].category === 'B') {\n                // this.setState({\n                //     doubleAgent: gameWords[i],\n                //     doubleAgentIndex: i\n                // })\n                this.setState(prevState => {\n                    return {\n                        totalBlueCards: prevState.totalBlueCards+1,\n                    }\n                })\n            }\n        }\n        //this.showPopUp()\n    }\n\n    showPopUp = (winningTeam) => {\n        //let winningScreenIsOpen = this.state.winningScreenIsOpen\n        let team = this.props.location.state.team\n        console.log(winningTeam)\n        //console.log(winningScreenIsOpen)\n\n        //if there is a winning team\n        if(winningTeam !== \"\"){\n            this.setState({\n                winningScreenIsOpen: true\n            })//this works\n\n            if(winningTeam === \"R\"){\n                if(team === 'R'){\n                    //console.log(\"winning team is R has been called!\")\n                    //let statusMessage = 'CONGRATS! YOUR TEAM WON!'\n                    this.setState({\n                        statusMessage: 'CONGRATS! YOUR TEAM WON!'\n                    })\n                }\n                else {\n                    //console.log(\"winning team is Blue has been called!\")\n                    //let statusMessage = 'SORRY! YOUR TEAM LOST!'\n                    this.setState({\n                        statusMessage: 'SORRY! YOUR TEAM LOST!'\n                    })\n                }\n            }\n            else if (winningTeam === \"B\"){\n                //console.log(\"winning team is B has been called!\")\n                if(team === 'B'){\n                    console.log(\"winning team is Blue has been called!\")\n                    this.setState({\n                        statusMessage: 'CONGRATS! YOUR TEAM WON!'\n                    })\n                }\n                else {\n                    this.setState({\n                        statusMessage: 'SORRY! YOUR TEAM LOST!'\n                    })\n                }\n            }\n        }\n    }\n\n    socketSendTeamPoints = (red_team_points, blue_team_points) => {\n        var data = {\n            \"red_team_points\": red_team_points,\n            \"blue_team_points\": blue_team_points\n        }\n\n        this.state.wstp.send(JSON.stringify(data))\n        // console.log(data)\n    }\n\n    connectTeamPoints = () => {\n        var wstp = new WebSocket('ws://localhost:8000/teampoints/teampoints/' + this.state.gameid + '/');\n        let that = this; //cache the this\n        var connectInterval;\n\n        //websocket onopen event listener\n        wstp.onopen = () => {\n            // console.log('connect team points component');\n            this.setState({ wstp: wstp });\n\n            that.timeout = 250;\n            clearTimeout(connectInterval);\n        }\n\n        wstp.onclose = e => {\n            console.log(\n                `Socket is closed. Reconnect will be attempted in ${Math.min(\n                    10000 / 1000,\n                    (that.timeout + that.timeout) / 1000\n                )} second.`,\n                e.reason\n            );\n\n            that.timeout = that.timeout + that.timeout; //increment retry interval\n            connectInterval = setTimeout(this.checkTeamPoints, Math.min(1000, that.timeout));\n        }\n\n        // websocket onerror event listener\n        wstp.onerror = err => {\n            console.error(\n                \"Socket encountered error: \",\n                err.message,\n                \"Closing socket\"\n            );\n\n            wstp.close();\n        };\n\n        wstp.onmessage = evt => {\n            // listen to data sent from the websocket server\n            const data = JSON.parse(evt.data)\n            console.log(data)\n            // console.log(\"received clue!\")\n            let red_team_points = data.red_team_points\n            let blue_team_points = data.blue_team_points\n            this.setState(prevState => {\n                return {\n                    red_score: red_team_points,\n                    blue_score: blue_team_points\n                }\n            })\n        };\n        this.setState(prevState => {\n            return {\n                wstp: wstp\n            }\n        })\n    };\n\n    /**\n     * utilited by the @function connect to check if the connection is close, if so attempts to reconnect\n     */\n    checkTeamPoints = () => {\n        const { wstp } = this.state.wstp;\n        if (!wstp || wstp.readyState === WebSocket.CLOSED) this.connectTeamPoints(); //check if websocket instance is closed, if so call `connect` function.\n    };\n    \n    socketSendPlayers = (player) => {\n        var data = {\n            \"new_players\": player\n        }\n        this.state.wsp.send(JSON.stringify(data))\n        \n        // console.log('this is the incoming players data', data);\n    }\n\n    connectPlayers = () => {\n        var wsp = new WebSocket('ws://localhost:8000/players/players/' + this.state.gameid + '/');\n        let that = this;\n        var connectInterval;\n\n        wsp.onopen = () => {\n            this.setState ({ wsp: wsp });\n\n            that.timeout = 250;\n            clearTimeout(connectInterval);\n        };\n\n        wsp.onclose = e => {\n            console.log(\n                `Socket is closed. Reconnect will be attempted in ${Math.min(\n                    10000 / 1000,\n                    (that.timeout + that.timeout) / 1000\n                )} second.`,\n                e.reason\n            );\n\n            that.timeout = that.timeout + that.timeout; //increment retry interval\n            connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\n        }\n\n        wsp.onerror = err => {\n            console.error(\n                \"Socket encountered error: \",\n                err.message,\n                \"Closing socket\"\n            );\n\n            wsp.close();\n        };\n\n        wsp.onmessage = evt => {\n            const data = JSON.parse(evt.data)\n            let new_players = data.new_players\n\n            if(!this.state.playersdata.includes(new_players)) {\n                let playersData = this.state.playersdata;\n                playersData.push(new_players);\n                this.setState({\n                    playersdata: playersData\n                })\n            }\n            \n            // console.log('THIS IS THE NEWEST PLAYERS ,PLEASE SHOW ', new_players)\n        };\n\n        this.setState(prevState => {\n            return {\n                wsp: wsp\n            }\n        })\n\n    };\n\n    checkPlayers = () => {\n        const { wsp } = this.state.wsp;\n        if(!wsp || wsp.readyState === WebSocket.CLOSED) this.connectPlayers();\n    }\n\n\n    // ATTEMPT WS FOR WIN/LOSE PROMPT \n    connectWinLose = () => {\n        var wswl = new WebSocket('ws://localhost:8000/winlose/winlose/' + this.state.gameid + '/');\n        let that = this;\n        var connectInterval;\n        wswl.onopen = () => {\n            this.setState({ wswl: wswl})\n            that.timeout = 250\n            clearTimeout(connectInterval)\n        }\n\n        wswl.onclose = e => {\n            console.log(\n                `Socket is closed. Reconnect will be attempted in ${Math.min(\n                    10000 / 1000,\n                    (that.timeout + that.timeout) / 1000\n                )} second.`,\n                e.reason\n            )\n            \n            // increment retry interval\n            that.timeout = that.timeout + that.timeout \n            connectInterval = setTimeout(this.checkWinLose, Math.min(1000, that.timeout))\n        }\n\n        wswl.onerror = err => {\n            console.error(\n                \"Socket encountered error: \",\n                err.message,\n                \"Closing socket\"\n            )\n\n            wswl.close()\n        }\n        wswl.onmessage = evt => {\n            const data = JSON.parse(evt.data)\n            console.log(data)\n            let winningTeam = data.winningTeam\n            let losingTeam = data.losingTeam\n            this.setState(prevState => {\n                return{\n                    winningTeam: winningTeam,\n                    losingTeam: losingTeam,\n                    winningScreenIsOpen: true,\n                    // statusMessage: statusMessage,\n                }\n            })\n        }\n        this.setState(prevState => {\n            return{\n                wswl: wswl\n            }\n        })\n    }\n\n    checkWinLose = () => {\n        const {wswl} = this.state.wswl\n        if(!wswl || wswl.readyState === WebSocket.CLOSED) this.connectWinLose();\n    }\n\n    connectDoubleAgent = () => {\n        var ws = new WebSocket('ws://localhost:8000/doubleagent/doubleagent/' + this.state.gameid + '/');\n        let that = this; // cache the this\n        var connectInterval;\n\n        // websocket onopen event listener\n        ws.onopen = () => {\n            console.log(\"connected websocket main component\");\n            this.setState({ doubleAgentWS: ws });\n\n            that.timeout = 250; // reset timer to 250 on open of websocket connection \n            clearTimeout(connectInterval); // clear Interval on on open of websocket connection\n        };\n\n        // websocket onclose event listener\n        ws.onclose = e => {\n            console.log(\n                `Socket is closed. Reconnect will be attempted in ${Math.min(\n                    10000 / 1000,\n                    (that.timeout + that.timeout) / 1000\n                )} second.`,\n                e.reason\n            );\n\n            that.timeout = that.timeout + that.timeout; //increment retry interval\n            connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\n        };\n\n        // websocket onerror event listener\n        ws.onerror = err => {\n            console.error(\n                \"Socket encountered error: \",\n                err.message,\n                \"Closing socket\"\n            );\n\n            ws.close();\n        };\n        ws.onmessage = evt => {\n            // listen to data sent from the websocket server\n            const data = JSON.parse(evt.data)\n            console.log(data)\n            console.log(\"received clue!\")\n            let team = data.team\n\n            let doubleAgent = { ...this.state.doubleAgent}; \n            doubleAgent.category = team;\n\n            this.setState(prevState => {\n                return {\n                    // Add\n                    agentClicked: true, // Make it so the I WANT FIRST goes away\n                    doubleAgent: doubleAgent\n\n                }\n            })\n            this.updateGameWords(this.state.gameid)\n        };\n        this.setState(prevState => {\n            return {\n                doubleAgentWS: ws\n            }\n        })\n    };\n\n\n    render() {\n        \n        return(\n            <div>\n                {\n\n                    this.state.task === 'S' ?   \n                    \n                    \n                    <SpymastersGame \n                        doubleAgent ={this.state.doubleAgent}\n                        doubleAgentIndex = {this.state.doubleAgentIndex}\n                        setDoubleAgent = {this.setDoubleAgent}\n                        room_key = {this.state.room_key}\n                        gameWords = {this.state.gameWords}\n                        increaseTeamPoints = {this.increaseTeamPoints}\n                        redPoints = {this.state.red_score}\n                        bluePoints = {this.state.blue_score}\n                        playersdata = {this.state.playersdata}\n                        gameid = {this.state.gameid}\n                        winningScreenIsOpen = {this.state.winningScreenIsOpen}\n                        statusMessage= {this.state.statusMessage}\n                        team = {this.state.team}\n                        winningTeam = {this.state.winningTeam}\n                        showPopUp = {this.showPopUp}\n                        />\n                        : \n                        \n                        <OperativesGame \n                        doubleAgent ={this.state.doubleAgent}\n                        doubleAgentIndex = {this.state.doubleAgentIndex}\n                        room_key = {this.state.room_key}\n                        gameWords = {this.state.gameWords}\n                        gameid = {this.state.gameid}\n                        increaseTeamPoints = {this.increaseTeamPoints}\n                        redPoints = {this.state.red_score}\n                        bluePoints = {this.state.blue_score}\n                        playersdata = {this.state.playersdata}\n                        winningScreenIsOpen = {this.state.winningScreenIsOpen}\n                        statusMessage= {this.state.statusMessage}\n                        team = {this.state.team}\n                        winningTeam = {this.state.winningTeam}\n                        showPopUp = {this.showPopUp}\n                    />\n                }\n            </div>\n        )\n    }\n}\n\nexport default Game"]},"metadata":{},"sourceType":"module"}