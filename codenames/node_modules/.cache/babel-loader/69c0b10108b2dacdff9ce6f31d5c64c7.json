{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/micha/Codenames/codenames/codenames/src/Components/GamePage/Spymasters/SpymastersGame.js\";\nimport React, { Component } from 'react';\nimport Row from \"../Row/Row\";\nimport './SpymastersGame.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SpymastersGame extends Component {\n  // Still not 100% sure whether to change this to a class, or to just useState\n  constructor() {\n    super();\n\n    this.componentDidMount = () => {};\n\n    this.socketSend = () => {\n      let clueword = this.state.spymasterClueWord;\n      let cheater_flag = 0;\n\n      if (clueword.length > 16) {\n        // Restrict the amount of chars sent\n        clueword = clueword.slice(0, 16);\n      }\n\n      clueword = clueword.toUpperCase();\n\n      for (let i = 0; i < this.state.gameWords.length; i++) {\n        // Search if the clue matches any of the game words\n        if (clueword.search(this.state.gameWords[i].word) !== -1) {\n          cheater_flag = 1;\n          break;\n        }\n      }\n\n      if (cheater_flag === 1) {\n        // If cheating\n        this.setState(prevState => {\n          return {\n            spymasterClueWord: \"NO CHEATING!\" // No cheating!\n\n          };\n        });\n      } else {\n        // Finally, send regularly\n        var data = {\n          \"count\": this.state.spymasterClueCount,\n          \"clue\": clueword\n        };\n        this.state.ws.send(JSON.stringify(data)); // send to channel\n        // console.log(data)\n      }\n    };\n\n    this.connect = () => {\n      var ws = new WebSocket('ws://localhost:8000/cluebox/cluebox/' + this.props.gameid + '/');\n      let that = this; // cache the this\n\n      var connectInterval; // websocket onopen event listener\n\n      ws.onopen = () => {\n        // console.log(\"connected websocket main component\");\n        this.setState({\n          ws: ws\n        });\n        that.timeout = 250; // reset timer to 250 on open of websocket connection \n        // clearTimeout(connectInterval); // clear Interval on on open of websocket connection\n      }; // websocket onclose event listener\n\n\n      ws.onclose = e => {\n        console.log(`Socket is closed. Reconnect will be attempted in ${Math.min(10000 / 1000, (that.timeout + that.timeout) / 1000)} second.`, e.reason);\n        that.timeout = that.timeout + that.timeout; //increment retry interval\n\n        connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\n      }; // websocket onerror event listener\n\n\n      ws.onerror = err => {\n        console.error(\"Socket encountered error: \", err.message, \"Closing socket\");\n        ws.close();\n      };\n\n      ws.onmessage = evt => {\n        // listen to data sent from the websocket server\n        const data = JSON.parse(evt.data); // console.log(data)\n        // console.log(\"received clue!\")\n\n        let count = data.count;\n        let clue = data.clue;\n        this.setState(prevState => {\n          return {\n            spymasterClueCount: count,\n            spymasterClueWord: clue\n          };\n        });\n      };\n\n      this.setState(prevState => {\n        return {\n          ws: ws\n        };\n      });\n    };\n\n    this.check = () => {\n      const {\n        ws\n      } = this.state.ws;\n      if (!ws || ws.readyState === WebSocket.CLOSED) this.connect(); //check if websocket instance is closed, if so call `connect` function.\n    };\n\n    this.componentDidUpdate = event => {\n      if (event.gameWords !== this.props.gameWords) {\n        this.setState(prevState => {\n          return {\n            gameWords: this.props.gameWords,\n            room_key: this.props.room_key,\n            gameid: this.props.gameid\n          };\n        });\n\n        if (this.state.ws === null) {\n          this.connect();\n        }\n      }\n\n      if (event.playersdata !== this.props.playersdata) {\n        this.setState(prevState => {\n          return {\n            playersdata: this.props.playersdata\n          };\n        });\n      }\n    };\n\n    this.componentWillReceiveProps = players => {\n      this.setState({\n        playersdata: players.playersdata //renderPlayers: true,\n\n      }); //console.log(players)\n      // console.log(\"Checking how many times this will call the update players!\")\n\n      this.updatePlayers(players.playersdata);\n    };\n\n    this.handleGuessSubmit = () => {// console.log(this.state.spymasterClueWord, this.state.spymasterClueCount)\n    };\n\n    this.incrementClueCount = () => {\n      if (this.props.team === 'R') {\n        if (this.state.spymasterClueCount + 1 <= 8 - this.props.redPoints + (this.state.gameWords[this.props.doubleAgentIndex].category === 'R')) {\n          this.setState(prevState => {\n            // Update with inline function\n            return {\n              spymasterClueCount: prevState.spymasterClueCount + 1\n            };\n          });\n        }\n      } else if (this.props.team === 'B') {\n        if (this.state.spymasterClueCount + 1 <= 8 - this.props.bluePoints + (this.state.gameWords[this.props.doubleAgentIndex].category === 'B')) {\n          this.setState(prevState => {\n            // Update with inline function\n            return {\n              spymasterClueCount: prevState.spymasterClueCount + 1\n            };\n          });\n        }\n      }\n    };\n\n    this.decrementClueCount = () => {\n      if (this.state.spymasterClueCount - 1 >= 0) {\n        this.setState(prevState => {\n          return {\n            spymasterClueCount: prevState.spymasterClueCount - 1\n          };\n        });\n      }\n    };\n\n    this.updatePlayers = players => {\n      //console.log('Update Players Called!');\n      let room_key = this.props.room_key; //let players = this.props.playersdata;\n      // console.log(\"Players data: \", players)\n      //if(this.state.renderPlayers === true){\n\n      for (let i = 0; i < players.length; i++) {\n        //console.log(\"Current Player: \", players[i])\n        if (players[i].room === room_key) {\n          if (players[i].role === \"S\") {\n            if (players[i].team === \"R\") {\n              //console.log(\"It went here [Red Spy]: \", players[i])\n              let redSpymasters = this.state.redSpymasters;\n              redSpymasters.push(players[i]);\n              this.setState({\n                redSpymasters\n              });\n            } else if (players[i].team === \"B\") {\n              //console.log(\"It went here [Blue Spy]: \", players[i])\n              let blueSpymasters = this.state.blueSpymasters;\n              blueSpymasters.push(players[i]);\n              this.setState({\n                blueSpymasters\n              });\n            }\n          } else if (players[i].role === \"O\") {\n            if (players[i].team === \"R\") {\n              //console.log(\"It went here [Red Op]: \", players[i])\n              let redOperatives = this.state.redOperatives;\n              redOperatives.push(players[i]);\n              this.setState({\n                redOperatives\n              });\n            } else if (players[i].team === \"B\") {\n              //console.log(\"It went here [Blue Op]: \", players[i])\n              let blueOperatives = this.state.blueOperatives;\n              blueOperatives.push(players[i]);\n              this.setState({\n                blueOperatives\n              });\n            }\n          }\n        }\n      } //}\n\n\n      this.deleteRepeated();\n    };\n\n    this.deleteRepeated = () => {\n      let redOperatives = this.state.redOperatives;\n      let redSpymasters = this.state.redSpymasters;\n      let blueOperatives = this.state.blueOperatives;\n      let blueSpymasters = this.state.blueSpymasters;\n      let showredOperatives = this.state.showredOperatives;\n      let showredSpymasters = this.state.showredSpymasters;\n      let showblueOperatives = this.state.showblueOperatives;\n      let showblueSpymasters = this.state.showblueSpymasters; //Red Operatives\n\n      for (let i = 0; i < redOperatives.length; i++) {\n        let repeated = false;\n\n        for (let j = 0; j < showredOperatives.length; j++) {\n          if (redOperatives[i].player_id === showredOperatives[j].player_id) {\n            repeated = true;\n          }\n        }\n\n        if (repeated === false) {\n          showredOperatives.push(redOperatives[i]);\n          this.setState({\n            showredOperatives\n          });\n        }\n      } //end of for loop\n      //Red Spymasters\n\n\n      for (let i = 0; i < redSpymasters.length; i++) {\n        let repeated = false;\n\n        for (let j = 0; j < showredSpymasters.length; j++) {\n          if (redSpymasters[i].player_id === showredSpymasters[j].player_id) {\n            repeated = true;\n          }\n        }\n\n        if (repeated === false) {\n          showredSpymasters.push(redSpymasters[i]);\n          this.setState({\n            showredSpymasters\n          });\n        }\n      } //Blue Operative\n\n\n      for (let i = 0; i < blueOperatives.length; i++) {\n        let repeated = false;\n\n        for (let j = 0; j < showblueOperatives.length; j++) {\n          if (blueOperatives[i].player_id === showblueOperatives[j].player_id) {\n            repeated = true;\n          }\n        }\n\n        if (repeated === false) {\n          showblueOperatives.push(blueOperatives[i]);\n          this.setState({\n            showblueOperatives\n          });\n        }\n      } //Blue Spymasters\n\n\n      for (let i = 0; i < blueSpymasters.length; i++) {\n        let repeated = false;\n\n        for (let j = 0; j < showblueSpymasters.length; j++) {\n          if (blueSpymasters[i].player_id === showblueSpymasters[j].player_id) {\n            repeated = true;\n          }\n        }\n\n        if (repeated === false) {\n          showblueSpymasters.push(blueSpymasters[i]);\n          this.setState({\n            showblueSpymasters\n          });\n        }\n      }\n    };\n\n    this.state = {\n      room_key: '',\n      task: 'S',\n      gameid: '',\n      gameWords: '',\n      playersdata: '',\n      spymasterClueWord: 'WAITING FOR CLUE...',\n      spymasterClueCount: 0,\n      redScore: 0,\n      blueScore: 0,\n      redteamid: '',\n      blueteamid: '',\n      //Helper Variables\n      redOperatives: [],\n      redSpymasters: [],\n      blueOperatives: [],\n      blueSpymasters: [],\n      renderPlayers: false,\n      //Show Variables\n      showredOperatives: [],\n      showredSpymasters: [],\n      showblueOperatives: [],\n      showblueSpymasters: [],\n      //Websocket\n      ws: null\n    }; // Need these statements since they set state - or use xxx = () => {}\n\n    this.incrementClueCount = this.incrementClueCount.bind(this);\n    this.decrementClueCount = this.decrementClueCount.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.socketSend = this.socketSend.bind(this);\n  }\n\n  // For changing state when elements are changed on the page by user\n  handleChange(event) {\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = event.target; // if the type just grabbed from the event is a checkbox, set the name of the event, \n    // which is named after an element in the state - so the element in the state - to \n    // the boolean checked, otherwise set [name], in state, to the value grabbed. \n\n    type === \"checkbox\" ? this.setState({\n      [name]: checked\n    }) : this.setState({\n      [name]: value\n    });\n  } // For handling the players' submitting their guesses / word picks\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.state.showredOperatives.length >= 1 && this.state.showblueOperatives.length >= 1 && this.state.showredSpymasters.length === 1 && this.state.showblueSpymasters.length === 1 && (this.props.agentClicked === true || this.props.gameWords[this.props.doubleAgentIndex].category !== 'D') ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game\",\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n          children: \"SPYMASTERS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [this.props.currentPlayer ? /*#__PURE__*/_jsxDEV(\"h6\", {\n            style: {\n              color: \"white\",\n              fontSize: \"78px\"\n            },\n            children: this.props.currentPlayer.operative_screen_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 57\n          }, this) : null, /*#__PURE__*/_jsxDEV(\"h6\", {\n            className: \"gameCode\",\n            children: [\" Game Code: \", this.props.room_key, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container-fluid\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-12\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"row\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-md-4\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"gameScores\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"redTeam\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n                          className: \"teamTitle\",\n                          children: \"Red Team\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 416,\n                          columnNumber: 57\n                        }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                          className: \"teamScore\",\n                          children: this.props.redPoints\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 417,\n                          columnNumber: 57\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 414,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 419,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 420,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                        className: \"teamContent\",\n                        children: \" Spymaster:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 421,\n                        columnNumber: 53\n                      }, this), this.state.showredSpymasters.map((player, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                        className: \"bulletContent\",\n                        children: player.operative_screen_name\n                      }, index, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 423,\n                        columnNumber: 61\n                      }, this)), this.showRedSpymasters, /*#__PURE__*/_jsxDEV(\"h6\", {\n                        className: \"teamContent\",\n                        children: \" Operatives:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 427,\n                        columnNumber: 53\n                      }, this), this.state.showredOperatives.map((player, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                        className: \"bulletContent\",\n                        children: player.operative_screen_name\n                      }, index, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 429,\n                        columnNumber: 61\n                      }, this))]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 413,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 432,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"blueTeam\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n                          className: \"teamTitle\",\n                          children: \"Blue Team\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 435,\n                          columnNumber: 57\n                        }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                          className: \"teamScore\",\n                          children: this.props.bluePoints\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 436,\n                          columnNumber: 57\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 434,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 438,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 439,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                        className: \"teamContent\",\n                        children: \" Spymaster:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 440,\n                        columnNumber: 53\n                      }, this), this.state.showblueSpymasters.map((player, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                        className: \"bulletContent\",\n                        children: player.operative_screen_name\n                      }, index, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 442,\n                        columnNumber: 61\n                      }, this)), /*#__PURE__*/_jsxDEV(\"h6\", {\n                        className: \"teamContent\",\n                        children: \" Operatives:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 444,\n                        columnNumber: 53\n                      }, this), this.state.showblueOperatives.map((player, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                        className: \"bulletContent\",\n                        children: player.operative_screen_name\n                      }, index, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 446,\n                        columnNumber: 61\n                      }, this))]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 433,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 412,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 411,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-md-7\",\n                  children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"row\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"col-md-12\",\n                      children: [/*#__PURE__*/_jsxDEV(Row, {\n                        task: this.state.task,\n                        rowWords: [this.state.gameWords[0], this.state.gameWords[1], this.state.gameWords[2], this.state.gameWords[3], this.state.gameWords[4]],\n                        cardNumbers: [0, 1, 2, 3, 4] // Add in card numbers to distinguish\n                        ,\n                        gameid: this.state.gameid // Add in gameid for card websocket\n                        ,\n                        increaseTeamPoints: this.props.increaseTeamPoints\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 455,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(Row, {\n                        task: this.state.task,\n                        rowWords: [this.state.gameWords[5], this.state.gameWords[6], this.state.gameWords[7], this.state.gameWords[8], this.state.gameWords[9]],\n                        cardNumbers: [5, 6, 7, 8, 9],\n                        gameid: this.state.gameid // Add in gameid for card websocket\n                        ,\n                        increaseTeamPoints: this.props.increaseTeamPoints\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 464,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(Row, {\n                        task: this.state.task,\n                        rowWords: [this.state.gameWords[10], this.state.gameWords[11], this.state.gameWords[12], this.state.gameWords[13], this.state.gameWords[14]],\n                        cardNumbers: [10, 11, 12, 13, 14],\n                        gameid: this.state.gameid // Add in gameid for card websocket\n                        ,\n                        increaseTeamPoints: this.props.increaseTeamPoints\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 473,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(Row, {\n                        task: this.state.task,\n                        rowWords: [this.state.gameWords[15], this.state.gameWords[16], this.state.gameWords[17], this.state.gameWords[18], this.state.gameWords[19]],\n                        cardNumbers: [15, 16, 17, 18, 19],\n                        gameid: this.state.gameid // Add in gameid for card websocket\n                        ,\n                        increaseTeamPoints: this.props.increaseTeamPoints\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 482,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(Row, {\n                        task: this.state.task,\n                        rowWords: [this.state.gameWords[20], this.state.gameWords[21], this.state.gameWords[22], this.state.gameWords[23], this.state.gameWords[24]],\n                        cardNumbers: [20, 21, 22, 23, 24],\n                        gameid: this.state.gameid // Add in gameid for card websocket\n                        ,\n                        increaseTeamPoints: this.props.increaseTeamPoints\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 491,\n                        columnNumber: 57\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 453,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 452,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"row\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"col-md-12\",\n                      children: !this.props.winningScreenIsOpen ? /*#__PURE__*/_jsxDEV(\"form\", {\n                        children: this.props.myTeam === this.props.currentTeam && /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"spymasterClue\",\n                          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                            type: \"text\",\n                            value: this.state.spymasterClueWord,\n                            name: \"spymasterClueWord\" // Must be same name as state!\n                            ,\n                            placeholder: \"Type clue here\",\n                            onChange: this.handleChange\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 508,\n                            columnNumber: 65\n                          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                            className: \"counter\",\n                            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                              type: \"button\",\n                              onClick: this.incrementClueCount,\n                              children: \"+\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 517,\n                              columnNumber: 69\n                            }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                              children: this.state.spymasterClueCount\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 518,\n                              columnNumber: 69\n                            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                              type: \"button\",\n                              onClick: this.decrementClueCount,\n                              children: \"-\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 519,\n                              columnNumber: 69\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 515,\n                            columnNumber: 65\n                          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                            className: \"clueContainer\",\n                            type: \"button\",\n                            onClick: this.socketSend,\n                            value: \"Submit\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 523,\n                            columnNumber: 65\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 507,\n                          columnNumber: 109\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 506,\n                        columnNumber: 57\n                      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"popUp\",\n                        children: this.props.team === this.props.winningTeam ? /*#__PURE__*/_jsxDEV(\"h4\", {\n                          className: \"Status\",\n                          children: \"CONGRATS! YOUR TEAM WON!\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 530,\n                          columnNumber: 57\n                        }, this) : /*#__PURE__*/_jsxDEV(\"h4\", {\n                          className: \"Status\",\n                          children: \"SORRY! YOUR TEAM LOST!\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 532,\n                          columnNumber: 57\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 528,\n                        columnNumber: 57\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 504,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 503,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 451,\n                  columnNumber: 45\n                }, this), \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 410,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 409,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 408,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"waitingScreen\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"waitingContainer\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"spinner\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 548,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"waitingText\",\n              children: [\"Waiting for players\", /*#__PURE__*/_jsxDEV(\"span\", {\n                class: \"one\",\n                children: \".\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 551,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                class: \"two\",\n                children: \".\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 551,\n                columnNumber: 63\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                class: \"three\",\n                children: \".\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 551,\n                columnNumber: 89\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 549,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"waitingButton\",\n              onClick: this.props.setDoubleAgent,\n              children: \"I want first\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 553,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 547,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default SpymastersGame;","map":{"version":3,"sources":["/mnt/c/Users/micha/Codenames/codenames/codenames/src/Components/GamePage/Spymasters/SpymastersGame.js"],"names":["React","Component","Row","SpymastersGame","constructor","componentDidMount","socketSend","clueword","state","spymasterClueWord","cheater_flag","length","slice","toUpperCase","i","gameWords","search","word","setState","prevState","data","spymasterClueCount","ws","send","JSON","stringify","connect","WebSocket","props","gameid","that","connectInterval","onopen","timeout","onclose","e","console","log","Math","min","reason","setTimeout","check","onerror","err","error","message","close","onmessage","evt","parse","count","clue","readyState","CLOSED","componentDidUpdate","event","room_key","playersdata","componentWillReceiveProps","players","updatePlayers","handleGuessSubmit","incrementClueCount","team","redPoints","doubleAgentIndex","category","bluePoints","decrementClueCount","room","role","redSpymasters","push","blueSpymasters","redOperatives","blueOperatives","deleteRepeated","showredOperatives","showredSpymasters","showblueOperatives","showblueSpymasters","repeated","j","player_id","task","redScore","blueScore","redteamid","blueteamid","renderPlayers","bind","handleChange","name","value","type","checked","target","render","agentClicked","currentPlayer","color","fontSize","operative_screen_name","map","player","index","showRedSpymasters","increaseTeamPoints","winningScreenIsOpen","myTeam","currentTeam","winningTeam","setDoubleAgent"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Row from \"../Row/Row\"\nimport './SpymastersGame.css'\n\n\nclass SpymastersGame extends Component{ // Still not 100% sure whether to change this to a class, or to just useState\n    constructor() {\n        super()\n        this.state = {\n            room_key: '',\n            task: 'S',\n            gameid: '',\n            gameWords: '',\n            playersdata: '',\n            spymasterClueWord: 'WAITING FOR CLUE...', \n            spymasterClueCount: 0,\n\n            redScore: 0,\n            blueScore: 0,\n\n            redteamid: '',\n            blueteamid: '',\n\n            //Helper Variables\n            redOperatives: [],\n            redSpymasters: [],\n            blueOperatives: [],\n            blueSpymasters: [],\n            renderPlayers: false,\n\n            //Show Variables\n            showredOperatives: [],\n            showredSpymasters: [],\n            showblueOperatives: [],\n            showblueSpymasters: [],\n\n            //Websocket\n            ws: null\n        }\n        // Need these statements since they set state - or use xxx = () => {}\n        this.incrementClueCount = this.incrementClueCount.bind(this);\n        this.decrementClueCount = this.decrementClueCount.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.socketSend = this.socketSend.bind(this);\n    }\n\n    componentDidMount = () => {\n    } // Don't add this.connect()\n\n    socketSend = () => {\n        let clueword = this.state.spymasterClueWord\n        let cheater_flag = 0\n        if (clueword.length > 16) { // Restrict the amount of chars sent\n            clueword = clueword.slice(0, 16)\n        }\n        clueword = clueword.toUpperCase()\n        for (let i = 0; i < this.state.gameWords.length; i++) {\n            // Search if the clue matches any of the game words\n            if (clueword.search(this.state.gameWords[i].word) !== -1) {\n                cheater_flag = 1\n                break\n            }\n        }\n        if (cheater_flag === 1) { // If cheating\n            this.setState(prevState => {\n                return {\n                    spymasterClueWord: \"NO CHEATING!\" // No cheating!\n                }\n            })\n        }\n        else { // Finally, send regularly\n            var data = {\n                \"count\": this.state.spymasterClueCount,\n                \"clue\": clueword\n            }\n            this.state.ws.send(JSON.stringify(data)) // send to channel\n            // console.log(data)\n        }\n    }\n\n    /**\n     * @function connect\n     * This function establishes the connect with the websocket and also ensures \n     * constant reconnection if connection closes\n     */\n     connect = () => {\n        var ws = new WebSocket('ws://localhost:8000/cluebox/cluebox/' + this.props.gameid + '/');\n        let that = this; // cache the this\n        var connectInterval;\n\n        // websocket onopen event listener\n        ws.onopen = () => {\n            // console.log(\"connected websocket main component\");\n            this.setState({ ws: ws });\n\n            that.timeout = 250; // reset timer to 250 on open of websocket connection \n            // clearTimeout(connectInterval); // clear Interval on on open of websocket connection\n        };\n\n        // websocket onclose event listener\n        ws.onclose = e => {\n            console.log(\n                `Socket is closed. Reconnect will be attempted in ${Math.min(\n                    10000 / 1000,\n                    (that.timeout + that.timeout) / 1000\n                )} second.`,\n                e.reason\n            );\n\n            that.timeout = that.timeout + that.timeout; //increment retry interval\n            connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\n        };\n\n        // websocket onerror event listener\n        ws.onerror = err => {\n            console.error(\n                \"Socket encountered error: \",\n                err.message,\n                \"Closing socket\"\n            );\n\n            ws.close();\n        };\n\n        ws.onmessage = evt => {\n            // listen to data sent from the websocket server\n            const data = JSON.parse(evt.data)\n            // console.log(data)\n            // console.log(\"received clue!\")\n            let count = data.count\n            let clue = data.clue\n            this.setState(prevState => {\n                return {\n                    spymasterClueCount: count,\n                    spymasterClueWord: clue\n                }\n            })\n        };\n        this.setState(prevState => {\n            return {\n                ws: ws\n            }\n        })\n    };\n\n    /**\n     * utilited by the @function connect to check if the connection is close, if so attempts to reconnect\n     */\n    check = () => {\n        const { ws } = this.state.ws;\n        if (!ws || ws.readyState === WebSocket.CLOSED) this.connect(); //check if websocket instance is closed, if so call `connect` function.\n    };\n\n\n    /*\n        states affected: \n            gameWords\n        what it does: \n            The first parameter for this method is gameWords before the update; so, testing \n            whether it has changed is done here. If it has changed then it will update the \n            gameWords to how the game component has them. \n    */\n    componentDidUpdate = (event) => {\n\n        if (event.gameWords !== this.props.gameWords) {\n            this.setState(prevState => {\n                return {\n                    gameWords: this.props.gameWords,\n                    room_key: this.props.room_key,\n                    gameid: this.props.gameid,\n                    \n                }\n            })\n            if (this.state.ws === null) {\n                this.connect();\n            }\n        }\n\n        if(event.playersdata !== this.props.playersdata){\n            this.setState(prevState =>{\n                return{\n                    playersdata: this.props.playersdata\n                }\n            })\n        }\n\n    }\n\n    /*This one will call updatePlayers twice therefore adds it twice but will show normal when refreshed. \n        =>Fixed with the deleteRepeated() function    \n    */\n    componentWillReceiveProps = (players) => {\n        this.setState({\n            playersdata: players.playersdata,\n            //renderPlayers: true,\n        })\n        //console.log(players)\n\n        // console.log(\"Checking how many times this will call the update players!\")\n        this.updatePlayers(players.playersdata)\n    }\n\n    // For changing state when elements are changed on the page by user\n\n    handleChange(event) {\n        const {name, value, type, checked} = event.target\n        // if the type just grabbed from the event is a checkbox, set the name of the event, \n        // which is named after an element in the state - so the element in the state - to \n        // the boolean checked, otherwise set [name], in state, to the value grabbed. \n        type === \"checkbox\" ? this.setState({ [name]: checked }) : this.setState({ [name]: value })\n\n    }\n    \n    // For handling the players' submitting their guesses / word picks\n    handleGuessSubmit = () => {\n        // console.log(this.state.spymasterClueWord, this.state.spymasterClueCount)\n    }\n    incrementClueCount = () => {\n        if (this.props.team === 'R') {\n            if (this.state.spymasterClueCount + 1 <= 8 - (this.props.redPoints) + \n               (this.state.gameWords[this.props.doubleAgentIndex].category === 'R')) {\n                this.setState(prevState => { // Update with inline function\n                    return {\n                        spymasterClueCount: prevState.spymasterClueCount + 1\n                    }\n                })\n            }\n        }\n        else if (this.props.team === 'B') {\n            if (this.state.spymasterClueCount + 1 <= 8 - (this.props.bluePoints) + \n               (this.state.gameWords[this.props.doubleAgentIndex].category === 'B')) {\n                this.setState(prevState => { // Update with inline function\n                    return {\n                        spymasterClueCount: prevState.spymasterClueCount + 1\n                    }\n                })\n            }\n        }\n    }\n    decrementClueCount = () => {\n        if (this.state.spymasterClueCount - 1 >= 0) {\n            this.setState(prevState => {\n                return {\n                    spymasterClueCount: prevState.spymasterClueCount - 1\n                }\n            })\n        }\n    }\n\n    /*Issues: Being called twice so it adds double the amount until you refresh the page.\n        =>Fixed with the deleteRepeated() function    \n    */\n    updatePlayers = (players) => {\n        //console.log('Update Players Called!');\n        let room_key = this.props.room_key;\n        //let players = this.props.playersdata;\n        // console.log(\"Players data: \", players)\n        //if(this.state.renderPlayers === true){\n\n        for(let i = 0; i < players.length; i++){\n            //console.log(\"Current Player: \", players[i])\n            if(players[i].room === room_key){\n                if(players[i].role === \"S\" ){\n                    if(players[i].team === \"R\"){\n                        //console.log(\"It went here [Red Spy]: \", players[i])\n                        let redSpymasters = this.state.redSpymasters\n                        redSpymasters.push(players[i])\n                        this.setState({\n                            redSpymasters,\n                        })\n                        \n                    }\n                    else if(players[i].team === \"B\"){\n                        //console.log(\"It went here [Blue Spy]: \", players[i])\n                        let blueSpymasters = this.state.blueSpymasters\n                        blueSpymasters.push(players[i])\n                        this.setState({\n                            blueSpymasters\n                        })\n                        \n                    }\n                }\n                else if(players[i].role === \"O\"){\n                    if(players[i].team === \"R\"){\n                        //console.log(\"It went here [Red Op]: \", players[i])\n                        let redOperatives = this.state.redOperatives\n                        redOperatives.push(players[i])\n                        this.setState({\n                            redOperatives\n                        })\n                        \n                    }\n                    else if(players[i].team === \"B\"){\n                        //console.log(\"It went here [Blue Op]: \", players[i])\n                        let blueOperatives = this.state.blueOperatives\n                        blueOperatives.push(players[i])\n                        this.setState({\n                            blueOperatives\n                        })\n                        \n                    }\n                    \n                }\n            \n            }\n        }\n        //}\n\n        this.deleteRepeated()\n    }\n\n    //This fixes the issue of having repeated players on intial load. \n    deleteRepeated = ()=> {\n        let redOperatives = this.state.redOperatives\n        let redSpymasters = this.state.redSpymasters\n        let blueOperatives = this.state.blueOperatives\n        let blueSpymasters = this.state.blueSpymasters\n        let showredOperatives = this.state.showredOperatives\n        let showredSpymasters = this.state.showredSpymasters\n        let showblueOperatives = this.state.showblueOperatives\n        let showblueSpymasters = this.state.showblueSpymasters\n        \n\n        //Red Operatives\n        for (let i = 0; i < redOperatives.length; i++){\n            let repeated = false;\n            for (let j = 0; j < showredOperatives.length; j++){\n                if(redOperatives[i].player_id === showredOperatives[j].player_id){\n                    repeated = true\n                }\n            }\n            if (repeated === false){\n                showredOperatives.push(redOperatives[i])\n                this.setState({\n                    showredOperatives\n                })\n            }\n        }//end of for loop\n\n        //Red Spymasters\n        for (let i = 0; i < redSpymasters.length; i++){\n            let repeated = false;\n            for (let j = 0; j < showredSpymasters.length; j++){\n                if(redSpymasters[i].player_id === showredSpymasters[j].player_id){\n                    repeated = true\n                }\n            }\n            if (repeated === false){\n                showredSpymasters.push(redSpymasters[i])\n                this.setState({\n                    showredSpymasters\n                })\n            }\n        }\n\n        //Blue Operative\n        for (let i = 0; i < blueOperatives.length; i++){\n            let repeated = false;\n            for (let j = 0; j < showblueOperatives.length; j++){\n                if(blueOperatives[i].player_id === showblueOperatives[j].player_id){\n                    repeated = true\n                }\n            }\n            if (repeated === false){\n                showblueOperatives.push(blueOperatives[i])\n                this.setState({\n                    showblueOperatives\n                })\n            }\n        }\n\n        //Blue Spymasters\n        for (let i = 0; i < blueSpymasters.length; i++){\n            let repeated = false;\n            for (let j = 0; j < showblueSpymasters.length; j++){\n                if(blueSpymasters[i].player_id === showblueSpymasters[j].player_id){\n                    repeated = true\n                }\n            }\n            if (repeated === false){\n                showblueSpymasters.push(blueSpymasters[i])\n                this.setState({\n                    showblueSpymasters\n                })\n            }\n        }\n\n    }\n\n   \n\n    render() {\n        \n        \n        return(\n            <div>\n                {(this.state.showredOperatives.length >= 1 && this.state.showblueOperatives.length >=1 && \n                  this.state.showredSpymasters.length === 1 && this.state.showblueSpymasters.length === 1) && \n                  (this.props.agentClicked === true || this.props.gameWords[this.props.doubleAgentIndex].category !== 'D') ?\n                    <div className=\"game\" >\n                        <br />\n                        <h6>SPYMASTERS</h6>\n                        <div>\n                            {this.props.currentPlayer ? <h6 style={{color: \"white\", fontSize: \"78px\"}}>{this.props.currentPlayer.operative_screen_name}</h6> : null}\n                            <h6 className=\"gameCode\"> Game Code: {this.props.room_key} </h6>\n                        </div>\n                        <div className=\"container-fluid\">\n                            <div className=\"row\">\n                                <div className=\"col-md-12\">\n                                    <div className=\"row\">\n                                        <div className=\"col-md-4\">\n                                            <div className=\"gameScores\">\n                                                <div className=\"redTeam\">\n                                                    <div>\n                                                \n                                                        <h6 className=\"teamTitle\">Red Team</h6>\n                                                        <h6 className=\"teamScore\">{this.props.redPoints}</h6>\n                                                    </div>\n                                                    <br />\n                                                    <br />\n                                                    <h6 className=\"teamContent\"> Spymaster:</h6>\n                                                        {this.state.showredSpymasters.map((player, index) => (\n                                                            <li className=\"bulletContent\" key={index}>{player.operative_screen_name}</li>\n                                                        ))}\n                                                        {this.showRedSpymasters}\n                                                    \n                                                    <h6 className=\"teamContent\"> Operatives:</h6>\n                                                        {this.state.showredOperatives.map((player, index )=> (\n                                                            <li className=\"bulletContent\" key={index}>{player.operative_screen_name}</li>\n                                                        ))}\n                                                </div>\n                                                <br />\n                                                <div className=\"blueTeam\">\n                                                    <div>\n                                                        <h6 className=\"teamTitle\">Blue Team</h6>\n                                                        <h6 className=\"teamScore\">{this.props.bluePoints}</h6>\n                                                    </div>\n                                                    <br />\n                                                    <br />\n                                                    <h6 className=\"teamContent\"> Spymaster:</h6>\n                                                        {this.state.showblueSpymasters.map((player, index) => (\n                                                            <li className=\"bulletContent\" key={index}>{player.operative_screen_name}</li>\n                                                        ))}\n                                                    <h6 className=\"teamContent\"> Operatives:</h6>\n                                                        {this.state.showblueOperatives.map((player, index)=> (\n                                                            <li className=\"bulletContent\" key={index}>{player.operative_screen_name}</li>\n                                                        ))}\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div className=\"col-md-7\"> {/* Changed back to div from a form */}\n                                                <div className=\"row\">\n                                                    <div className=\"col-md-12\">\n    \n                                                        <Row task={this.state.task}\n                                                            rowWords={[this.state.gameWords[0],\n                                                            this.state.gameWords[1],\n                                                            this.state.gameWords[2],\n                                                            this.state.gameWords[3],\n                                                            this.state.gameWords[4]]}\n                                                            cardNumbers={[0,1,2,3,4]} // Add in card numbers to distinguish\n                                                            gameid={this.state.gameid} // Add in gameid for card websocket\n                                                            increaseTeamPoints={this.props.increaseTeamPoints} />\n                                                        <Row task={this.state.task}\n                                                            rowWords={[this.state.gameWords[5],\n                                                            this.state.gameWords[6],\n                                                            this.state.gameWords[7],\n                                                            this.state.gameWords[8],\n                                                            this.state.gameWords[9]]}\n                                                            cardNumbers={[5,6,7,8,9]}\n                                                            gameid={this.state.gameid} // Add in gameid for card websocket\n                                                            increaseTeamPoints={this.props.increaseTeamPoints} />\n                                                        <Row task={this.state.task}\n                                                            rowWords={[this.state.gameWords[10],\n                                                            this.state.gameWords[11],\n                                                            this.state.gameWords[12],\n                                                            this.state.gameWords[13],\n                                                            this.state.gameWords[14]]}\n                                                            cardNumbers={[10,11,12,13,14]}\n                                                            gameid={this.state.gameid} // Add in gameid for card websocket\n                                                            increaseTeamPoints={this.props.increaseTeamPoints} />\n                                                        <Row task={this.state.task}\n                                                            rowWords={[this.state.gameWords[15],\n                                                            this.state.gameWords[16],\n                                                            this.state.gameWords[17],\n                                                            this.state.gameWords[18],\n                                                            this.state.gameWords[19]]}\n                                                            cardNumbers={[15,16,17,18,19]}\n                                                            gameid={this.state.gameid} // Add in gameid for card websocket\n                                                            increaseTeamPoints={this.props.increaseTeamPoints} />\n                                                        <Row task={this.state.task}\n                                                            rowWords={[this.state.gameWords[20],\n                                                            this.state.gameWords[21],\n                                                            this.state.gameWords[22],\n                                                            this.state.gameWords[23],\n                                                            this.state.gameWords[24]]}\n                                                            cardNumbers={[20,21,22,23,24]}\n                                                            gameid={this.state.gameid} // Add in gameid for card websocket\n                                                            increaseTeamPoints={this.props.increaseTeamPoints} />\n    \n                                                    </div>\n                                                </div>\n                                                <div className=\"row\">\n                                                    <div className=\"col-md-12\">\n                                                        {!this.props.winningScreenIsOpen ? \n                                                        <form>\n                                                            {this.props.myTeam === this.props.currentTeam &&<div className=\"spymasterClue\">\n                                                                <input\n                                                                    type=\"text\"\n                                                                    value={this.state.spymasterClueWord}\n                                                                    name=\"spymasterClueWord\" // Must be same name as state!\n                                                                    placeholder=\"Type clue here\"\n                                                                    onChange={this.handleChange}\n                                                                />\n                                                                <div className=\"counter\">\n                                                                    {/* type = \"button\" to NOT make it submit the form */}\n                                                                    <button type=\"button\" onClick={this.incrementClueCount}>+</button>\n                                                                    <h6>{this.state.spymasterClueCount}</h6>\n                                                                    <button type=\"button\" onClick={this.decrementClueCount}>-</button>\n                                                                </div>\n    \n                                                                {/* <input type=\"button\" onClick={this.socketSend}>Submit Clue</input> */}\n                                                                <input className=\"clueContainer\" type=\"button\" onClick={this.socketSend} value=\"Submit\"/>\n    \n                                                            </div>}\n                                                        </form>\n                                                        :\n                                                        <div className=\"popUp\" >\n                                                            {this.props.team === this.props.winningTeam ? \n                                                        <h4 className=\"Status\">CONGRATS! YOUR TEAM WON!</h4>\n                                                        :\n                                                        <h4 className=\"Status\">SORRY! YOUR TEAM LOST!</h4>\n                                                        }\n                                                        </div>\n                                                        }\n                                                    </div>\n                                                </div>\n                                            </div> {/* Changed back to div from a form */}\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                    </div> \n                    :\n                    <div>\n                        <div className=\"waitingScreen\">\n                            <div className= \"waitingContainer\">\n                                <div class=\"spinner\"></div>\n                                <h4 className=\"waitingText\">\n                                    Waiting for players\n                                    <span class=\"one\">.</span><span class=\"two\">.</span><span class=\"three\">.</span>\n                                </h4>\n                                <button className=\"waitingButton\" onClick={this.props.setDoubleAgent}>I want first</button>\n                            </div>\n                        </div>\n                    </div>\n                } \n\n            </div>\n\n        \n\n        )\n    }\n}\n\nexport default SpymastersGame"]},"metadata":{},"sourceType":"module"}